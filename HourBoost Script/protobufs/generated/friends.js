/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    
    $root.CCommunity_GetApps_Request = (function() {
    
        /**
         * Properties of a CCommunity_GetApps_Request.
         * @exports ICCommunity_GetApps_Request
         * @interface ICCommunity_GetApps_Request
         * @property {Array.<number>|null} [appids] CCommunity_GetApps_Request appids
         * @property {number|null} [language] CCommunity_GetApps_Request language
         */
    
        /**
         * Constructs a new CCommunity_GetApps_Request.
         * @exports CCommunity_GetApps_Request
         * @classdesc Represents a CCommunity_GetApps_Request.
         * @implements ICCommunity_GetApps_Request
         * @constructor
         * @param {ICCommunity_GetApps_Request=} [properties] Properties to set
         */
        function CCommunity_GetApps_Request(properties) {
            this.appids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCommunity_GetApps_Request appids.
         * @member {Array.<number>} appids
         * @memberof CCommunity_GetApps_Request
         * @instance
         */
        CCommunity_GetApps_Request.prototype.appids = $util.emptyArray;
    
        /**
         * CCommunity_GetApps_Request language.
         * @member {number} language
         * @memberof CCommunity_GetApps_Request
         * @instance
         */
        CCommunity_GetApps_Request.prototype.language = 0;
    
        /**
         * Creates a new CCommunity_GetApps_Request instance using the specified properties.
         * @function create
         * @memberof CCommunity_GetApps_Request
         * @static
         * @param {ICCommunity_GetApps_Request=} [properties] Properties to set
         * @returns {CCommunity_GetApps_Request} CCommunity_GetApps_Request instance
         */
        CCommunity_GetApps_Request.create = function create(properties) {
            return new CCommunity_GetApps_Request(properties);
        };
    
        /**
         * Encodes the specified CCommunity_GetApps_Request message. Does not implicitly {@link CCommunity_GetApps_Request.verify|verify} messages.
         * @function encode
         * @memberof CCommunity_GetApps_Request
         * @static
         * @param {ICCommunity_GetApps_Request} message CCommunity_GetApps_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetApps_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appids != null && message.appids.length)
                for (var i = 0; i < message.appids.length; ++i)
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.appids[i]);
            if (message.language != null && message.hasOwnProperty("language"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.language);
            return writer;
        };
    
        /**
         * Encodes the specified CCommunity_GetApps_Request message, length delimited. Does not implicitly {@link CCommunity_GetApps_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCommunity_GetApps_Request
         * @static
         * @param {ICCommunity_GetApps_Request} message CCommunity_GetApps_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetApps_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCommunity_GetApps_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCommunity_GetApps_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCommunity_GetApps_Request} CCommunity_GetApps_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetApps_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCommunity_GetApps_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.appids && message.appids.length))
                        message.appids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.appids.push(reader.int32());
                    } else
                        message.appids.push(reader.int32());
                    break;
                case 2:
                    message.language = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCommunity_GetApps_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCommunity_GetApps_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCommunity_GetApps_Request} CCommunity_GetApps_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetApps_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCommunity_GetApps_Request message.
         * @function verify
         * @memberof CCommunity_GetApps_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCommunity_GetApps_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appids != null && message.hasOwnProperty("appids")) {
                if (!Array.isArray(message.appids))
                    return "appids: array expected";
                for (var i = 0; i < message.appids.length; ++i)
                    if (!$util.isInteger(message.appids[i]))
                        return "appids: integer[] expected";
            }
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isInteger(message.language))
                    return "language: integer expected";
            return null;
        };
    
        /**
         * Creates a CCommunity_GetApps_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCommunity_GetApps_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCommunity_GetApps_Request} CCommunity_GetApps_Request
         */
        CCommunity_GetApps_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCommunity_GetApps_Request)
                return object;
            var message = new $root.CCommunity_GetApps_Request();
            if (object.appids) {
                if (!Array.isArray(object.appids))
                    throw TypeError(".CCommunity_GetApps_Request.appids: array expected");
                message.appids = [];
                for (var i = 0; i < object.appids.length; ++i)
                    message.appids[i] = object.appids[i] | 0;
            }
            if (object.language != null)
                message.language = object.language >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CCommunity_GetApps_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCommunity_GetApps_Request
         * @static
         * @param {CCommunity_GetApps_Request} message CCommunity_GetApps_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCommunity_GetApps_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.appids = [];
            if (options.defaults)
                object.language = 0;
            if (message.appids && message.appids.length) {
                object.appids = [];
                for (var j = 0; j < message.appids.length; ++j)
                    object.appids[j] = message.appids[j];
            }
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            return object;
        };
    
        /**
         * Converts this CCommunity_GetApps_Request to JSON.
         * @function toJSON
         * @memberof CCommunity_GetApps_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCommunity_GetApps_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCommunity_GetApps_Request;
    })();
    
    $root.CCommunity_GetApps_Response = (function() {
    
        /**
         * Properties of a CCommunity_GetApps_Response.
         * @exports ICCommunity_GetApps_Response
         * @interface ICCommunity_GetApps_Response
         * @property {Array.<ICCDDBAppDetailCommon>|null} [apps] CCommunity_GetApps_Response apps
         */
    
        /**
         * Constructs a new CCommunity_GetApps_Response.
         * @exports CCommunity_GetApps_Response
         * @classdesc Represents a CCommunity_GetApps_Response.
         * @implements ICCommunity_GetApps_Response
         * @constructor
         * @param {ICCommunity_GetApps_Response=} [properties] Properties to set
         */
        function CCommunity_GetApps_Response(properties) {
            this.apps = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCommunity_GetApps_Response apps.
         * @member {Array.<ICCDDBAppDetailCommon>} apps
         * @memberof CCommunity_GetApps_Response
         * @instance
         */
        CCommunity_GetApps_Response.prototype.apps = $util.emptyArray;
    
        /**
         * Creates a new CCommunity_GetApps_Response instance using the specified properties.
         * @function create
         * @memberof CCommunity_GetApps_Response
         * @static
         * @param {ICCommunity_GetApps_Response=} [properties] Properties to set
         * @returns {CCommunity_GetApps_Response} CCommunity_GetApps_Response instance
         */
        CCommunity_GetApps_Response.create = function create(properties) {
            return new CCommunity_GetApps_Response(properties);
        };
    
        /**
         * Encodes the specified CCommunity_GetApps_Response message. Does not implicitly {@link CCommunity_GetApps_Response.verify|verify} messages.
         * @function encode
         * @memberof CCommunity_GetApps_Response
         * @static
         * @param {ICCommunity_GetApps_Response} message CCommunity_GetApps_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetApps_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.apps != null && message.apps.length)
                for (var i = 0; i < message.apps.length; ++i)
                    $root.CCDDBAppDetailCommon.encode(message.apps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CCommunity_GetApps_Response message, length delimited. Does not implicitly {@link CCommunity_GetApps_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCommunity_GetApps_Response
         * @static
         * @param {ICCommunity_GetApps_Response} message CCommunity_GetApps_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetApps_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCommunity_GetApps_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCommunity_GetApps_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCommunity_GetApps_Response} CCommunity_GetApps_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetApps_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCommunity_GetApps_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.apps && message.apps.length))
                        message.apps = [];
                    message.apps.push($root.CCDDBAppDetailCommon.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCommunity_GetApps_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCommunity_GetApps_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCommunity_GetApps_Response} CCommunity_GetApps_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetApps_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCommunity_GetApps_Response message.
         * @function verify
         * @memberof CCommunity_GetApps_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCommunity_GetApps_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.apps != null && message.hasOwnProperty("apps")) {
                if (!Array.isArray(message.apps))
                    return "apps: array expected";
                for (var i = 0; i < message.apps.length; ++i) {
                    var error = $root.CCDDBAppDetailCommon.verify(message.apps[i]);
                    if (error)
                        return "apps." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CCommunity_GetApps_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCommunity_GetApps_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCommunity_GetApps_Response} CCommunity_GetApps_Response
         */
        CCommunity_GetApps_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCommunity_GetApps_Response)
                return object;
            var message = new $root.CCommunity_GetApps_Response();
            if (object.apps) {
                if (!Array.isArray(object.apps))
                    throw TypeError(".CCommunity_GetApps_Response.apps: array expected");
                message.apps = [];
                for (var i = 0; i < object.apps.length; ++i) {
                    if (typeof object.apps[i] !== "object")
                        throw TypeError(".CCommunity_GetApps_Response.apps: object expected");
                    message.apps[i] = $root.CCDDBAppDetailCommon.fromObject(object.apps[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CCommunity_GetApps_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCommunity_GetApps_Response
         * @static
         * @param {CCommunity_GetApps_Response} message CCommunity_GetApps_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCommunity_GetApps_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.apps = [];
            if (message.apps && message.apps.length) {
                object.apps = [];
                for (var j = 0; j < message.apps.length; ++j)
                    object.apps[j] = $root.CCDDBAppDetailCommon.toObject(message.apps[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CCommunity_GetApps_Response to JSON.
         * @function toJSON
         * @memberof CCommunity_GetApps_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCommunity_GetApps_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCommunity_GetApps_Response;
    })();
    
    $root.CCommunity_GetAppRichPresenceLocalization_Request = (function() {
    
        /**
         * Properties of a CCommunity_GetAppRichPresenceLocalization_Request.
         * @exports ICCommunity_GetAppRichPresenceLocalization_Request
         * @interface ICCommunity_GetAppRichPresenceLocalization_Request
         * @property {number|null} [appid] CCommunity_GetAppRichPresenceLocalization_Request appid
         * @property {string|null} [language] CCommunity_GetAppRichPresenceLocalization_Request language
         */
    
        /**
         * Constructs a new CCommunity_GetAppRichPresenceLocalization_Request.
         * @exports CCommunity_GetAppRichPresenceLocalization_Request
         * @classdesc Represents a CCommunity_GetAppRichPresenceLocalization_Request.
         * @implements ICCommunity_GetAppRichPresenceLocalization_Request
         * @constructor
         * @param {ICCommunity_GetAppRichPresenceLocalization_Request=} [properties] Properties to set
         */
        function CCommunity_GetAppRichPresenceLocalization_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCommunity_GetAppRichPresenceLocalization_Request appid.
         * @member {number} appid
         * @memberof CCommunity_GetAppRichPresenceLocalization_Request
         * @instance
         */
        CCommunity_GetAppRichPresenceLocalization_Request.prototype.appid = 0;
    
        /**
         * CCommunity_GetAppRichPresenceLocalization_Request language.
         * @member {string} language
         * @memberof CCommunity_GetAppRichPresenceLocalization_Request
         * @instance
         */
        CCommunity_GetAppRichPresenceLocalization_Request.prototype.language = "";
    
        /**
         * Creates a new CCommunity_GetAppRichPresenceLocalization_Request instance using the specified properties.
         * @function create
         * @memberof CCommunity_GetAppRichPresenceLocalization_Request
         * @static
         * @param {ICCommunity_GetAppRichPresenceLocalization_Request=} [properties] Properties to set
         * @returns {CCommunity_GetAppRichPresenceLocalization_Request} CCommunity_GetAppRichPresenceLocalization_Request instance
         */
        CCommunity_GetAppRichPresenceLocalization_Request.create = function create(properties) {
            return new CCommunity_GetAppRichPresenceLocalization_Request(properties);
        };
    
        /**
         * Encodes the specified CCommunity_GetAppRichPresenceLocalization_Request message. Does not implicitly {@link CCommunity_GetAppRichPresenceLocalization_Request.verify|verify} messages.
         * @function encode
         * @memberof CCommunity_GetAppRichPresenceLocalization_Request
         * @static
         * @param {ICCommunity_GetAppRichPresenceLocalization_Request} message CCommunity_GetAppRichPresenceLocalization_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetAppRichPresenceLocalization_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.appid);
            if (message.language != null && message.hasOwnProperty("language"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
            return writer;
        };
    
        /**
         * Encodes the specified CCommunity_GetAppRichPresenceLocalization_Request message, length delimited. Does not implicitly {@link CCommunity_GetAppRichPresenceLocalization_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCommunity_GetAppRichPresenceLocalization_Request
         * @static
         * @param {ICCommunity_GetAppRichPresenceLocalization_Request} message CCommunity_GetAppRichPresenceLocalization_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetAppRichPresenceLocalization_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCommunity_GetAppRichPresenceLocalization_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCommunity_GetAppRichPresenceLocalization_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCommunity_GetAppRichPresenceLocalization_Request} CCommunity_GetAppRichPresenceLocalization_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetAppRichPresenceLocalization_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCommunity_GetAppRichPresenceLocalization_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.int32();
                    break;
                case 2:
                    message.language = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCommunity_GetAppRichPresenceLocalization_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCommunity_GetAppRichPresenceLocalization_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCommunity_GetAppRichPresenceLocalization_Request} CCommunity_GetAppRichPresenceLocalization_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetAppRichPresenceLocalization_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCommunity_GetAppRichPresenceLocalization_Request message.
         * @function verify
         * @memberof CCommunity_GetAppRichPresenceLocalization_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCommunity_GetAppRichPresenceLocalization_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isString(message.language))
                    return "language: string expected";
            return null;
        };
    
        /**
         * Creates a CCommunity_GetAppRichPresenceLocalization_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCommunity_GetAppRichPresenceLocalization_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCommunity_GetAppRichPresenceLocalization_Request} CCommunity_GetAppRichPresenceLocalization_Request
         */
        CCommunity_GetAppRichPresenceLocalization_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCommunity_GetAppRichPresenceLocalization_Request)
                return object;
            var message = new $root.CCommunity_GetAppRichPresenceLocalization_Request();
            if (object.appid != null)
                message.appid = object.appid | 0;
            if (object.language != null)
                message.language = String(object.language);
            return message;
        };
    
        /**
         * Creates a plain object from a CCommunity_GetAppRichPresenceLocalization_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCommunity_GetAppRichPresenceLocalization_Request
         * @static
         * @param {CCommunity_GetAppRichPresenceLocalization_Request} message CCommunity_GetAppRichPresenceLocalization_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCommunity_GetAppRichPresenceLocalization_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                object.language = "";
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            return object;
        };
    
        /**
         * Converts this CCommunity_GetAppRichPresenceLocalization_Request to JSON.
         * @function toJSON
         * @memberof CCommunity_GetAppRichPresenceLocalization_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCommunity_GetAppRichPresenceLocalization_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCommunity_GetAppRichPresenceLocalization_Request;
    })();
    
    $root.CCommunity_GetAppRichPresenceLocalization_Response = (function() {
    
        /**
         * Properties of a CCommunity_GetAppRichPresenceLocalization_Response.
         * @exports ICCommunity_GetAppRichPresenceLocalization_Response
         * @interface ICCommunity_GetAppRichPresenceLocalization_Response
         * @property {number|null} [appid] CCommunity_GetAppRichPresenceLocalization_Response appid
         * @property {Array.<ICCommunity_GetAppRichPresenceLocalization_Response_TokenList>|null} [token_lists] CCommunity_GetAppRichPresenceLocalization_Response token_lists
         */
    
        /**
         * Constructs a new CCommunity_GetAppRichPresenceLocalization_Response.
         * @exports CCommunity_GetAppRichPresenceLocalization_Response
         * @classdesc Represents a CCommunity_GetAppRichPresenceLocalization_Response.
         * @implements ICCommunity_GetAppRichPresenceLocalization_Response
         * @constructor
         * @param {ICCommunity_GetAppRichPresenceLocalization_Response=} [properties] Properties to set
         */
        function CCommunity_GetAppRichPresenceLocalization_Response(properties) {
            this.token_lists = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCommunity_GetAppRichPresenceLocalization_Response appid.
         * @member {number} appid
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response
         * @instance
         */
        CCommunity_GetAppRichPresenceLocalization_Response.prototype.appid = 0;
    
        /**
         * CCommunity_GetAppRichPresenceLocalization_Response token_lists.
         * @member {Array.<ICCommunity_GetAppRichPresenceLocalization_Response_TokenList>} token_lists
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response
         * @instance
         */
        CCommunity_GetAppRichPresenceLocalization_Response.prototype.token_lists = $util.emptyArray;
    
        /**
         * Creates a new CCommunity_GetAppRichPresenceLocalization_Response instance using the specified properties.
         * @function create
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response
         * @static
         * @param {ICCommunity_GetAppRichPresenceLocalization_Response=} [properties] Properties to set
         * @returns {CCommunity_GetAppRichPresenceLocalization_Response} CCommunity_GetAppRichPresenceLocalization_Response instance
         */
        CCommunity_GetAppRichPresenceLocalization_Response.create = function create(properties) {
            return new CCommunity_GetAppRichPresenceLocalization_Response(properties);
        };
    
        /**
         * Encodes the specified CCommunity_GetAppRichPresenceLocalization_Response message. Does not implicitly {@link CCommunity_GetAppRichPresenceLocalization_Response.verify|verify} messages.
         * @function encode
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response
         * @static
         * @param {ICCommunity_GetAppRichPresenceLocalization_Response} message CCommunity_GetAppRichPresenceLocalization_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetAppRichPresenceLocalization_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.appid);
            if (message.token_lists != null && message.token_lists.length)
                for (var i = 0; i < message.token_lists.length; ++i)
                    $root.CCommunity_GetAppRichPresenceLocalization_Response_TokenList.encode(message.token_lists[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CCommunity_GetAppRichPresenceLocalization_Response message, length delimited. Does not implicitly {@link CCommunity_GetAppRichPresenceLocalization_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response
         * @static
         * @param {ICCommunity_GetAppRichPresenceLocalization_Response} message CCommunity_GetAppRichPresenceLocalization_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetAppRichPresenceLocalization_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCommunity_GetAppRichPresenceLocalization_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCommunity_GetAppRichPresenceLocalization_Response} CCommunity_GetAppRichPresenceLocalization_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetAppRichPresenceLocalization_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCommunity_GetAppRichPresenceLocalization_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.int32();
                    break;
                case 2:
                    if (!(message.token_lists && message.token_lists.length))
                        message.token_lists = [];
                    message.token_lists.push($root.CCommunity_GetAppRichPresenceLocalization_Response_TokenList.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCommunity_GetAppRichPresenceLocalization_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCommunity_GetAppRichPresenceLocalization_Response} CCommunity_GetAppRichPresenceLocalization_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetAppRichPresenceLocalization_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCommunity_GetAppRichPresenceLocalization_Response message.
         * @function verify
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCommunity_GetAppRichPresenceLocalization_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.token_lists != null && message.hasOwnProperty("token_lists")) {
                if (!Array.isArray(message.token_lists))
                    return "token_lists: array expected";
                for (var i = 0; i < message.token_lists.length; ++i) {
                    var error = $root.CCommunity_GetAppRichPresenceLocalization_Response_TokenList.verify(message.token_lists[i]);
                    if (error)
                        return "token_lists." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CCommunity_GetAppRichPresenceLocalization_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCommunity_GetAppRichPresenceLocalization_Response} CCommunity_GetAppRichPresenceLocalization_Response
         */
        CCommunity_GetAppRichPresenceLocalization_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCommunity_GetAppRichPresenceLocalization_Response)
                return object;
            var message = new $root.CCommunity_GetAppRichPresenceLocalization_Response();
            if (object.appid != null)
                message.appid = object.appid | 0;
            if (object.token_lists) {
                if (!Array.isArray(object.token_lists))
                    throw TypeError(".CCommunity_GetAppRichPresenceLocalization_Response.token_lists: array expected");
                message.token_lists = [];
                for (var i = 0; i < object.token_lists.length; ++i) {
                    if (typeof object.token_lists[i] !== "object")
                        throw TypeError(".CCommunity_GetAppRichPresenceLocalization_Response.token_lists: object expected");
                    message.token_lists[i] = $root.CCommunity_GetAppRichPresenceLocalization_Response_TokenList.fromObject(object.token_lists[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CCommunity_GetAppRichPresenceLocalization_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response
         * @static
         * @param {CCommunity_GetAppRichPresenceLocalization_Response} message CCommunity_GetAppRichPresenceLocalization_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCommunity_GetAppRichPresenceLocalization_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.token_lists = [];
            if (options.defaults)
                object.appid = 0;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.token_lists && message.token_lists.length) {
                object.token_lists = [];
                for (var j = 0; j < message.token_lists.length; ++j)
                    object.token_lists[j] = $root.CCommunity_GetAppRichPresenceLocalization_Response_TokenList.toObject(message.token_lists[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CCommunity_GetAppRichPresenceLocalization_Response to JSON.
         * @function toJSON
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCommunity_GetAppRichPresenceLocalization_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCommunity_GetAppRichPresenceLocalization_Response;
    })();
    
    $root.CCommunity_GetAppRichPresenceLocalization_Response_Token = (function() {
    
        /**
         * Properties of a CCommunity_GetAppRichPresenceLocalization_Response_Token.
         * @exports ICCommunity_GetAppRichPresenceLocalization_Response_Token
         * @interface ICCommunity_GetAppRichPresenceLocalization_Response_Token
         * @property {string|null} [name] CCommunity_GetAppRichPresenceLocalization_Response_Token name
         * @property {string|null} [value] CCommunity_GetAppRichPresenceLocalization_Response_Token value
         */
    
        /**
         * Constructs a new CCommunity_GetAppRichPresenceLocalization_Response_Token.
         * @exports CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @classdesc Represents a CCommunity_GetAppRichPresenceLocalization_Response_Token.
         * @implements ICCommunity_GetAppRichPresenceLocalization_Response_Token
         * @constructor
         * @param {ICCommunity_GetAppRichPresenceLocalization_Response_Token=} [properties] Properties to set
         */
        function CCommunity_GetAppRichPresenceLocalization_Response_Token(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCommunity_GetAppRichPresenceLocalization_Response_Token name.
         * @member {string} name
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @instance
         */
        CCommunity_GetAppRichPresenceLocalization_Response_Token.prototype.name = "";
    
        /**
         * CCommunity_GetAppRichPresenceLocalization_Response_Token value.
         * @member {string} value
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @instance
         */
        CCommunity_GetAppRichPresenceLocalization_Response_Token.prototype.value = "";
    
        /**
         * Creates a new CCommunity_GetAppRichPresenceLocalization_Response_Token instance using the specified properties.
         * @function create
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @static
         * @param {ICCommunity_GetAppRichPresenceLocalization_Response_Token=} [properties] Properties to set
         * @returns {CCommunity_GetAppRichPresenceLocalization_Response_Token} CCommunity_GetAppRichPresenceLocalization_Response_Token instance
         */
        CCommunity_GetAppRichPresenceLocalization_Response_Token.create = function create(properties) {
            return new CCommunity_GetAppRichPresenceLocalization_Response_Token(properties);
        };
    
        /**
         * Encodes the specified CCommunity_GetAppRichPresenceLocalization_Response_Token message. Does not implicitly {@link CCommunity_GetAppRichPresenceLocalization_Response_Token.verify|verify} messages.
         * @function encode
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @static
         * @param {ICCommunity_GetAppRichPresenceLocalization_Response_Token} message CCommunity_GetAppRichPresenceLocalization_Response_Token message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetAppRichPresenceLocalization_Response_Token.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.value != null && message.hasOwnProperty("value"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
            return writer;
        };
    
        /**
         * Encodes the specified CCommunity_GetAppRichPresenceLocalization_Response_Token message, length delimited. Does not implicitly {@link CCommunity_GetAppRichPresenceLocalization_Response_Token.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @static
         * @param {ICCommunity_GetAppRichPresenceLocalization_Response_Token} message CCommunity_GetAppRichPresenceLocalization_Response_Token message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetAppRichPresenceLocalization_Response_Token.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCommunity_GetAppRichPresenceLocalization_Response_Token message from the specified reader or buffer.
         * @function decode
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCommunity_GetAppRichPresenceLocalization_Response_Token} CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetAppRichPresenceLocalization_Response_Token.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCommunity_GetAppRichPresenceLocalization_Response_Token();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCommunity_GetAppRichPresenceLocalization_Response_Token message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCommunity_GetAppRichPresenceLocalization_Response_Token} CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetAppRichPresenceLocalization_Response_Token.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCommunity_GetAppRichPresenceLocalization_Response_Token message.
         * @function verify
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCommunity_GetAppRichPresenceLocalization_Response_Token.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!$util.isString(message.value))
                    return "value: string expected";
            return null;
        };
    
        /**
         * Creates a CCommunity_GetAppRichPresenceLocalization_Response_Token message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCommunity_GetAppRichPresenceLocalization_Response_Token} CCommunity_GetAppRichPresenceLocalization_Response_Token
         */
        CCommunity_GetAppRichPresenceLocalization_Response_Token.fromObject = function fromObject(object) {
            if (object instanceof $root.CCommunity_GetAppRichPresenceLocalization_Response_Token)
                return object;
            var message = new $root.CCommunity_GetAppRichPresenceLocalization_Response_Token();
            if (object.name != null)
                message.name = String(object.name);
            if (object.value != null)
                message.value = String(object.value);
            return message;
        };
    
        /**
         * Creates a plain object from a CCommunity_GetAppRichPresenceLocalization_Response_Token message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @static
         * @param {CCommunity_GetAppRichPresenceLocalization_Response_Token} message CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCommunity_GetAppRichPresenceLocalization_Response_Token.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.name = "";
                object.value = "";
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
            return object;
        };
    
        /**
         * Converts this CCommunity_GetAppRichPresenceLocalization_Response_Token to JSON.
         * @function toJSON
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_Token
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCommunity_GetAppRichPresenceLocalization_Response_Token.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCommunity_GetAppRichPresenceLocalization_Response_Token;
    })();
    
    $root.CCommunity_GetAppRichPresenceLocalization_Response_TokenList = (function() {
    
        /**
         * Properties of a CCommunity_GetAppRichPresenceLocalization_Response_TokenList.
         * @exports ICCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @interface ICCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @property {string|null} [language] CCommunity_GetAppRichPresenceLocalization_Response_TokenList language
         * @property {Array.<ICCommunity_GetAppRichPresenceLocalization_Response_Token>|null} [tokens] CCommunity_GetAppRichPresenceLocalization_Response_TokenList tokens
         */
    
        /**
         * Constructs a new CCommunity_GetAppRichPresenceLocalization_Response_TokenList.
         * @exports CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @classdesc Represents a CCommunity_GetAppRichPresenceLocalization_Response_TokenList.
         * @implements ICCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @constructor
         * @param {ICCommunity_GetAppRichPresenceLocalization_Response_TokenList=} [properties] Properties to set
         */
        function CCommunity_GetAppRichPresenceLocalization_Response_TokenList(properties) {
            this.tokens = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCommunity_GetAppRichPresenceLocalization_Response_TokenList language.
         * @member {string} language
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @instance
         */
        CCommunity_GetAppRichPresenceLocalization_Response_TokenList.prototype.language = "";
    
        /**
         * CCommunity_GetAppRichPresenceLocalization_Response_TokenList tokens.
         * @member {Array.<ICCommunity_GetAppRichPresenceLocalization_Response_Token>} tokens
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @instance
         */
        CCommunity_GetAppRichPresenceLocalization_Response_TokenList.prototype.tokens = $util.emptyArray;
    
        /**
         * Creates a new CCommunity_GetAppRichPresenceLocalization_Response_TokenList instance using the specified properties.
         * @function create
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @static
         * @param {ICCommunity_GetAppRichPresenceLocalization_Response_TokenList=} [properties] Properties to set
         * @returns {CCommunity_GetAppRichPresenceLocalization_Response_TokenList} CCommunity_GetAppRichPresenceLocalization_Response_TokenList instance
         */
        CCommunity_GetAppRichPresenceLocalization_Response_TokenList.create = function create(properties) {
            return new CCommunity_GetAppRichPresenceLocalization_Response_TokenList(properties);
        };
    
        /**
         * Encodes the specified CCommunity_GetAppRichPresenceLocalization_Response_TokenList message. Does not implicitly {@link CCommunity_GetAppRichPresenceLocalization_Response_TokenList.verify|verify} messages.
         * @function encode
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @static
         * @param {ICCommunity_GetAppRichPresenceLocalization_Response_TokenList} message CCommunity_GetAppRichPresenceLocalization_Response_TokenList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetAppRichPresenceLocalization_Response_TokenList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.language != null && message.hasOwnProperty("language"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.language);
            if (message.tokens != null && message.tokens.length)
                for (var i = 0; i < message.tokens.length; ++i)
                    $root.CCommunity_GetAppRichPresenceLocalization_Response_Token.encode(message.tokens[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CCommunity_GetAppRichPresenceLocalization_Response_TokenList message, length delimited. Does not implicitly {@link CCommunity_GetAppRichPresenceLocalization_Response_TokenList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @static
         * @param {ICCommunity_GetAppRichPresenceLocalization_Response_TokenList} message CCommunity_GetAppRichPresenceLocalization_Response_TokenList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetAppRichPresenceLocalization_Response_TokenList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCommunity_GetAppRichPresenceLocalization_Response_TokenList message from the specified reader or buffer.
         * @function decode
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCommunity_GetAppRichPresenceLocalization_Response_TokenList} CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetAppRichPresenceLocalization_Response_TokenList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCommunity_GetAppRichPresenceLocalization_Response_TokenList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.language = reader.string();
                    break;
                case 2:
                    if (!(message.tokens && message.tokens.length))
                        message.tokens = [];
                    message.tokens.push($root.CCommunity_GetAppRichPresenceLocalization_Response_Token.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCommunity_GetAppRichPresenceLocalization_Response_TokenList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCommunity_GetAppRichPresenceLocalization_Response_TokenList} CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetAppRichPresenceLocalization_Response_TokenList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCommunity_GetAppRichPresenceLocalization_Response_TokenList message.
         * @function verify
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCommunity_GetAppRichPresenceLocalization_Response_TokenList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isString(message.language))
                    return "language: string expected";
            if (message.tokens != null && message.hasOwnProperty("tokens")) {
                if (!Array.isArray(message.tokens))
                    return "tokens: array expected";
                for (var i = 0; i < message.tokens.length; ++i) {
                    var error = $root.CCommunity_GetAppRichPresenceLocalization_Response_Token.verify(message.tokens[i]);
                    if (error)
                        return "tokens." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CCommunity_GetAppRichPresenceLocalization_Response_TokenList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCommunity_GetAppRichPresenceLocalization_Response_TokenList} CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         */
        CCommunity_GetAppRichPresenceLocalization_Response_TokenList.fromObject = function fromObject(object) {
            if (object instanceof $root.CCommunity_GetAppRichPresenceLocalization_Response_TokenList)
                return object;
            var message = new $root.CCommunity_GetAppRichPresenceLocalization_Response_TokenList();
            if (object.language != null)
                message.language = String(object.language);
            if (object.tokens) {
                if (!Array.isArray(object.tokens))
                    throw TypeError(".CCommunity_GetAppRichPresenceLocalization_Response_TokenList.tokens: array expected");
                message.tokens = [];
                for (var i = 0; i < object.tokens.length; ++i) {
                    if (typeof object.tokens[i] !== "object")
                        throw TypeError(".CCommunity_GetAppRichPresenceLocalization_Response_TokenList.tokens: object expected");
                    message.tokens[i] = $root.CCommunity_GetAppRichPresenceLocalization_Response_Token.fromObject(object.tokens[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CCommunity_GetAppRichPresenceLocalization_Response_TokenList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @static
         * @param {CCommunity_GetAppRichPresenceLocalization_Response_TokenList} message CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCommunity_GetAppRichPresenceLocalization_Response_TokenList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tokens = [];
            if (options.defaults)
                object.language = "";
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            if (message.tokens && message.tokens.length) {
                object.tokens = [];
                for (var j = 0; j < message.tokens.length; ++j)
                    object.tokens[j] = $root.CCommunity_GetAppRichPresenceLocalization_Response_Token.toObject(message.tokens[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CCommunity_GetAppRichPresenceLocalization_Response_TokenList to JSON.
         * @function toJSON
         * @memberof CCommunity_GetAppRichPresenceLocalization_Response_TokenList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCommunity_GetAppRichPresenceLocalization_Response_TokenList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCommunity_GetAppRichPresenceLocalization_Response_TokenList;
    })();
    
    $root.CAppPriority = (function() {
    
        /**
         * Properties of a CAppPriority.
         * @exports ICAppPriority
         * @interface ICAppPriority
         * @property {number|null} [priority] CAppPriority priority
         * @property {Array.<number>|null} [appid] CAppPriority appid
         */
    
        /**
         * Constructs a new CAppPriority.
         * @exports CAppPriority
         * @classdesc Represents a CAppPriority.
         * @implements ICAppPriority
         * @constructor
         * @param {ICAppPriority=} [properties] Properties to set
         */
        function CAppPriority(properties) {
            this.appid = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CAppPriority priority.
         * @member {number} priority
         * @memberof CAppPriority
         * @instance
         */
        CAppPriority.prototype.priority = 0;
    
        /**
         * CAppPriority appid.
         * @member {Array.<number>} appid
         * @memberof CAppPriority
         * @instance
         */
        CAppPriority.prototype.appid = $util.emptyArray;
    
        /**
         * Creates a new CAppPriority instance using the specified properties.
         * @function create
         * @memberof CAppPriority
         * @static
         * @param {ICAppPriority=} [properties] Properties to set
         * @returns {CAppPriority} CAppPriority instance
         */
        CAppPriority.create = function create(properties) {
            return new CAppPriority(properties);
        };
    
        /**
         * Encodes the specified CAppPriority message. Does not implicitly {@link CAppPriority.verify|verify} messages.
         * @function encode
         * @memberof CAppPriority
         * @static
         * @param {ICAppPriority} message CAppPriority message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CAppPriority.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.priority != null && message.hasOwnProperty("priority"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.priority);
            if (message.appid != null && message.appid.length)
                for (var i = 0; i < message.appid.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appid[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CAppPriority message, length delimited. Does not implicitly {@link CAppPriority.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CAppPriority
         * @static
         * @param {ICAppPriority} message CAppPriority message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CAppPriority.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CAppPriority message from the specified reader or buffer.
         * @function decode
         * @memberof CAppPriority
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CAppPriority} CAppPriority
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CAppPriority.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CAppPriority();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.priority = reader.uint32();
                    break;
                case 2:
                    if (!(message.appid && message.appid.length))
                        message.appid = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.appid.push(reader.uint32());
                    } else
                        message.appid.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CAppPriority message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CAppPriority
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CAppPriority} CAppPriority
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CAppPriority.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CAppPriority message.
         * @function verify
         * @memberof CAppPriority
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CAppPriority.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.priority != null && message.hasOwnProperty("priority"))
                if (!$util.isInteger(message.priority))
                    return "priority: integer expected";
            if (message.appid != null && message.hasOwnProperty("appid")) {
                if (!Array.isArray(message.appid))
                    return "appid: array expected";
                for (var i = 0; i < message.appid.length; ++i)
                    if (!$util.isInteger(message.appid[i]))
                        return "appid: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CAppPriority message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CAppPriority
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CAppPriority} CAppPriority
         */
        CAppPriority.fromObject = function fromObject(object) {
            if (object instanceof $root.CAppPriority)
                return object;
            var message = new $root.CAppPriority();
            if (object.priority != null)
                message.priority = object.priority >>> 0;
            if (object.appid) {
                if (!Array.isArray(object.appid))
                    throw TypeError(".CAppPriority.appid: array expected");
                message.appid = [];
                for (var i = 0; i < object.appid.length; ++i)
                    message.appid[i] = object.appid[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CAppPriority message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CAppPriority
         * @static
         * @param {CAppPriority} message CAppPriority
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CAppPriority.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.appid = [];
            if (options.defaults)
                object.priority = 0;
            if (message.priority != null && message.hasOwnProperty("priority"))
                object.priority = message.priority;
            if (message.appid && message.appid.length) {
                object.appid = [];
                for (var j = 0; j < message.appid.length; ++j)
                    object.appid[j] = message.appid[j];
            }
            return object;
        };
    
        /**
         * Converts this CAppPriority to JSON.
         * @function toJSON
         * @memberof CAppPriority
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CAppPriority.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CAppPriority;
    })();
    
    $root.CCommunity_GetUserPartnerEventNews_Response = (function() {
    
        /**
         * Properties of a CCommunity_GetUserPartnerEventNews_Response.
         * @exports ICCommunity_GetUserPartnerEventNews_Response
         * @interface ICCommunity_GetUserPartnerEventNews_Response
         * @property {Array.<ICClanMatchEventByRange>|null} [results] CCommunity_GetUserPartnerEventNews_Response results
         */
    
        /**
         * Constructs a new CCommunity_GetUserPartnerEventNews_Response.
         * @exports CCommunity_GetUserPartnerEventNews_Response
         * @classdesc Represents a CCommunity_GetUserPartnerEventNews_Response.
         * @implements ICCommunity_GetUserPartnerEventNews_Response
         * @constructor
         * @param {ICCommunity_GetUserPartnerEventNews_Response=} [properties] Properties to set
         */
        function CCommunity_GetUserPartnerEventNews_Response(properties) {
            this.results = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCommunity_GetUserPartnerEventNews_Response results.
         * @member {Array.<ICClanMatchEventByRange>} results
         * @memberof CCommunity_GetUserPartnerEventNews_Response
         * @instance
         */
        CCommunity_GetUserPartnerEventNews_Response.prototype.results = $util.emptyArray;
    
        /**
         * Creates a new CCommunity_GetUserPartnerEventNews_Response instance using the specified properties.
         * @function create
         * @memberof CCommunity_GetUserPartnerEventNews_Response
         * @static
         * @param {ICCommunity_GetUserPartnerEventNews_Response=} [properties] Properties to set
         * @returns {CCommunity_GetUserPartnerEventNews_Response} CCommunity_GetUserPartnerEventNews_Response instance
         */
        CCommunity_GetUserPartnerEventNews_Response.create = function create(properties) {
            return new CCommunity_GetUserPartnerEventNews_Response(properties);
        };
    
        /**
         * Encodes the specified CCommunity_GetUserPartnerEventNews_Response message. Does not implicitly {@link CCommunity_GetUserPartnerEventNews_Response.verify|verify} messages.
         * @function encode
         * @memberof CCommunity_GetUserPartnerEventNews_Response
         * @static
         * @param {ICCommunity_GetUserPartnerEventNews_Response} message CCommunity_GetUserPartnerEventNews_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetUserPartnerEventNews_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.results != null && message.results.length)
                for (var i = 0; i < message.results.length; ++i)
                    $root.CClanMatchEventByRange.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CCommunity_GetUserPartnerEventNews_Response message, length delimited. Does not implicitly {@link CCommunity_GetUserPartnerEventNews_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCommunity_GetUserPartnerEventNews_Response
         * @static
         * @param {ICCommunity_GetUserPartnerEventNews_Response} message CCommunity_GetUserPartnerEventNews_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_GetUserPartnerEventNews_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCommunity_GetUserPartnerEventNews_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCommunity_GetUserPartnerEventNews_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCommunity_GetUserPartnerEventNews_Response} CCommunity_GetUserPartnerEventNews_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetUserPartnerEventNews_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCommunity_GetUserPartnerEventNews_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.results && message.results.length))
                        message.results = [];
                    message.results.push($root.CClanMatchEventByRange.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCommunity_GetUserPartnerEventNews_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCommunity_GetUserPartnerEventNews_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCommunity_GetUserPartnerEventNews_Response} CCommunity_GetUserPartnerEventNews_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_GetUserPartnerEventNews_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCommunity_GetUserPartnerEventNews_Response message.
         * @function verify
         * @memberof CCommunity_GetUserPartnerEventNews_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCommunity_GetUserPartnerEventNews_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.results != null && message.hasOwnProperty("results")) {
                if (!Array.isArray(message.results))
                    return "results: array expected";
                for (var i = 0; i < message.results.length; ++i) {
                    var error = $root.CClanMatchEventByRange.verify(message.results[i]);
                    if (error)
                        return "results." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CCommunity_GetUserPartnerEventNews_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCommunity_GetUserPartnerEventNews_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCommunity_GetUserPartnerEventNews_Response} CCommunity_GetUserPartnerEventNews_Response
         */
        CCommunity_GetUserPartnerEventNews_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCommunity_GetUserPartnerEventNews_Response)
                return object;
            var message = new $root.CCommunity_GetUserPartnerEventNews_Response();
            if (object.results) {
                if (!Array.isArray(object.results))
                    throw TypeError(".CCommunity_GetUserPartnerEventNews_Response.results: array expected");
                message.results = [];
                for (var i = 0; i < object.results.length; ++i) {
                    if (typeof object.results[i] !== "object")
                        throw TypeError(".CCommunity_GetUserPartnerEventNews_Response.results: object expected");
                    message.results[i] = $root.CClanMatchEventByRange.fromObject(object.results[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CCommunity_GetUserPartnerEventNews_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCommunity_GetUserPartnerEventNews_Response
         * @static
         * @param {CCommunity_GetUserPartnerEventNews_Response} message CCommunity_GetUserPartnerEventNews_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCommunity_GetUserPartnerEventNews_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.results = [];
            if (message.results && message.results.length) {
                object.results = [];
                for (var j = 0; j < message.results.length; ++j)
                    object.results[j] = $root.CClanMatchEventByRange.toObject(message.results[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CCommunity_GetUserPartnerEventNews_Response to JSON.
         * @function toJSON
         * @memberof CCommunity_GetUserPartnerEventNews_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCommunity_GetUserPartnerEventNews_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCommunity_GetUserPartnerEventNews_Response;
    })();
    
    $root.CPlayer_PostStatusToFriends_Response = (function() {
    
        /**
         * Properties of a CPlayer_PostStatusToFriends_Response.
         * @exports ICPlayer_PostStatusToFriends_Response
         * @interface ICPlayer_PostStatusToFriends_Response
         */
    
        /**
         * Constructs a new CPlayer_PostStatusToFriends_Response.
         * @exports CPlayer_PostStatusToFriends_Response
         * @classdesc Represents a CPlayer_PostStatusToFriends_Response.
         * @implements ICPlayer_PostStatusToFriends_Response
         * @constructor
         * @param {ICPlayer_PostStatusToFriends_Response=} [properties] Properties to set
         */
        function CPlayer_PostStatusToFriends_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_PostStatusToFriends_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {ICPlayer_PostStatusToFriends_Response=} [properties] Properties to set
         * @returns {CPlayer_PostStatusToFriends_Response} CPlayer_PostStatusToFriends_Response instance
         */
        CPlayer_PostStatusToFriends_Response.create = function create(properties) {
            return new CPlayer_PostStatusToFriends_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_PostStatusToFriends_Response message. Does not implicitly {@link CPlayer_PostStatusToFriends_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {ICPlayer_PostStatusToFriends_Response} message CPlayer_PostStatusToFriends_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_PostStatusToFriends_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_PostStatusToFriends_Response message, length delimited. Does not implicitly {@link CPlayer_PostStatusToFriends_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {ICPlayer_PostStatusToFriends_Response} message CPlayer_PostStatusToFriends_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_PostStatusToFriends_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_PostStatusToFriends_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_PostStatusToFriends_Response} CPlayer_PostStatusToFriends_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_PostStatusToFriends_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_PostStatusToFriends_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_PostStatusToFriends_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_PostStatusToFriends_Response} CPlayer_PostStatusToFriends_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_PostStatusToFriends_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_PostStatusToFriends_Response message.
         * @function verify
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_PostStatusToFriends_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_PostStatusToFriends_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_PostStatusToFriends_Response} CPlayer_PostStatusToFriends_Response
         */
        CPlayer_PostStatusToFriends_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_PostStatusToFriends_Response)
                return object;
            return new $root.CPlayer_PostStatusToFriends_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_PostStatusToFriends_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {CPlayer_PostStatusToFriends_Response} message CPlayer_PostStatusToFriends_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_PostStatusToFriends_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_PostStatusToFriends_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_PostStatusToFriends_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_PostStatusToFriends_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_PostStatusToFriends_Response;
    })();
    
    $root.CPlayer_GetPostedStatus_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetPostedStatus_Response.
         * @exports ICPlayer_GetPostedStatus_Response
         * @interface ICPlayer_GetPostedStatus_Response
         * @property {number|null} [accountid] CPlayer_GetPostedStatus_Response accountid
         * @property {number|Long|null} [postid] CPlayer_GetPostedStatus_Response postid
         * @property {string|null} [status_text] CPlayer_GetPostedStatus_Response status_text
         * @property {boolean|null} [deleted] CPlayer_GetPostedStatus_Response deleted
         * @property {number|null} [appid] CPlayer_GetPostedStatus_Response appid
         */
    
        /**
         * Constructs a new CPlayer_GetPostedStatus_Response.
         * @exports CPlayer_GetPostedStatus_Response
         * @classdesc Represents a CPlayer_GetPostedStatus_Response.
         * @implements ICPlayer_GetPostedStatus_Response
         * @constructor
         * @param {ICPlayer_GetPostedStatus_Response=} [properties] Properties to set
         */
        function CPlayer_GetPostedStatus_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetPostedStatus_Response accountid.
         * @member {number} accountid
         * @memberof CPlayer_GetPostedStatus_Response
         * @instance
         */
        CPlayer_GetPostedStatus_Response.prototype.accountid = 0;
    
        /**
         * CPlayer_GetPostedStatus_Response postid.
         * @member {number|Long} postid
         * @memberof CPlayer_GetPostedStatus_Response
         * @instance
         */
        CPlayer_GetPostedStatus_Response.prototype.postid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CPlayer_GetPostedStatus_Response status_text.
         * @member {string} status_text
         * @memberof CPlayer_GetPostedStatus_Response
         * @instance
         */
        CPlayer_GetPostedStatus_Response.prototype.status_text = "";
    
        /**
         * CPlayer_GetPostedStatus_Response deleted.
         * @member {boolean} deleted
         * @memberof CPlayer_GetPostedStatus_Response
         * @instance
         */
        CPlayer_GetPostedStatus_Response.prototype.deleted = false;
    
        /**
         * CPlayer_GetPostedStatus_Response appid.
         * @member {number} appid
         * @memberof CPlayer_GetPostedStatus_Response
         * @instance
         */
        CPlayer_GetPostedStatus_Response.prototype.appid = 0;
    
        /**
         * Creates a new CPlayer_GetPostedStatus_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {ICPlayer_GetPostedStatus_Response=} [properties] Properties to set
         * @returns {CPlayer_GetPostedStatus_Response} CPlayer_GetPostedStatus_Response instance
         */
        CPlayer_GetPostedStatus_Response.create = function create(properties) {
            return new CPlayer_GetPostedStatus_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetPostedStatus_Response message. Does not implicitly {@link CPlayer_GetPostedStatus_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {ICPlayer_GetPostedStatus_Response} message CPlayer_GetPostedStatus_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPostedStatus_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
            if (message.postid != null && message.hasOwnProperty("postid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.postid);
            if (message.status_text != null && message.hasOwnProperty("status_text"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.status_text);
            if (message.deleted != null && message.hasOwnProperty("deleted"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.deleted);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.appid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetPostedStatus_Response message, length delimited. Does not implicitly {@link CPlayer_GetPostedStatus_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {ICPlayer_GetPostedStatus_Response} message CPlayer_GetPostedStatus_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPostedStatus_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetPostedStatus_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetPostedStatus_Response} CPlayer_GetPostedStatus_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPostedStatus_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetPostedStatus_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.uint32();
                    break;
                case 2:
                    message.postid = reader.uint64();
                    break;
                case 3:
                    message.status_text = reader.string();
                    break;
                case 4:
                    message.deleted = reader.bool();
                    break;
                case 5:
                    message.appid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetPostedStatus_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetPostedStatus_Response} CPlayer_GetPostedStatus_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPostedStatus_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetPostedStatus_Response message.
         * @function verify
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetPostedStatus_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.postid != null && message.hasOwnProperty("postid"))
                if (!$util.isInteger(message.postid) && !(message.postid && $util.isInteger(message.postid.low) && $util.isInteger(message.postid.high)))
                    return "postid: integer|Long expected";
            if (message.status_text != null && message.hasOwnProperty("status_text"))
                if (!$util.isString(message.status_text))
                    return "status_text: string expected";
            if (message.deleted != null && message.hasOwnProperty("deleted"))
                if (typeof message.deleted !== "boolean")
                    return "deleted: boolean expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetPostedStatus_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetPostedStatus_Response} CPlayer_GetPostedStatus_Response
         */
        CPlayer_GetPostedStatus_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetPostedStatus_Response)
                return object;
            var message = new $root.CPlayer_GetPostedStatus_Response();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.postid != null)
                if ($util.Long)
                    (message.postid = $util.Long.fromValue(object.postid)).unsigned = true;
                else if (typeof object.postid === "string")
                    message.postid = parseInt(object.postid, 10);
                else if (typeof object.postid === "number")
                    message.postid = object.postid;
                else if (typeof object.postid === "object")
                    message.postid = new $util.LongBits(object.postid.low >>> 0, object.postid.high >>> 0).toNumber(true);
            if (object.status_text != null)
                message.status_text = String(object.status_text);
            if (object.deleted != null)
                message.deleted = Boolean(object.deleted);
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetPostedStatus_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {CPlayer_GetPostedStatus_Response} message CPlayer_GetPostedStatus_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetPostedStatus_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.accountid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.postid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.postid = options.longs === String ? "0" : 0;
                object.status_text = "";
                object.deleted = false;
                object.appid = 0;
            }
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.postid != null && message.hasOwnProperty("postid"))
                if (typeof message.postid === "number")
                    object.postid = options.longs === String ? String(message.postid) : message.postid;
                else
                    object.postid = options.longs === String ? $util.Long.prototype.toString.call(message.postid) : options.longs === Number ? new $util.LongBits(message.postid.low >>> 0, message.postid.high >>> 0).toNumber(true) : message.postid;
            if (message.status_text != null && message.hasOwnProperty("status_text"))
                object.status_text = message.status_text;
            if (message.deleted != null && message.hasOwnProperty("deleted"))
                object.deleted = message.deleted;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetPostedStatus_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetPostedStatus_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetPostedStatus_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetPostedStatus_Response;
    })();
    
    $root.CWebRTCClient_InitiateWebRTCConnection_Request = (function() {
    
        /**
         * Properties of a CWebRTCClient_InitiateWebRTCConnection_Request.
         * @exports ICWebRTCClient_InitiateWebRTCConnection_Request
         * @interface ICWebRTCClient_InitiateWebRTCConnection_Request
         * @property {string|null} [sdp] CWebRTCClient_InitiateWebRTCConnection_Request sdp
         */
    
        /**
         * Constructs a new CWebRTCClient_InitiateWebRTCConnection_Request.
         * @exports CWebRTCClient_InitiateWebRTCConnection_Request
         * @classdesc Represents a CWebRTCClient_InitiateWebRTCConnection_Request.
         * @implements ICWebRTCClient_InitiateWebRTCConnection_Request
         * @constructor
         * @param {ICWebRTCClient_InitiateWebRTCConnection_Request=} [properties] Properties to set
         */
        function CWebRTCClient_InitiateWebRTCConnection_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CWebRTCClient_InitiateWebRTCConnection_Request sdp.
         * @member {string} sdp
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Request
         * @instance
         */
        CWebRTCClient_InitiateWebRTCConnection_Request.prototype.sdp = "";
    
        /**
         * Creates a new CWebRTCClient_InitiateWebRTCConnection_Request instance using the specified properties.
         * @function create
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Request
         * @static
         * @param {ICWebRTCClient_InitiateWebRTCConnection_Request=} [properties] Properties to set
         * @returns {CWebRTCClient_InitiateWebRTCConnection_Request} CWebRTCClient_InitiateWebRTCConnection_Request instance
         */
        CWebRTCClient_InitiateWebRTCConnection_Request.create = function create(properties) {
            return new CWebRTCClient_InitiateWebRTCConnection_Request(properties);
        };
    
        /**
         * Encodes the specified CWebRTCClient_InitiateWebRTCConnection_Request message. Does not implicitly {@link CWebRTCClient_InitiateWebRTCConnection_Request.verify|verify} messages.
         * @function encode
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Request
         * @static
         * @param {ICWebRTCClient_InitiateWebRTCConnection_Request} message CWebRTCClient_InitiateWebRTCConnection_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTCClient_InitiateWebRTCConnection_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sdp != null && message.hasOwnProperty("sdp"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.sdp);
            return writer;
        };
    
        /**
         * Encodes the specified CWebRTCClient_InitiateWebRTCConnection_Request message, length delimited. Does not implicitly {@link CWebRTCClient_InitiateWebRTCConnection_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Request
         * @static
         * @param {ICWebRTCClient_InitiateWebRTCConnection_Request} message CWebRTCClient_InitiateWebRTCConnection_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTCClient_InitiateWebRTCConnection_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CWebRTCClient_InitiateWebRTCConnection_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CWebRTCClient_InitiateWebRTCConnection_Request} CWebRTCClient_InitiateWebRTCConnection_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTCClient_InitiateWebRTCConnection_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CWebRTCClient_InitiateWebRTCConnection_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sdp = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CWebRTCClient_InitiateWebRTCConnection_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CWebRTCClient_InitiateWebRTCConnection_Request} CWebRTCClient_InitiateWebRTCConnection_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTCClient_InitiateWebRTCConnection_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CWebRTCClient_InitiateWebRTCConnection_Request message.
         * @function verify
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CWebRTCClient_InitiateWebRTCConnection_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sdp != null && message.hasOwnProperty("sdp"))
                if (!$util.isString(message.sdp))
                    return "sdp: string expected";
            return null;
        };
    
        /**
         * Creates a CWebRTCClient_InitiateWebRTCConnection_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CWebRTCClient_InitiateWebRTCConnection_Request} CWebRTCClient_InitiateWebRTCConnection_Request
         */
        CWebRTCClient_InitiateWebRTCConnection_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CWebRTCClient_InitiateWebRTCConnection_Request)
                return object;
            var message = new $root.CWebRTCClient_InitiateWebRTCConnection_Request();
            if (object.sdp != null)
                message.sdp = String(object.sdp);
            return message;
        };
    
        /**
         * Creates a plain object from a CWebRTCClient_InitiateWebRTCConnection_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Request
         * @static
         * @param {CWebRTCClient_InitiateWebRTCConnection_Request} message CWebRTCClient_InitiateWebRTCConnection_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CWebRTCClient_InitiateWebRTCConnection_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.sdp = "";
            if (message.sdp != null && message.hasOwnProperty("sdp"))
                object.sdp = message.sdp;
            return object;
        };
    
        /**
         * Converts this CWebRTCClient_InitiateWebRTCConnection_Request to JSON.
         * @function toJSON
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CWebRTCClient_InitiateWebRTCConnection_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CWebRTCClient_InitiateWebRTCConnection_Request;
    })();
    
    $root.CWebRTCClient_InitiateWebRTCConnection_Response = (function() {
    
        /**
         * Properties of a CWebRTCClient_InitiateWebRTCConnection_Response.
         * @exports ICWebRTCClient_InitiateWebRTCConnection_Response
         * @interface ICWebRTCClient_InitiateWebRTCConnection_Response
         * @property {string|null} [remote_description] CWebRTCClient_InitiateWebRTCConnection_Response remote_description
         */
    
        /**
         * Constructs a new CWebRTCClient_InitiateWebRTCConnection_Response.
         * @exports CWebRTCClient_InitiateWebRTCConnection_Response
         * @classdesc Represents a CWebRTCClient_InitiateWebRTCConnection_Response.
         * @implements ICWebRTCClient_InitiateWebRTCConnection_Response
         * @constructor
         * @param {ICWebRTCClient_InitiateWebRTCConnection_Response=} [properties] Properties to set
         */
        function CWebRTCClient_InitiateWebRTCConnection_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CWebRTCClient_InitiateWebRTCConnection_Response remote_description.
         * @member {string} remote_description
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Response
         * @instance
         */
        CWebRTCClient_InitiateWebRTCConnection_Response.prototype.remote_description = "";
    
        /**
         * Creates a new CWebRTCClient_InitiateWebRTCConnection_Response instance using the specified properties.
         * @function create
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Response
         * @static
         * @param {ICWebRTCClient_InitiateWebRTCConnection_Response=} [properties] Properties to set
         * @returns {CWebRTCClient_InitiateWebRTCConnection_Response} CWebRTCClient_InitiateWebRTCConnection_Response instance
         */
        CWebRTCClient_InitiateWebRTCConnection_Response.create = function create(properties) {
            return new CWebRTCClient_InitiateWebRTCConnection_Response(properties);
        };
    
        /**
         * Encodes the specified CWebRTCClient_InitiateWebRTCConnection_Response message. Does not implicitly {@link CWebRTCClient_InitiateWebRTCConnection_Response.verify|verify} messages.
         * @function encode
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Response
         * @static
         * @param {ICWebRTCClient_InitiateWebRTCConnection_Response} message CWebRTCClient_InitiateWebRTCConnection_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTCClient_InitiateWebRTCConnection_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.remote_description != null && message.hasOwnProperty("remote_description"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.remote_description);
            return writer;
        };
    
        /**
         * Encodes the specified CWebRTCClient_InitiateWebRTCConnection_Response message, length delimited. Does not implicitly {@link CWebRTCClient_InitiateWebRTCConnection_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Response
         * @static
         * @param {ICWebRTCClient_InitiateWebRTCConnection_Response} message CWebRTCClient_InitiateWebRTCConnection_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTCClient_InitiateWebRTCConnection_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CWebRTCClient_InitiateWebRTCConnection_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CWebRTCClient_InitiateWebRTCConnection_Response} CWebRTCClient_InitiateWebRTCConnection_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTCClient_InitiateWebRTCConnection_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CWebRTCClient_InitiateWebRTCConnection_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.remote_description = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CWebRTCClient_InitiateWebRTCConnection_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CWebRTCClient_InitiateWebRTCConnection_Response} CWebRTCClient_InitiateWebRTCConnection_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTCClient_InitiateWebRTCConnection_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CWebRTCClient_InitiateWebRTCConnection_Response message.
         * @function verify
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CWebRTCClient_InitiateWebRTCConnection_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.remote_description != null && message.hasOwnProperty("remote_description"))
                if (!$util.isString(message.remote_description))
                    return "remote_description: string expected";
            return null;
        };
    
        /**
         * Creates a CWebRTCClient_InitiateWebRTCConnection_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CWebRTCClient_InitiateWebRTCConnection_Response} CWebRTCClient_InitiateWebRTCConnection_Response
         */
        CWebRTCClient_InitiateWebRTCConnection_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CWebRTCClient_InitiateWebRTCConnection_Response)
                return object;
            var message = new $root.CWebRTCClient_InitiateWebRTCConnection_Response();
            if (object.remote_description != null)
                message.remote_description = String(object.remote_description);
            return message;
        };
    
        /**
         * Creates a plain object from a CWebRTCClient_InitiateWebRTCConnection_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Response
         * @static
         * @param {CWebRTCClient_InitiateWebRTCConnection_Response} message CWebRTCClient_InitiateWebRTCConnection_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CWebRTCClient_InitiateWebRTCConnection_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.remote_description = "";
            if (message.remote_description != null && message.hasOwnProperty("remote_description"))
                object.remote_description = message.remote_description;
            return object;
        };
    
        /**
         * Converts this CWebRTCClient_InitiateWebRTCConnection_Response to JSON.
         * @function toJSON
         * @memberof CWebRTCClient_InitiateWebRTCConnection_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CWebRTCClient_InitiateWebRTCConnection_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CWebRTCClient_InitiateWebRTCConnection_Response;
    })();
    
    $root.CWebRTC_WebRTCSessionConnected_Notification = (function() {
    
        /**
         * Properties of a CWebRTC_WebRTCSessionConnected_Notification.
         * @exports ICWebRTC_WebRTCSessionConnected_Notification
         * @interface ICWebRTC_WebRTCSessionConnected_Notification
         * @property {number|null} [ssrc] CWebRTC_WebRTCSessionConnected_Notification ssrc
         * @property {number|null} [client_ip] CWebRTC_WebRTCSessionConnected_Notification client_ip
         * @property {number|null} [client_port] CWebRTC_WebRTCSessionConnected_Notification client_port
         * @property {number|null} [server_ip] CWebRTC_WebRTCSessionConnected_Notification server_ip
         * @property {number|null} [server_port] CWebRTC_WebRTCSessionConnected_Notification server_port
         */
    
        /**
         * Constructs a new CWebRTC_WebRTCSessionConnected_Notification.
         * @exports CWebRTC_WebRTCSessionConnected_Notification
         * @classdesc Represents a CWebRTC_WebRTCSessionConnected_Notification.
         * @implements ICWebRTC_WebRTCSessionConnected_Notification
         * @constructor
         * @param {ICWebRTC_WebRTCSessionConnected_Notification=} [properties] Properties to set
         */
        function CWebRTC_WebRTCSessionConnected_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CWebRTC_WebRTCSessionConnected_Notification ssrc.
         * @member {number} ssrc
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @instance
         */
        CWebRTC_WebRTCSessionConnected_Notification.prototype.ssrc = 0;
    
        /**
         * CWebRTC_WebRTCSessionConnected_Notification client_ip.
         * @member {number} client_ip
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @instance
         */
        CWebRTC_WebRTCSessionConnected_Notification.prototype.client_ip = 0;
    
        /**
         * CWebRTC_WebRTCSessionConnected_Notification client_port.
         * @member {number} client_port
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @instance
         */
        CWebRTC_WebRTCSessionConnected_Notification.prototype.client_port = 0;
    
        /**
         * CWebRTC_WebRTCSessionConnected_Notification server_ip.
         * @member {number} server_ip
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @instance
         */
        CWebRTC_WebRTCSessionConnected_Notification.prototype.server_ip = 0;
    
        /**
         * CWebRTC_WebRTCSessionConnected_Notification server_port.
         * @member {number} server_port
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @instance
         */
        CWebRTC_WebRTCSessionConnected_Notification.prototype.server_port = 0;
    
        /**
         * Creates a new CWebRTC_WebRTCSessionConnected_Notification instance using the specified properties.
         * @function create
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @static
         * @param {ICWebRTC_WebRTCSessionConnected_Notification=} [properties] Properties to set
         * @returns {CWebRTC_WebRTCSessionConnected_Notification} CWebRTC_WebRTCSessionConnected_Notification instance
         */
        CWebRTC_WebRTCSessionConnected_Notification.create = function create(properties) {
            return new CWebRTC_WebRTCSessionConnected_Notification(properties);
        };
    
        /**
         * Encodes the specified CWebRTC_WebRTCSessionConnected_Notification message. Does not implicitly {@link CWebRTC_WebRTCSessionConnected_Notification.verify|verify} messages.
         * @function encode
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @static
         * @param {ICWebRTC_WebRTCSessionConnected_Notification} message CWebRTC_WebRTCSessionConnected_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTC_WebRTCSessionConnected_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ssrc != null && message.hasOwnProperty("ssrc"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ssrc);
            if (message.client_ip != null && message.hasOwnProperty("client_ip"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.client_ip);
            if (message.client_port != null && message.hasOwnProperty("client_port"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.client_port);
            if (message.server_ip != null && message.hasOwnProperty("server_ip"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.server_ip);
            if (message.server_port != null && message.hasOwnProperty("server_port"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.server_port);
            return writer;
        };
    
        /**
         * Encodes the specified CWebRTC_WebRTCSessionConnected_Notification message, length delimited. Does not implicitly {@link CWebRTC_WebRTCSessionConnected_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @static
         * @param {ICWebRTC_WebRTCSessionConnected_Notification} message CWebRTC_WebRTCSessionConnected_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTC_WebRTCSessionConnected_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CWebRTC_WebRTCSessionConnected_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CWebRTC_WebRTCSessionConnected_Notification} CWebRTC_WebRTCSessionConnected_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTC_WebRTCSessionConnected_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CWebRTC_WebRTCSessionConnected_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ssrc = reader.uint32();
                    break;
                case 2:
                    message.client_ip = reader.uint32();
                    break;
                case 3:
                    message.client_port = reader.uint32();
                    break;
                case 4:
                    message.server_ip = reader.uint32();
                    break;
                case 5:
                    message.server_port = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CWebRTC_WebRTCSessionConnected_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CWebRTC_WebRTCSessionConnected_Notification} CWebRTC_WebRTCSessionConnected_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTC_WebRTCSessionConnected_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CWebRTC_WebRTCSessionConnected_Notification message.
         * @function verify
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CWebRTC_WebRTCSessionConnected_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ssrc != null && message.hasOwnProperty("ssrc"))
                if (!$util.isInteger(message.ssrc))
                    return "ssrc: integer expected";
            if (message.client_ip != null && message.hasOwnProperty("client_ip"))
                if (!$util.isInteger(message.client_ip))
                    return "client_ip: integer expected";
            if (message.client_port != null && message.hasOwnProperty("client_port"))
                if (!$util.isInteger(message.client_port))
                    return "client_port: integer expected";
            if (message.server_ip != null && message.hasOwnProperty("server_ip"))
                if (!$util.isInteger(message.server_ip))
                    return "server_ip: integer expected";
            if (message.server_port != null && message.hasOwnProperty("server_port"))
                if (!$util.isInteger(message.server_port))
                    return "server_port: integer expected";
            return null;
        };
    
        /**
         * Creates a CWebRTC_WebRTCSessionConnected_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CWebRTC_WebRTCSessionConnected_Notification} CWebRTC_WebRTCSessionConnected_Notification
         */
        CWebRTC_WebRTCSessionConnected_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CWebRTC_WebRTCSessionConnected_Notification)
                return object;
            var message = new $root.CWebRTC_WebRTCSessionConnected_Notification();
            if (object.ssrc != null)
                message.ssrc = object.ssrc >>> 0;
            if (object.client_ip != null)
                message.client_ip = object.client_ip >>> 0;
            if (object.client_port != null)
                message.client_port = object.client_port >>> 0;
            if (object.server_ip != null)
                message.server_ip = object.server_ip >>> 0;
            if (object.server_port != null)
                message.server_port = object.server_port >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CWebRTC_WebRTCSessionConnected_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @static
         * @param {CWebRTC_WebRTCSessionConnected_Notification} message CWebRTC_WebRTCSessionConnected_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CWebRTC_WebRTCSessionConnected_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ssrc = 0;
                object.client_ip = 0;
                object.client_port = 0;
                object.server_ip = 0;
                object.server_port = 0;
            }
            if (message.ssrc != null && message.hasOwnProperty("ssrc"))
                object.ssrc = message.ssrc;
            if (message.client_ip != null && message.hasOwnProperty("client_ip"))
                object.client_ip = message.client_ip;
            if (message.client_port != null && message.hasOwnProperty("client_port"))
                object.client_port = message.client_port;
            if (message.server_ip != null && message.hasOwnProperty("server_ip"))
                object.server_ip = message.server_ip;
            if (message.server_port != null && message.hasOwnProperty("server_port"))
                object.server_port = message.server_port;
            return object;
        };
    
        /**
         * Converts this CWebRTC_WebRTCSessionConnected_Notification to JSON.
         * @function toJSON
         * @memberof CWebRTC_WebRTCSessionConnected_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CWebRTC_WebRTCSessionConnected_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CWebRTC_WebRTCSessionConnected_Notification;
    })();
    
    $root.CWebRTC_WebRTCUpdateRemoteDescription_Notification = (function() {
    
        /**
         * Properties of a CWebRTC_WebRTCUpdateRemoteDescription_Notification.
         * @exports ICWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @interface ICWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @property {string|null} [remote_description] CWebRTC_WebRTCUpdateRemoteDescription_Notification remote_description
         * @property {number|Long|null} [remote_description_version] CWebRTC_WebRTCUpdateRemoteDescription_Notification remote_description_version
         * @property {Array.<ICWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping>|null} [ssrcs_to_accountids] CWebRTC_WebRTCUpdateRemoteDescription_Notification ssrcs_to_accountids
         */
    
        /**
         * Constructs a new CWebRTC_WebRTCUpdateRemoteDescription_Notification.
         * @exports CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @classdesc Represents a CWebRTC_WebRTCUpdateRemoteDescription_Notification.
         * @implements ICWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @constructor
         * @param {ICWebRTC_WebRTCUpdateRemoteDescription_Notification=} [properties] Properties to set
         */
        function CWebRTC_WebRTCUpdateRemoteDescription_Notification(properties) {
            this.ssrcs_to_accountids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CWebRTC_WebRTCUpdateRemoteDescription_Notification remote_description.
         * @member {string} remote_description
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @instance
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification.prototype.remote_description = "";
    
        /**
         * CWebRTC_WebRTCUpdateRemoteDescription_Notification remote_description_version.
         * @member {number|Long} remote_description_version
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @instance
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification.prototype.remote_description_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CWebRTC_WebRTCUpdateRemoteDescription_Notification ssrcs_to_accountids.
         * @member {Array.<ICWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping>} ssrcs_to_accountids
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @instance
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification.prototype.ssrcs_to_accountids = $util.emptyArray;
    
        /**
         * Creates a new CWebRTC_WebRTCUpdateRemoteDescription_Notification instance using the specified properties.
         * @function create
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @static
         * @param {ICWebRTC_WebRTCUpdateRemoteDescription_Notification=} [properties] Properties to set
         * @returns {CWebRTC_WebRTCUpdateRemoteDescription_Notification} CWebRTC_WebRTCUpdateRemoteDescription_Notification instance
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification.create = function create(properties) {
            return new CWebRTC_WebRTCUpdateRemoteDescription_Notification(properties);
        };
    
        /**
         * Encodes the specified CWebRTC_WebRTCUpdateRemoteDescription_Notification message. Does not implicitly {@link CWebRTC_WebRTCUpdateRemoteDescription_Notification.verify|verify} messages.
         * @function encode
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @static
         * @param {ICWebRTC_WebRTCUpdateRemoteDescription_Notification} message CWebRTC_WebRTCUpdateRemoteDescription_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.remote_description != null && message.hasOwnProperty("remote_description"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.remote_description);
            if (message.remote_description_version != null && message.hasOwnProperty("remote_description_version"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.remote_description_version);
            if (message.ssrcs_to_accountids != null && message.ssrcs_to_accountids.length)
                for (var i = 0; i < message.ssrcs_to_accountids.length; ++i)
                    $root.CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.encode(message.ssrcs_to_accountids[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CWebRTC_WebRTCUpdateRemoteDescription_Notification message, length delimited. Does not implicitly {@link CWebRTC_WebRTCUpdateRemoteDescription_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @static
         * @param {ICWebRTC_WebRTCUpdateRemoteDescription_Notification} message CWebRTC_WebRTCUpdateRemoteDescription_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CWebRTC_WebRTCUpdateRemoteDescription_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CWebRTC_WebRTCUpdateRemoteDescription_Notification} CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CWebRTC_WebRTCUpdateRemoteDescription_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.remote_description = reader.string();
                    break;
                case 2:
                    message.remote_description_version = reader.uint64();
                    break;
                case 3:
                    if (!(message.ssrcs_to_accountids && message.ssrcs_to_accountids.length))
                        message.ssrcs_to_accountids = [];
                    message.ssrcs_to_accountids.push($root.CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CWebRTC_WebRTCUpdateRemoteDescription_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CWebRTC_WebRTCUpdateRemoteDescription_Notification} CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CWebRTC_WebRTCUpdateRemoteDescription_Notification message.
         * @function verify
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.remote_description != null && message.hasOwnProperty("remote_description"))
                if (!$util.isString(message.remote_description))
                    return "remote_description: string expected";
            if (message.remote_description_version != null && message.hasOwnProperty("remote_description_version"))
                if (!$util.isInteger(message.remote_description_version) && !(message.remote_description_version && $util.isInteger(message.remote_description_version.low) && $util.isInteger(message.remote_description_version.high)))
                    return "remote_description_version: integer|Long expected";
            if (message.ssrcs_to_accountids != null && message.hasOwnProperty("ssrcs_to_accountids")) {
                if (!Array.isArray(message.ssrcs_to_accountids))
                    return "ssrcs_to_accountids: array expected";
                for (var i = 0; i < message.ssrcs_to_accountids.length; ++i) {
                    var error = $root.CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.verify(message.ssrcs_to_accountids[i]);
                    if (error)
                        return "ssrcs_to_accountids." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CWebRTC_WebRTCUpdateRemoteDescription_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CWebRTC_WebRTCUpdateRemoteDescription_Notification} CWebRTC_WebRTCUpdateRemoteDescription_Notification
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CWebRTC_WebRTCUpdateRemoteDescription_Notification)
                return object;
            var message = new $root.CWebRTC_WebRTCUpdateRemoteDescription_Notification();
            if (object.remote_description != null)
                message.remote_description = String(object.remote_description);
            if (object.remote_description_version != null)
                if ($util.Long)
                    (message.remote_description_version = $util.Long.fromValue(object.remote_description_version)).unsigned = true;
                else if (typeof object.remote_description_version === "string")
                    message.remote_description_version = parseInt(object.remote_description_version, 10);
                else if (typeof object.remote_description_version === "number")
                    message.remote_description_version = object.remote_description_version;
                else if (typeof object.remote_description_version === "object")
                    message.remote_description_version = new $util.LongBits(object.remote_description_version.low >>> 0, object.remote_description_version.high >>> 0).toNumber(true);
            if (object.ssrcs_to_accountids) {
                if (!Array.isArray(object.ssrcs_to_accountids))
                    throw TypeError(".CWebRTC_WebRTCUpdateRemoteDescription_Notification.ssrcs_to_accountids: array expected");
                message.ssrcs_to_accountids = [];
                for (var i = 0; i < object.ssrcs_to_accountids.length; ++i) {
                    if (typeof object.ssrcs_to_accountids[i] !== "object")
                        throw TypeError(".CWebRTC_WebRTCUpdateRemoteDescription_Notification.ssrcs_to_accountids: object expected");
                    message.ssrcs_to_accountids[i] = $root.CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.fromObject(object.ssrcs_to_accountids[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CWebRTC_WebRTCUpdateRemoteDescription_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @static
         * @param {CWebRTC_WebRTCUpdateRemoteDescription_Notification} message CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ssrcs_to_accountids = [];
            if (options.defaults) {
                object.remote_description = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.remote_description_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.remote_description_version = options.longs === String ? "0" : 0;
            }
            if (message.remote_description != null && message.hasOwnProperty("remote_description"))
                object.remote_description = message.remote_description;
            if (message.remote_description_version != null && message.hasOwnProperty("remote_description_version"))
                if (typeof message.remote_description_version === "number")
                    object.remote_description_version = options.longs === String ? String(message.remote_description_version) : message.remote_description_version;
                else
                    object.remote_description_version = options.longs === String ? $util.Long.prototype.toString.call(message.remote_description_version) : options.longs === Number ? new $util.LongBits(message.remote_description_version.low >>> 0, message.remote_description_version.high >>> 0).toNumber(true) : message.remote_description_version;
            if (message.ssrcs_to_accountids && message.ssrcs_to_accountids.length) {
                object.ssrcs_to_accountids = [];
                for (var j = 0; j < message.ssrcs_to_accountids.length; ++j)
                    object.ssrcs_to_accountids[j] = $root.CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.toObject(message.ssrcs_to_accountids[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CWebRTC_WebRTCUpdateRemoteDescription_Notification to JSON.
         * @function toJSON
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CWebRTC_WebRTCUpdateRemoteDescription_Notification;
    })();
    
    $root.CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping = (function() {
    
        /**
         * Properties of a CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.
         * @exports ICWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @interface ICWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @property {number|null} [ssrc] CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping ssrc
         * @property {number|null} [accountid] CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping accountid
         */
    
        /**
         * Constructs a new CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.
         * @exports CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @classdesc Represents a CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.
         * @implements ICWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @constructor
         * @param {ICWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping=} [properties] Properties to set
         */
        function CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping ssrc.
         * @member {number} ssrc
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @instance
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.prototype.ssrc = 0;
    
        /**
         * CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping accountid.
         * @member {number} accountid
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @instance
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.prototype.accountid = 0;
    
        /**
         * Creates a new CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping instance using the specified properties.
         * @function create
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @static
         * @param {ICWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping=} [properties] Properties to set
         * @returns {CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping} CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping instance
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.create = function create(properties) {
            return new CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping(properties);
        };
    
        /**
         * Encodes the specified CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping message. Does not implicitly {@link CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.verify|verify} messages.
         * @function encode
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @static
         * @param {ICWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping} message CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ssrc != null && message.hasOwnProperty("ssrc"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ssrc);
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.accountid);
            return writer;
        };
    
        /**
         * Encodes the specified CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping message, length delimited. Does not implicitly {@link CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @static
         * @param {ICWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping} message CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping message from the specified reader or buffer.
         * @function decode
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping} CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ssrc = reader.uint32();
                    break;
                case 2:
                    message.accountid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping} CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping message.
         * @function verify
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ssrc != null && message.hasOwnProperty("ssrc"))
                if (!$util.isInteger(message.ssrc))
                    return "ssrc: integer expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            return null;
        };
    
        /**
         * Creates a CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping} CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.fromObject = function fromObject(object) {
            if (object instanceof $root.CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping)
                return object;
            var message = new $root.CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping();
            if (object.ssrc != null)
                message.ssrc = object.ssrc >>> 0;
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @static
         * @param {CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping} message CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ssrc = 0;
                object.accountid = 0;
            }
            if (message.ssrc != null && message.hasOwnProperty("ssrc"))
                object.ssrc = message.ssrc;
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            return object;
        };
    
        /**
         * Converts this CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping to JSON.
         * @function toJSON
         * @memberof CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping;
    })();
    
    $root.CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request = (function() {
    
        /**
         * Properties of a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.
         * @exports ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @interface ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @property {number|null} [ip_webrtc_server] CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request ip_webrtc_server
         * @property {number|null} [port_webrtc_server] CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request port_webrtc_server
         * @property {number|null} [ip_webrtc_session_client] CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request ip_webrtc_session_client
         * @property {number|null} [port_webrtc_session_client] CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request port_webrtc_session_client
         * @property {number|Long|null} [remote_description_version] CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request remote_description_version
         */
    
        /**
         * Constructs a new CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.
         * @exports CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @classdesc Represents a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.
         * @implements ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @constructor
         * @param {ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request=} [properties] Properties to set
         */
        function CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request ip_webrtc_server.
         * @member {number} ip_webrtc_server
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @instance
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.prototype.ip_webrtc_server = 0;
    
        /**
         * CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request port_webrtc_server.
         * @member {number} port_webrtc_server
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @instance
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.prototype.port_webrtc_server = 0;
    
        /**
         * CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request ip_webrtc_session_client.
         * @member {number} ip_webrtc_session_client
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @instance
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.prototype.ip_webrtc_session_client = 0;
    
        /**
         * CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request port_webrtc_session_client.
         * @member {number} port_webrtc_session_client
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @instance
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.prototype.port_webrtc_session_client = 0;
    
        /**
         * CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request remote_description_version.
         * @member {number|Long} remote_description_version
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @instance
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.prototype.remote_description_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request instance using the specified properties.
         * @function create
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @static
         * @param {ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request=} [properties] Properties to set
         * @returns {CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request} CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request instance
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.create = function create(properties) {
            return new CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request(properties);
        };
    
        /**
         * Encodes the specified CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request message. Does not implicitly {@link CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.verify|verify} messages.
         * @function encode
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @static
         * @param {ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request} message CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ip_webrtc_server != null && message.hasOwnProperty("ip_webrtc_server"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ip_webrtc_server);
            if (message.port_webrtc_server != null && message.hasOwnProperty("port_webrtc_server"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.port_webrtc_server);
            if (message.ip_webrtc_session_client != null && message.hasOwnProperty("ip_webrtc_session_client"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ip_webrtc_session_client);
            if (message.port_webrtc_session_client != null && message.hasOwnProperty("port_webrtc_session_client"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.port_webrtc_session_client);
            if (message.remote_description_version != null && message.hasOwnProperty("remote_description_version"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.remote_description_version);
            return writer;
        };
    
        /**
         * Encodes the specified CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request message, length delimited. Does not implicitly {@link CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @static
         * @param {ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request} message CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request} CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ip_webrtc_server = reader.uint32();
                    break;
                case 2:
                    message.port_webrtc_server = reader.uint32();
                    break;
                case 3:
                    message.ip_webrtc_session_client = reader.uint32();
                    break;
                case 4:
                    message.port_webrtc_session_client = reader.uint32();
                    break;
                case 5:
                    message.remote_description_version = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request} CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request message.
         * @function verify
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ip_webrtc_server != null && message.hasOwnProperty("ip_webrtc_server"))
                if (!$util.isInteger(message.ip_webrtc_server))
                    return "ip_webrtc_server: integer expected";
            if (message.port_webrtc_server != null && message.hasOwnProperty("port_webrtc_server"))
                if (!$util.isInteger(message.port_webrtc_server))
                    return "port_webrtc_server: integer expected";
            if (message.ip_webrtc_session_client != null && message.hasOwnProperty("ip_webrtc_session_client"))
                if (!$util.isInteger(message.ip_webrtc_session_client))
                    return "ip_webrtc_session_client: integer expected";
            if (message.port_webrtc_session_client != null && message.hasOwnProperty("port_webrtc_session_client"))
                if (!$util.isInteger(message.port_webrtc_session_client))
                    return "port_webrtc_session_client: integer expected";
            if (message.remote_description_version != null && message.hasOwnProperty("remote_description_version"))
                if (!$util.isInteger(message.remote_description_version) && !(message.remote_description_version && $util.isInteger(message.remote_description_version.low) && $util.isInteger(message.remote_description_version.high)))
                    return "remote_description_version: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request} CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request)
                return object;
            var message = new $root.CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request();
            if (object.ip_webrtc_server != null)
                message.ip_webrtc_server = object.ip_webrtc_server >>> 0;
            if (object.port_webrtc_server != null)
                message.port_webrtc_server = object.port_webrtc_server >>> 0;
            if (object.ip_webrtc_session_client != null)
                message.ip_webrtc_session_client = object.ip_webrtc_session_client >>> 0;
            if (object.port_webrtc_session_client != null)
                message.port_webrtc_session_client = object.port_webrtc_session_client >>> 0;
            if (object.remote_description_version != null)
                if ($util.Long)
                    (message.remote_description_version = $util.Long.fromValue(object.remote_description_version)).unsigned = true;
                else if (typeof object.remote_description_version === "string")
                    message.remote_description_version = parseInt(object.remote_description_version, 10);
                else if (typeof object.remote_description_version === "number")
                    message.remote_description_version = object.remote_description_version;
                else if (typeof object.remote_description_version === "object")
                    message.remote_description_version = new $util.LongBits(object.remote_description_version.low >>> 0, object.remote_description_version.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @static
         * @param {CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request} message CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ip_webrtc_server = 0;
                object.port_webrtc_server = 0;
                object.ip_webrtc_session_client = 0;
                object.port_webrtc_session_client = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.remote_description_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.remote_description_version = options.longs === String ? "0" : 0;
            }
            if (message.ip_webrtc_server != null && message.hasOwnProperty("ip_webrtc_server"))
                object.ip_webrtc_server = message.ip_webrtc_server;
            if (message.port_webrtc_server != null && message.hasOwnProperty("port_webrtc_server"))
                object.port_webrtc_server = message.port_webrtc_server;
            if (message.ip_webrtc_session_client != null && message.hasOwnProperty("ip_webrtc_session_client"))
                object.ip_webrtc_session_client = message.ip_webrtc_session_client;
            if (message.port_webrtc_session_client != null && message.hasOwnProperty("port_webrtc_session_client"))
                object.port_webrtc_session_client = message.port_webrtc_session_client;
            if (message.remote_description_version != null && message.hasOwnProperty("remote_description_version"))
                if (typeof message.remote_description_version === "number")
                    object.remote_description_version = options.longs === String ? String(message.remote_description_version) : message.remote_description_version;
                else
                    object.remote_description_version = options.longs === String ? $util.Long.prototype.toString.call(message.remote_description_version) : options.longs === Number ? new $util.LongBits(message.remote_description_version.low >>> 0, message.remote_description_version.high >>> 0).toNumber(true) : message.remote_description_version;
            return object;
        };
    
        /**
         * Converts this CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request to JSON.
         * @function toJSON
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request;
    })();
    
    $root.CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response = (function() {
    
        /**
         * Properties of a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.
         * @exports ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @interface ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         */
    
        /**
         * Constructs a new CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.
         * @exports CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @classdesc Represents a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.
         * @implements ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @constructor
         * @param {ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response=} [properties] Properties to set
         */
        function CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response instance using the specified properties.
         * @function create
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @static
         * @param {ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response=} [properties] Properties to set
         * @returns {CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response} CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response instance
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.create = function create(properties) {
            return new CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response(properties);
        };
    
        /**
         * Encodes the specified CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response message. Does not implicitly {@link CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.verify|verify} messages.
         * @function encode
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @static
         * @param {ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response} message CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response message, length delimited. Does not implicitly {@link CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @static
         * @param {ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response} message CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response} CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response} CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response message.
         * @function verify
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response} CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response)
                return object;
            return new $root.CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response();
        };
    
        /**
         * Creates a plain object from a CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @static
         * @param {CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response} message CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response to JSON.
         * @function toJSON
         * @memberof CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response;
    })();
    
    $root.CVoiceChat_RequestOneOnOneChat_Request = (function() {
    
        /**
         * Properties of a CVoiceChat_RequestOneOnOneChat_Request.
         * @exports ICVoiceChat_RequestOneOnOneChat_Request
         * @interface ICVoiceChat_RequestOneOnOneChat_Request
         * @property {number|Long|null} [steamid_partner] CVoiceChat_RequestOneOnOneChat_Request steamid_partner
         */
    
        /**
         * Constructs a new CVoiceChat_RequestOneOnOneChat_Request.
         * @exports CVoiceChat_RequestOneOnOneChat_Request
         * @classdesc Represents a CVoiceChat_RequestOneOnOneChat_Request.
         * @implements ICVoiceChat_RequestOneOnOneChat_Request
         * @constructor
         * @param {ICVoiceChat_RequestOneOnOneChat_Request=} [properties] Properties to set
         */
        function CVoiceChat_RequestOneOnOneChat_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_RequestOneOnOneChat_Request steamid_partner.
         * @member {number|Long} steamid_partner
         * @memberof CVoiceChat_RequestOneOnOneChat_Request
         * @instance
         */
        CVoiceChat_RequestOneOnOneChat_Request.prototype.steamid_partner = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CVoiceChat_RequestOneOnOneChat_Request instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_RequestOneOnOneChat_Request
         * @static
         * @param {ICVoiceChat_RequestOneOnOneChat_Request=} [properties] Properties to set
         * @returns {CVoiceChat_RequestOneOnOneChat_Request} CVoiceChat_RequestOneOnOneChat_Request instance
         */
        CVoiceChat_RequestOneOnOneChat_Request.create = function create(properties) {
            return new CVoiceChat_RequestOneOnOneChat_Request(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_RequestOneOnOneChat_Request message. Does not implicitly {@link CVoiceChat_RequestOneOnOneChat_Request.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_RequestOneOnOneChat_Request
         * @static
         * @param {ICVoiceChat_RequestOneOnOneChat_Request} message CVoiceChat_RequestOneOnOneChat_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_RequestOneOnOneChat_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid_partner);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_RequestOneOnOneChat_Request message, length delimited. Does not implicitly {@link CVoiceChat_RequestOneOnOneChat_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_RequestOneOnOneChat_Request
         * @static
         * @param {ICVoiceChat_RequestOneOnOneChat_Request} message CVoiceChat_RequestOneOnOneChat_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_RequestOneOnOneChat_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_RequestOneOnOneChat_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_RequestOneOnOneChat_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_RequestOneOnOneChat_Request} CVoiceChat_RequestOneOnOneChat_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_RequestOneOnOneChat_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_RequestOneOnOneChat_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid_partner = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_RequestOneOnOneChat_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_RequestOneOnOneChat_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_RequestOneOnOneChat_Request} CVoiceChat_RequestOneOnOneChat_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_RequestOneOnOneChat_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_RequestOneOnOneChat_Request message.
         * @function verify
         * @memberof CVoiceChat_RequestOneOnOneChat_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_RequestOneOnOneChat_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                if (!$util.isInteger(message.steamid_partner) && !(message.steamid_partner && $util.isInteger(message.steamid_partner.low) && $util.isInteger(message.steamid_partner.high)))
                    return "steamid_partner: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_RequestOneOnOneChat_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_RequestOneOnOneChat_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_RequestOneOnOneChat_Request} CVoiceChat_RequestOneOnOneChat_Request
         */
        CVoiceChat_RequestOneOnOneChat_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_RequestOneOnOneChat_Request)
                return object;
            var message = new $root.CVoiceChat_RequestOneOnOneChat_Request();
            if (object.steamid_partner != null)
                if ($util.Long)
                    (message.steamid_partner = $util.Long.fromValue(object.steamid_partner)).unsigned = false;
                else if (typeof object.steamid_partner === "string")
                    message.steamid_partner = parseInt(object.steamid_partner, 10);
                else if (typeof object.steamid_partner === "number")
                    message.steamid_partner = object.steamid_partner;
                else if (typeof object.steamid_partner === "object")
                    message.steamid_partner = new $util.LongBits(object.steamid_partner.low >>> 0, object.steamid_partner.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_RequestOneOnOneChat_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_RequestOneOnOneChat_Request
         * @static
         * @param {CVoiceChat_RequestOneOnOneChat_Request} message CVoiceChat_RequestOneOnOneChat_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_RequestOneOnOneChat_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid_partner = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid_partner = options.longs === String ? "0" : 0;
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                if (typeof message.steamid_partner === "number")
                    object.steamid_partner = options.longs === String ? String(message.steamid_partner) : message.steamid_partner;
                else
                    object.steamid_partner = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_partner) : options.longs === Number ? new $util.LongBits(message.steamid_partner.low >>> 0, message.steamid_partner.high >>> 0).toNumber() : message.steamid_partner;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_RequestOneOnOneChat_Request to JSON.
         * @function toJSON
         * @memberof CVoiceChat_RequestOneOnOneChat_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_RequestOneOnOneChat_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_RequestOneOnOneChat_Request;
    })();
    
    $root.CVoiceChat_RequestOneOnOneChat_Response = (function() {
    
        /**
         * Properties of a CVoiceChat_RequestOneOnOneChat_Response.
         * @exports ICVoiceChat_RequestOneOnOneChat_Response
         * @interface ICVoiceChat_RequestOneOnOneChat_Response
         * @property {number|Long|null} [voice_chatid] CVoiceChat_RequestOneOnOneChat_Response voice_chatid
         */
    
        /**
         * Constructs a new CVoiceChat_RequestOneOnOneChat_Response.
         * @exports CVoiceChat_RequestOneOnOneChat_Response
         * @classdesc Represents a CVoiceChat_RequestOneOnOneChat_Response.
         * @implements ICVoiceChat_RequestOneOnOneChat_Response
         * @constructor
         * @param {ICVoiceChat_RequestOneOnOneChat_Response=} [properties] Properties to set
         */
        function CVoiceChat_RequestOneOnOneChat_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_RequestOneOnOneChat_Response voice_chatid.
         * @member {number|Long} voice_chatid
         * @memberof CVoiceChat_RequestOneOnOneChat_Response
         * @instance
         */
        CVoiceChat_RequestOneOnOneChat_Response.prototype.voice_chatid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CVoiceChat_RequestOneOnOneChat_Response instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_RequestOneOnOneChat_Response
         * @static
         * @param {ICVoiceChat_RequestOneOnOneChat_Response=} [properties] Properties to set
         * @returns {CVoiceChat_RequestOneOnOneChat_Response} CVoiceChat_RequestOneOnOneChat_Response instance
         */
        CVoiceChat_RequestOneOnOneChat_Response.create = function create(properties) {
            return new CVoiceChat_RequestOneOnOneChat_Response(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_RequestOneOnOneChat_Response message. Does not implicitly {@link CVoiceChat_RequestOneOnOneChat_Response.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_RequestOneOnOneChat_Response
         * @static
         * @param {ICVoiceChat_RequestOneOnOneChat_Response} message CVoiceChat_RequestOneOnOneChat_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_RequestOneOnOneChat_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.voice_chatid);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_RequestOneOnOneChat_Response message, length delimited. Does not implicitly {@link CVoiceChat_RequestOneOnOneChat_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_RequestOneOnOneChat_Response
         * @static
         * @param {ICVoiceChat_RequestOneOnOneChat_Response} message CVoiceChat_RequestOneOnOneChat_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_RequestOneOnOneChat_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_RequestOneOnOneChat_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_RequestOneOnOneChat_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_RequestOneOnOneChat_Response} CVoiceChat_RequestOneOnOneChat_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_RequestOneOnOneChat_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_RequestOneOnOneChat_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.voice_chatid = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_RequestOneOnOneChat_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_RequestOneOnOneChat_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_RequestOneOnOneChat_Response} CVoiceChat_RequestOneOnOneChat_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_RequestOneOnOneChat_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_RequestOneOnOneChat_Response message.
         * @function verify
         * @memberof CVoiceChat_RequestOneOnOneChat_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_RequestOneOnOneChat_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (!$util.isInteger(message.voice_chatid) && !(message.voice_chatid && $util.isInteger(message.voice_chatid.low) && $util.isInteger(message.voice_chatid.high)))
                    return "voice_chatid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_RequestOneOnOneChat_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_RequestOneOnOneChat_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_RequestOneOnOneChat_Response} CVoiceChat_RequestOneOnOneChat_Response
         */
        CVoiceChat_RequestOneOnOneChat_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_RequestOneOnOneChat_Response)
                return object;
            var message = new $root.CVoiceChat_RequestOneOnOneChat_Response();
            if (object.voice_chatid != null)
                if ($util.Long)
                    (message.voice_chatid = $util.Long.fromValue(object.voice_chatid)).unsigned = false;
                else if (typeof object.voice_chatid === "string")
                    message.voice_chatid = parseInt(object.voice_chatid, 10);
                else if (typeof object.voice_chatid === "number")
                    message.voice_chatid = object.voice_chatid;
                else if (typeof object.voice_chatid === "object")
                    message.voice_chatid = new $util.LongBits(object.voice_chatid.low >>> 0, object.voice_chatid.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_RequestOneOnOneChat_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_RequestOneOnOneChat_Response
         * @static
         * @param {CVoiceChat_RequestOneOnOneChat_Response} message CVoiceChat_RequestOneOnOneChat_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_RequestOneOnOneChat_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.voice_chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.voice_chatid = options.longs === String ? "0" : 0;
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (typeof message.voice_chatid === "number")
                    object.voice_chatid = options.longs === String ? String(message.voice_chatid) : message.voice_chatid;
                else
                    object.voice_chatid = options.longs === String ? $util.Long.prototype.toString.call(message.voice_chatid) : options.longs === Number ? new $util.LongBits(message.voice_chatid.low >>> 0, message.voice_chatid.high >>> 0).toNumber() : message.voice_chatid;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_RequestOneOnOneChat_Response to JSON.
         * @function toJSON
         * @memberof CVoiceChat_RequestOneOnOneChat_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_RequestOneOnOneChat_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_RequestOneOnOneChat_Response;
    })();
    
    $root.CVoiceChat_OneOnOneChatRequested_Notification = (function() {
    
        /**
         * Properties of a CVoiceChat_OneOnOneChatRequested_Notification.
         * @exports ICVoiceChat_OneOnOneChatRequested_Notification
         * @interface ICVoiceChat_OneOnOneChatRequested_Notification
         * @property {number|Long|null} [voice_chatid] CVoiceChat_OneOnOneChatRequested_Notification voice_chatid
         * @property {number|Long|null} [steamid_partner] CVoiceChat_OneOnOneChatRequested_Notification steamid_partner
         */
    
        /**
         * Constructs a new CVoiceChat_OneOnOneChatRequested_Notification.
         * @exports CVoiceChat_OneOnOneChatRequested_Notification
         * @classdesc Represents a CVoiceChat_OneOnOneChatRequested_Notification.
         * @implements ICVoiceChat_OneOnOneChatRequested_Notification
         * @constructor
         * @param {ICVoiceChat_OneOnOneChatRequested_Notification=} [properties] Properties to set
         */
        function CVoiceChat_OneOnOneChatRequested_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_OneOnOneChatRequested_Notification voice_chatid.
         * @member {number|Long} voice_chatid
         * @memberof CVoiceChat_OneOnOneChatRequested_Notification
         * @instance
         */
        CVoiceChat_OneOnOneChatRequested_Notification.prototype.voice_chatid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_OneOnOneChatRequested_Notification steamid_partner.
         * @member {number|Long} steamid_partner
         * @memberof CVoiceChat_OneOnOneChatRequested_Notification
         * @instance
         */
        CVoiceChat_OneOnOneChatRequested_Notification.prototype.steamid_partner = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CVoiceChat_OneOnOneChatRequested_Notification instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_OneOnOneChatRequested_Notification
         * @static
         * @param {ICVoiceChat_OneOnOneChatRequested_Notification=} [properties] Properties to set
         * @returns {CVoiceChat_OneOnOneChatRequested_Notification} CVoiceChat_OneOnOneChatRequested_Notification instance
         */
        CVoiceChat_OneOnOneChatRequested_Notification.create = function create(properties) {
            return new CVoiceChat_OneOnOneChatRequested_Notification(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_OneOnOneChatRequested_Notification message. Does not implicitly {@link CVoiceChat_OneOnOneChatRequested_Notification.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_OneOnOneChatRequested_Notification
         * @static
         * @param {ICVoiceChat_OneOnOneChatRequested_Notification} message CVoiceChat_OneOnOneChatRequested_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_OneOnOneChatRequested_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.voice_chatid);
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.steamid_partner);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_OneOnOneChatRequested_Notification message, length delimited. Does not implicitly {@link CVoiceChat_OneOnOneChatRequested_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_OneOnOneChatRequested_Notification
         * @static
         * @param {ICVoiceChat_OneOnOneChatRequested_Notification} message CVoiceChat_OneOnOneChatRequested_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_OneOnOneChatRequested_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_OneOnOneChatRequested_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_OneOnOneChatRequested_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_OneOnOneChatRequested_Notification} CVoiceChat_OneOnOneChatRequested_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_OneOnOneChatRequested_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_OneOnOneChatRequested_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.voice_chatid = reader.fixed64();
                    break;
                case 2:
                    message.steamid_partner = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_OneOnOneChatRequested_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_OneOnOneChatRequested_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_OneOnOneChatRequested_Notification} CVoiceChat_OneOnOneChatRequested_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_OneOnOneChatRequested_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_OneOnOneChatRequested_Notification message.
         * @function verify
         * @memberof CVoiceChat_OneOnOneChatRequested_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_OneOnOneChatRequested_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (!$util.isInteger(message.voice_chatid) && !(message.voice_chatid && $util.isInteger(message.voice_chatid.low) && $util.isInteger(message.voice_chatid.high)))
                    return "voice_chatid: integer|Long expected";
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                if (!$util.isInteger(message.steamid_partner) && !(message.steamid_partner && $util.isInteger(message.steamid_partner.low) && $util.isInteger(message.steamid_partner.high)))
                    return "steamid_partner: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_OneOnOneChatRequested_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_OneOnOneChatRequested_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_OneOnOneChatRequested_Notification} CVoiceChat_OneOnOneChatRequested_Notification
         */
        CVoiceChat_OneOnOneChatRequested_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_OneOnOneChatRequested_Notification)
                return object;
            var message = new $root.CVoiceChat_OneOnOneChatRequested_Notification();
            if (object.voice_chatid != null)
                if ($util.Long)
                    (message.voice_chatid = $util.Long.fromValue(object.voice_chatid)).unsigned = false;
                else if (typeof object.voice_chatid === "string")
                    message.voice_chatid = parseInt(object.voice_chatid, 10);
                else if (typeof object.voice_chatid === "number")
                    message.voice_chatid = object.voice_chatid;
                else if (typeof object.voice_chatid === "object")
                    message.voice_chatid = new $util.LongBits(object.voice_chatid.low >>> 0, object.voice_chatid.high >>> 0).toNumber();
            if (object.steamid_partner != null)
                if ($util.Long)
                    (message.steamid_partner = $util.Long.fromValue(object.steamid_partner)).unsigned = false;
                else if (typeof object.steamid_partner === "string")
                    message.steamid_partner = parseInt(object.steamid_partner, 10);
                else if (typeof object.steamid_partner === "number")
                    message.steamid_partner = object.steamid_partner;
                else if (typeof object.steamid_partner === "object")
                    message.steamid_partner = new $util.LongBits(object.steamid_partner.low >>> 0, object.steamid_partner.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_OneOnOneChatRequested_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_OneOnOneChatRequested_Notification
         * @static
         * @param {CVoiceChat_OneOnOneChatRequested_Notification} message CVoiceChat_OneOnOneChatRequested_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_OneOnOneChatRequested_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.voice_chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.voice_chatid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid_partner = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid_partner = options.longs === String ? "0" : 0;
            }
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (typeof message.voice_chatid === "number")
                    object.voice_chatid = options.longs === String ? String(message.voice_chatid) : message.voice_chatid;
                else
                    object.voice_chatid = options.longs === String ? $util.Long.prototype.toString.call(message.voice_chatid) : options.longs === Number ? new $util.LongBits(message.voice_chatid.low >>> 0, message.voice_chatid.high >>> 0).toNumber() : message.voice_chatid;
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                if (typeof message.steamid_partner === "number")
                    object.steamid_partner = options.longs === String ? String(message.steamid_partner) : message.steamid_partner;
                else
                    object.steamid_partner = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_partner) : options.longs === Number ? new $util.LongBits(message.steamid_partner.low >>> 0, message.steamid_partner.high >>> 0).toNumber() : message.steamid_partner;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_OneOnOneChatRequested_Notification to JSON.
         * @function toJSON
         * @memberof CVoiceChat_OneOnOneChatRequested_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_OneOnOneChatRequested_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_OneOnOneChatRequested_Notification;
    })();
    
    $root.CVoiceChat_AnswerOneOnOneChat_Request = (function() {
    
        /**
         * Properties of a CVoiceChat_AnswerOneOnOneChat_Request.
         * @exports ICVoiceChat_AnswerOneOnOneChat_Request
         * @interface ICVoiceChat_AnswerOneOnOneChat_Request
         * @property {number|Long|null} [voice_chatid] CVoiceChat_AnswerOneOnOneChat_Request voice_chatid
         * @property {number|Long|null} [steamid_partner] CVoiceChat_AnswerOneOnOneChat_Request steamid_partner
         * @property {boolean|null} [accepted_request] CVoiceChat_AnswerOneOnOneChat_Request accepted_request
         */
    
        /**
         * Constructs a new CVoiceChat_AnswerOneOnOneChat_Request.
         * @exports CVoiceChat_AnswerOneOnOneChat_Request
         * @classdesc Represents a CVoiceChat_AnswerOneOnOneChat_Request.
         * @implements ICVoiceChat_AnswerOneOnOneChat_Request
         * @constructor
         * @param {ICVoiceChat_AnswerOneOnOneChat_Request=} [properties] Properties to set
         */
        function CVoiceChat_AnswerOneOnOneChat_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_AnswerOneOnOneChat_Request voice_chatid.
         * @member {number|Long} voice_chatid
         * @memberof CVoiceChat_AnswerOneOnOneChat_Request
         * @instance
         */
        CVoiceChat_AnswerOneOnOneChat_Request.prototype.voice_chatid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_AnswerOneOnOneChat_Request steamid_partner.
         * @member {number|Long} steamid_partner
         * @memberof CVoiceChat_AnswerOneOnOneChat_Request
         * @instance
         */
        CVoiceChat_AnswerOneOnOneChat_Request.prototype.steamid_partner = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_AnswerOneOnOneChat_Request accepted_request.
         * @member {boolean} accepted_request
         * @memberof CVoiceChat_AnswerOneOnOneChat_Request
         * @instance
         */
        CVoiceChat_AnswerOneOnOneChat_Request.prototype.accepted_request = false;
    
        /**
         * Creates a new CVoiceChat_AnswerOneOnOneChat_Request instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_AnswerOneOnOneChat_Request
         * @static
         * @param {ICVoiceChat_AnswerOneOnOneChat_Request=} [properties] Properties to set
         * @returns {CVoiceChat_AnswerOneOnOneChat_Request} CVoiceChat_AnswerOneOnOneChat_Request instance
         */
        CVoiceChat_AnswerOneOnOneChat_Request.create = function create(properties) {
            return new CVoiceChat_AnswerOneOnOneChat_Request(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_AnswerOneOnOneChat_Request message. Does not implicitly {@link CVoiceChat_AnswerOneOnOneChat_Request.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_AnswerOneOnOneChat_Request
         * @static
         * @param {ICVoiceChat_AnswerOneOnOneChat_Request} message CVoiceChat_AnswerOneOnOneChat_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_AnswerOneOnOneChat_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.voice_chatid);
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.steamid_partner);
            if (message.accepted_request != null && message.hasOwnProperty("accepted_request"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.accepted_request);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_AnswerOneOnOneChat_Request message, length delimited. Does not implicitly {@link CVoiceChat_AnswerOneOnOneChat_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_AnswerOneOnOneChat_Request
         * @static
         * @param {ICVoiceChat_AnswerOneOnOneChat_Request} message CVoiceChat_AnswerOneOnOneChat_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_AnswerOneOnOneChat_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_AnswerOneOnOneChat_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_AnswerOneOnOneChat_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_AnswerOneOnOneChat_Request} CVoiceChat_AnswerOneOnOneChat_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_AnswerOneOnOneChat_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_AnswerOneOnOneChat_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.voice_chatid = reader.fixed64();
                    break;
                case 2:
                    message.steamid_partner = reader.fixed64();
                    break;
                case 3:
                    message.accepted_request = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_AnswerOneOnOneChat_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_AnswerOneOnOneChat_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_AnswerOneOnOneChat_Request} CVoiceChat_AnswerOneOnOneChat_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_AnswerOneOnOneChat_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_AnswerOneOnOneChat_Request message.
         * @function verify
         * @memberof CVoiceChat_AnswerOneOnOneChat_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_AnswerOneOnOneChat_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (!$util.isInteger(message.voice_chatid) && !(message.voice_chatid && $util.isInteger(message.voice_chatid.low) && $util.isInteger(message.voice_chatid.high)))
                    return "voice_chatid: integer|Long expected";
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                if (!$util.isInteger(message.steamid_partner) && !(message.steamid_partner && $util.isInteger(message.steamid_partner.low) && $util.isInteger(message.steamid_partner.high)))
                    return "steamid_partner: integer|Long expected";
            if (message.accepted_request != null && message.hasOwnProperty("accepted_request"))
                if (typeof message.accepted_request !== "boolean")
                    return "accepted_request: boolean expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_AnswerOneOnOneChat_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_AnswerOneOnOneChat_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_AnswerOneOnOneChat_Request} CVoiceChat_AnswerOneOnOneChat_Request
         */
        CVoiceChat_AnswerOneOnOneChat_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_AnswerOneOnOneChat_Request)
                return object;
            var message = new $root.CVoiceChat_AnswerOneOnOneChat_Request();
            if (object.voice_chatid != null)
                if ($util.Long)
                    (message.voice_chatid = $util.Long.fromValue(object.voice_chatid)).unsigned = false;
                else if (typeof object.voice_chatid === "string")
                    message.voice_chatid = parseInt(object.voice_chatid, 10);
                else if (typeof object.voice_chatid === "number")
                    message.voice_chatid = object.voice_chatid;
                else if (typeof object.voice_chatid === "object")
                    message.voice_chatid = new $util.LongBits(object.voice_chatid.low >>> 0, object.voice_chatid.high >>> 0).toNumber();
            if (object.steamid_partner != null)
                if ($util.Long)
                    (message.steamid_partner = $util.Long.fromValue(object.steamid_partner)).unsigned = false;
                else if (typeof object.steamid_partner === "string")
                    message.steamid_partner = parseInt(object.steamid_partner, 10);
                else if (typeof object.steamid_partner === "number")
                    message.steamid_partner = object.steamid_partner;
                else if (typeof object.steamid_partner === "object")
                    message.steamid_partner = new $util.LongBits(object.steamid_partner.low >>> 0, object.steamid_partner.high >>> 0).toNumber();
            if (object.accepted_request != null)
                message.accepted_request = Boolean(object.accepted_request);
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_AnswerOneOnOneChat_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_AnswerOneOnOneChat_Request
         * @static
         * @param {CVoiceChat_AnswerOneOnOneChat_Request} message CVoiceChat_AnswerOneOnOneChat_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_AnswerOneOnOneChat_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.voice_chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.voice_chatid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid_partner = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid_partner = options.longs === String ? "0" : 0;
                object.accepted_request = false;
            }
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (typeof message.voice_chatid === "number")
                    object.voice_chatid = options.longs === String ? String(message.voice_chatid) : message.voice_chatid;
                else
                    object.voice_chatid = options.longs === String ? $util.Long.prototype.toString.call(message.voice_chatid) : options.longs === Number ? new $util.LongBits(message.voice_chatid.low >>> 0, message.voice_chatid.high >>> 0).toNumber() : message.voice_chatid;
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                if (typeof message.steamid_partner === "number")
                    object.steamid_partner = options.longs === String ? String(message.steamid_partner) : message.steamid_partner;
                else
                    object.steamid_partner = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_partner) : options.longs === Number ? new $util.LongBits(message.steamid_partner.low >>> 0, message.steamid_partner.high >>> 0).toNumber() : message.steamid_partner;
            if (message.accepted_request != null && message.hasOwnProperty("accepted_request"))
                object.accepted_request = message.accepted_request;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_AnswerOneOnOneChat_Request to JSON.
         * @function toJSON
         * @memberof CVoiceChat_AnswerOneOnOneChat_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_AnswerOneOnOneChat_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_AnswerOneOnOneChat_Request;
    })();
    
    $root.CVoiceChat_AnswerOneOnOneChat_Response = (function() {
    
        /**
         * Properties of a CVoiceChat_AnswerOneOnOneChat_Response.
         * @exports ICVoiceChat_AnswerOneOnOneChat_Response
         * @interface ICVoiceChat_AnswerOneOnOneChat_Response
         */
    
        /**
         * Constructs a new CVoiceChat_AnswerOneOnOneChat_Response.
         * @exports CVoiceChat_AnswerOneOnOneChat_Response
         * @classdesc Represents a CVoiceChat_AnswerOneOnOneChat_Response.
         * @implements ICVoiceChat_AnswerOneOnOneChat_Response
         * @constructor
         * @param {ICVoiceChat_AnswerOneOnOneChat_Response=} [properties] Properties to set
         */
        function CVoiceChat_AnswerOneOnOneChat_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CVoiceChat_AnswerOneOnOneChat_Response instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_AnswerOneOnOneChat_Response
         * @static
         * @param {ICVoiceChat_AnswerOneOnOneChat_Response=} [properties] Properties to set
         * @returns {CVoiceChat_AnswerOneOnOneChat_Response} CVoiceChat_AnswerOneOnOneChat_Response instance
         */
        CVoiceChat_AnswerOneOnOneChat_Response.create = function create(properties) {
            return new CVoiceChat_AnswerOneOnOneChat_Response(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_AnswerOneOnOneChat_Response message. Does not implicitly {@link CVoiceChat_AnswerOneOnOneChat_Response.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_AnswerOneOnOneChat_Response
         * @static
         * @param {ICVoiceChat_AnswerOneOnOneChat_Response} message CVoiceChat_AnswerOneOnOneChat_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_AnswerOneOnOneChat_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_AnswerOneOnOneChat_Response message, length delimited. Does not implicitly {@link CVoiceChat_AnswerOneOnOneChat_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_AnswerOneOnOneChat_Response
         * @static
         * @param {ICVoiceChat_AnswerOneOnOneChat_Response} message CVoiceChat_AnswerOneOnOneChat_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_AnswerOneOnOneChat_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_AnswerOneOnOneChat_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_AnswerOneOnOneChat_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_AnswerOneOnOneChat_Response} CVoiceChat_AnswerOneOnOneChat_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_AnswerOneOnOneChat_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_AnswerOneOnOneChat_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_AnswerOneOnOneChat_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_AnswerOneOnOneChat_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_AnswerOneOnOneChat_Response} CVoiceChat_AnswerOneOnOneChat_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_AnswerOneOnOneChat_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_AnswerOneOnOneChat_Response message.
         * @function verify
         * @memberof CVoiceChat_AnswerOneOnOneChat_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_AnswerOneOnOneChat_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_AnswerOneOnOneChat_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_AnswerOneOnOneChat_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_AnswerOneOnOneChat_Response} CVoiceChat_AnswerOneOnOneChat_Response
         */
        CVoiceChat_AnswerOneOnOneChat_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_AnswerOneOnOneChat_Response)
                return object;
            return new $root.CVoiceChat_AnswerOneOnOneChat_Response();
        };
    
        /**
         * Creates a plain object from a CVoiceChat_AnswerOneOnOneChat_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_AnswerOneOnOneChat_Response
         * @static
         * @param {CVoiceChat_AnswerOneOnOneChat_Response} message CVoiceChat_AnswerOneOnOneChat_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_AnswerOneOnOneChat_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CVoiceChat_AnswerOneOnOneChat_Response to JSON.
         * @function toJSON
         * @memberof CVoiceChat_AnswerOneOnOneChat_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_AnswerOneOnOneChat_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_AnswerOneOnOneChat_Response;
    })();
    
    $root.CVoiceChat_OneOnOneChatRequestResponse_Notification = (function() {
    
        /**
         * Properties of a CVoiceChat_OneOnOneChatRequestResponse_Notification.
         * @exports ICVoiceChat_OneOnOneChatRequestResponse_Notification
         * @interface ICVoiceChat_OneOnOneChatRequestResponse_Notification
         * @property {number|Long|null} [voicechat_id] CVoiceChat_OneOnOneChatRequestResponse_Notification voicechat_id
         * @property {number|Long|null} [steamid_partner] CVoiceChat_OneOnOneChatRequestResponse_Notification steamid_partner
         * @property {boolean|null} [accepted_request] CVoiceChat_OneOnOneChatRequestResponse_Notification accepted_request
         */
    
        /**
         * Constructs a new CVoiceChat_OneOnOneChatRequestResponse_Notification.
         * @exports CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @classdesc Represents a CVoiceChat_OneOnOneChatRequestResponse_Notification.
         * @implements ICVoiceChat_OneOnOneChatRequestResponse_Notification
         * @constructor
         * @param {ICVoiceChat_OneOnOneChatRequestResponse_Notification=} [properties] Properties to set
         */
        function CVoiceChat_OneOnOneChatRequestResponse_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_OneOnOneChatRequestResponse_Notification voicechat_id.
         * @member {number|Long} voicechat_id
         * @memberof CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @instance
         */
        CVoiceChat_OneOnOneChatRequestResponse_Notification.prototype.voicechat_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_OneOnOneChatRequestResponse_Notification steamid_partner.
         * @member {number|Long} steamid_partner
         * @memberof CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @instance
         */
        CVoiceChat_OneOnOneChatRequestResponse_Notification.prototype.steamid_partner = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_OneOnOneChatRequestResponse_Notification accepted_request.
         * @member {boolean} accepted_request
         * @memberof CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @instance
         */
        CVoiceChat_OneOnOneChatRequestResponse_Notification.prototype.accepted_request = false;
    
        /**
         * Creates a new CVoiceChat_OneOnOneChatRequestResponse_Notification instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @static
         * @param {ICVoiceChat_OneOnOneChatRequestResponse_Notification=} [properties] Properties to set
         * @returns {CVoiceChat_OneOnOneChatRequestResponse_Notification} CVoiceChat_OneOnOneChatRequestResponse_Notification instance
         */
        CVoiceChat_OneOnOneChatRequestResponse_Notification.create = function create(properties) {
            return new CVoiceChat_OneOnOneChatRequestResponse_Notification(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_OneOnOneChatRequestResponse_Notification message. Does not implicitly {@link CVoiceChat_OneOnOneChatRequestResponse_Notification.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @static
         * @param {ICVoiceChat_OneOnOneChatRequestResponse_Notification} message CVoiceChat_OneOnOneChatRequestResponse_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_OneOnOneChatRequestResponse_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.voicechat_id != null && message.hasOwnProperty("voicechat_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.voicechat_id);
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.steamid_partner);
            if (message.accepted_request != null && message.hasOwnProperty("accepted_request"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.accepted_request);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_OneOnOneChatRequestResponse_Notification message, length delimited. Does not implicitly {@link CVoiceChat_OneOnOneChatRequestResponse_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @static
         * @param {ICVoiceChat_OneOnOneChatRequestResponse_Notification} message CVoiceChat_OneOnOneChatRequestResponse_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_OneOnOneChatRequestResponse_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_OneOnOneChatRequestResponse_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_OneOnOneChatRequestResponse_Notification} CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_OneOnOneChatRequestResponse_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_OneOnOneChatRequestResponse_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.voicechat_id = reader.fixed64();
                    break;
                case 2:
                    message.steamid_partner = reader.fixed64();
                    break;
                case 3:
                    message.accepted_request = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_OneOnOneChatRequestResponse_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_OneOnOneChatRequestResponse_Notification} CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_OneOnOneChatRequestResponse_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_OneOnOneChatRequestResponse_Notification message.
         * @function verify
         * @memberof CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_OneOnOneChatRequestResponse_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.voicechat_id != null && message.hasOwnProperty("voicechat_id"))
                if (!$util.isInteger(message.voicechat_id) && !(message.voicechat_id && $util.isInteger(message.voicechat_id.low) && $util.isInteger(message.voicechat_id.high)))
                    return "voicechat_id: integer|Long expected";
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                if (!$util.isInteger(message.steamid_partner) && !(message.steamid_partner && $util.isInteger(message.steamid_partner.low) && $util.isInteger(message.steamid_partner.high)))
                    return "steamid_partner: integer|Long expected";
            if (message.accepted_request != null && message.hasOwnProperty("accepted_request"))
                if (typeof message.accepted_request !== "boolean")
                    return "accepted_request: boolean expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_OneOnOneChatRequestResponse_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_OneOnOneChatRequestResponse_Notification} CVoiceChat_OneOnOneChatRequestResponse_Notification
         */
        CVoiceChat_OneOnOneChatRequestResponse_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_OneOnOneChatRequestResponse_Notification)
                return object;
            var message = new $root.CVoiceChat_OneOnOneChatRequestResponse_Notification();
            if (object.voicechat_id != null)
                if ($util.Long)
                    (message.voicechat_id = $util.Long.fromValue(object.voicechat_id)).unsigned = false;
                else if (typeof object.voicechat_id === "string")
                    message.voicechat_id = parseInt(object.voicechat_id, 10);
                else if (typeof object.voicechat_id === "number")
                    message.voicechat_id = object.voicechat_id;
                else if (typeof object.voicechat_id === "object")
                    message.voicechat_id = new $util.LongBits(object.voicechat_id.low >>> 0, object.voicechat_id.high >>> 0).toNumber();
            if (object.steamid_partner != null)
                if ($util.Long)
                    (message.steamid_partner = $util.Long.fromValue(object.steamid_partner)).unsigned = false;
                else if (typeof object.steamid_partner === "string")
                    message.steamid_partner = parseInt(object.steamid_partner, 10);
                else if (typeof object.steamid_partner === "number")
                    message.steamid_partner = object.steamid_partner;
                else if (typeof object.steamid_partner === "object")
                    message.steamid_partner = new $util.LongBits(object.steamid_partner.low >>> 0, object.steamid_partner.high >>> 0).toNumber();
            if (object.accepted_request != null)
                message.accepted_request = Boolean(object.accepted_request);
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_OneOnOneChatRequestResponse_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @static
         * @param {CVoiceChat_OneOnOneChatRequestResponse_Notification} message CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_OneOnOneChatRequestResponse_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.voicechat_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.voicechat_id = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid_partner = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid_partner = options.longs === String ? "0" : 0;
                object.accepted_request = false;
            }
            if (message.voicechat_id != null && message.hasOwnProperty("voicechat_id"))
                if (typeof message.voicechat_id === "number")
                    object.voicechat_id = options.longs === String ? String(message.voicechat_id) : message.voicechat_id;
                else
                    object.voicechat_id = options.longs === String ? $util.Long.prototype.toString.call(message.voicechat_id) : options.longs === Number ? new $util.LongBits(message.voicechat_id.low >>> 0, message.voicechat_id.high >>> 0).toNumber() : message.voicechat_id;
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                if (typeof message.steamid_partner === "number")
                    object.steamid_partner = options.longs === String ? String(message.steamid_partner) : message.steamid_partner;
                else
                    object.steamid_partner = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_partner) : options.longs === Number ? new $util.LongBits(message.steamid_partner.low >>> 0, message.steamid_partner.high >>> 0).toNumber() : message.steamid_partner;
            if (message.accepted_request != null && message.hasOwnProperty("accepted_request"))
                object.accepted_request = message.accepted_request;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_OneOnOneChatRequestResponse_Notification to JSON.
         * @function toJSON
         * @memberof CVoiceChat_OneOnOneChatRequestResponse_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_OneOnOneChatRequestResponse_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_OneOnOneChatRequestResponse_Notification;
    })();
    
    $root.CVoiceChat_EndOneOnOneChat_Request = (function() {
    
        /**
         * Properties of a CVoiceChat_EndOneOnOneChat_Request.
         * @exports ICVoiceChat_EndOneOnOneChat_Request
         * @interface ICVoiceChat_EndOneOnOneChat_Request
         * @property {number|Long|null} [steamid_partner] CVoiceChat_EndOneOnOneChat_Request steamid_partner
         */
    
        /**
         * Constructs a new CVoiceChat_EndOneOnOneChat_Request.
         * @exports CVoiceChat_EndOneOnOneChat_Request
         * @classdesc Represents a CVoiceChat_EndOneOnOneChat_Request.
         * @implements ICVoiceChat_EndOneOnOneChat_Request
         * @constructor
         * @param {ICVoiceChat_EndOneOnOneChat_Request=} [properties] Properties to set
         */
        function CVoiceChat_EndOneOnOneChat_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_EndOneOnOneChat_Request steamid_partner.
         * @member {number|Long} steamid_partner
         * @memberof CVoiceChat_EndOneOnOneChat_Request
         * @instance
         */
        CVoiceChat_EndOneOnOneChat_Request.prototype.steamid_partner = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CVoiceChat_EndOneOnOneChat_Request instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_EndOneOnOneChat_Request
         * @static
         * @param {ICVoiceChat_EndOneOnOneChat_Request=} [properties] Properties to set
         * @returns {CVoiceChat_EndOneOnOneChat_Request} CVoiceChat_EndOneOnOneChat_Request instance
         */
        CVoiceChat_EndOneOnOneChat_Request.create = function create(properties) {
            return new CVoiceChat_EndOneOnOneChat_Request(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_EndOneOnOneChat_Request message. Does not implicitly {@link CVoiceChat_EndOneOnOneChat_Request.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_EndOneOnOneChat_Request
         * @static
         * @param {ICVoiceChat_EndOneOnOneChat_Request} message CVoiceChat_EndOneOnOneChat_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_EndOneOnOneChat_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid_partner);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_EndOneOnOneChat_Request message, length delimited. Does not implicitly {@link CVoiceChat_EndOneOnOneChat_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_EndOneOnOneChat_Request
         * @static
         * @param {ICVoiceChat_EndOneOnOneChat_Request} message CVoiceChat_EndOneOnOneChat_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_EndOneOnOneChat_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_EndOneOnOneChat_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_EndOneOnOneChat_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_EndOneOnOneChat_Request} CVoiceChat_EndOneOnOneChat_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_EndOneOnOneChat_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_EndOneOnOneChat_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid_partner = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_EndOneOnOneChat_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_EndOneOnOneChat_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_EndOneOnOneChat_Request} CVoiceChat_EndOneOnOneChat_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_EndOneOnOneChat_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_EndOneOnOneChat_Request message.
         * @function verify
         * @memberof CVoiceChat_EndOneOnOneChat_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_EndOneOnOneChat_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                if (!$util.isInteger(message.steamid_partner) && !(message.steamid_partner && $util.isInteger(message.steamid_partner.low) && $util.isInteger(message.steamid_partner.high)))
                    return "steamid_partner: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_EndOneOnOneChat_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_EndOneOnOneChat_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_EndOneOnOneChat_Request} CVoiceChat_EndOneOnOneChat_Request
         */
        CVoiceChat_EndOneOnOneChat_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_EndOneOnOneChat_Request)
                return object;
            var message = new $root.CVoiceChat_EndOneOnOneChat_Request();
            if (object.steamid_partner != null)
                if ($util.Long)
                    (message.steamid_partner = $util.Long.fromValue(object.steamid_partner)).unsigned = false;
                else if (typeof object.steamid_partner === "string")
                    message.steamid_partner = parseInt(object.steamid_partner, 10);
                else if (typeof object.steamid_partner === "number")
                    message.steamid_partner = object.steamid_partner;
                else if (typeof object.steamid_partner === "object")
                    message.steamid_partner = new $util.LongBits(object.steamid_partner.low >>> 0, object.steamid_partner.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_EndOneOnOneChat_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_EndOneOnOneChat_Request
         * @static
         * @param {CVoiceChat_EndOneOnOneChat_Request} message CVoiceChat_EndOneOnOneChat_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_EndOneOnOneChat_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid_partner = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid_partner = options.longs === String ? "0" : 0;
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                if (typeof message.steamid_partner === "number")
                    object.steamid_partner = options.longs === String ? String(message.steamid_partner) : message.steamid_partner;
                else
                    object.steamid_partner = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_partner) : options.longs === Number ? new $util.LongBits(message.steamid_partner.low >>> 0, message.steamid_partner.high >>> 0).toNumber() : message.steamid_partner;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_EndOneOnOneChat_Request to JSON.
         * @function toJSON
         * @memberof CVoiceChat_EndOneOnOneChat_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_EndOneOnOneChat_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_EndOneOnOneChat_Request;
    })();
    
    $root.CVoiceChat_EndOneOnOneChat_Response = (function() {
    
        /**
         * Properties of a CVoiceChat_EndOneOnOneChat_Response.
         * @exports ICVoiceChat_EndOneOnOneChat_Response
         * @interface ICVoiceChat_EndOneOnOneChat_Response
         */
    
        /**
         * Constructs a new CVoiceChat_EndOneOnOneChat_Response.
         * @exports CVoiceChat_EndOneOnOneChat_Response
         * @classdesc Represents a CVoiceChat_EndOneOnOneChat_Response.
         * @implements ICVoiceChat_EndOneOnOneChat_Response
         * @constructor
         * @param {ICVoiceChat_EndOneOnOneChat_Response=} [properties] Properties to set
         */
        function CVoiceChat_EndOneOnOneChat_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CVoiceChat_EndOneOnOneChat_Response instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_EndOneOnOneChat_Response
         * @static
         * @param {ICVoiceChat_EndOneOnOneChat_Response=} [properties] Properties to set
         * @returns {CVoiceChat_EndOneOnOneChat_Response} CVoiceChat_EndOneOnOneChat_Response instance
         */
        CVoiceChat_EndOneOnOneChat_Response.create = function create(properties) {
            return new CVoiceChat_EndOneOnOneChat_Response(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_EndOneOnOneChat_Response message. Does not implicitly {@link CVoiceChat_EndOneOnOneChat_Response.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_EndOneOnOneChat_Response
         * @static
         * @param {ICVoiceChat_EndOneOnOneChat_Response} message CVoiceChat_EndOneOnOneChat_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_EndOneOnOneChat_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_EndOneOnOneChat_Response message, length delimited. Does not implicitly {@link CVoiceChat_EndOneOnOneChat_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_EndOneOnOneChat_Response
         * @static
         * @param {ICVoiceChat_EndOneOnOneChat_Response} message CVoiceChat_EndOneOnOneChat_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_EndOneOnOneChat_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_EndOneOnOneChat_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_EndOneOnOneChat_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_EndOneOnOneChat_Response} CVoiceChat_EndOneOnOneChat_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_EndOneOnOneChat_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_EndOneOnOneChat_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_EndOneOnOneChat_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_EndOneOnOneChat_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_EndOneOnOneChat_Response} CVoiceChat_EndOneOnOneChat_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_EndOneOnOneChat_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_EndOneOnOneChat_Response message.
         * @function verify
         * @memberof CVoiceChat_EndOneOnOneChat_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_EndOneOnOneChat_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_EndOneOnOneChat_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_EndOneOnOneChat_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_EndOneOnOneChat_Response} CVoiceChat_EndOneOnOneChat_Response
         */
        CVoiceChat_EndOneOnOneChat_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_EndOneOnOneChat_Response)
                return object;
            return new $root.CVoiceChat_EndOneOnOneChat_Response();
        };
    
        /**
         * Creates a plain object from a CVoiceChat_EndOneOnOneChat_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_EndOneOnOneChat_Response
         * @static
         * @param {CVoiceChat_EndOneOnOneChat_Response} message CVoiceChat_EndOneOnOneChat_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_EndOneOnOneChat_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CVoiceChat_EndOneOnOneChat_Response to JSON.
         * @function toJSON
         * @memberof CVoiceChat_EndOneOnOneChat_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_EndOneOnOneChat_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_EndOneOnOneChat_Response;
    })();
    
    $root.CVoiceChat_LeaveOneOnOneChat_Request = (function() {
    
        /**
         * Properties of a CVoiceChat_LeaveOneOnOneChat_Request.
         * @exports ICVoiceChat_LeaveOneOnOneChat_Request
         * @interface ICVoiceChat_LeaveOneOnOneChat_Request
         * @property {number|Long|null} [steamid_partner] CVoiceChat_LeaveOneOnOneChat_Request steamid_partner
         * @property {number|Long|null} [voice_chatid] CVoiceChat_LeaveOneOnOneChat_Request voice_chatid
         */
    
        /**
         * Constructs a new CVoiceChat_LeaveOneOnOneChat_Request.
         * @exports CVoiceChat_LeaveOneOnOneChat_Request
         * @classdesc Represents a CVoiceChat_LeaveOneOnOneChat_Request.
         * @implements ICVoiceChat_LeaveOneOnOneChat_Request
         * @constructor
         * @param {ICVoiceChat_LeaveOneOnOneChat_Request=} [properties] Properties to set
         */
        function CVoiceChat_LeaveOneOnOneChat_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_LeaveOneOnOneChat_Request steamid_partner.
         * @member {number|Long} steamid_partner
         * @memberof CVoiceChat_LeaveOneOnOneChat_Request
         * @instance
         */
        CVoiceChat_LeaveOneOnOneChat_Request.prototype.steamid_partner = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_LeaveOneOnOneChat_Request voice_chatid.
         * @member {number|Long} voice_chatid
         * @memberof CVoiceChat_LeaveOneOnOneChat_Request
         * @instance
         */
        CVoiceChat_LeaveOneOnOneChat_Request.prototype.voice_chatid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CVoiceChat_LeaveOneOnOneChat_Request instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_LeaveOneOnOneChat_Request
         * @static
         * @param {ICVoiceChat_LeaveOneOnOneChat_Request=} [properties] Properties to set
         * @returns {CVoiceChat_LeaveOneOnOneChat_Request} CVoiceChat_LeaveOneOnOneChat_Request instance
         */
        CVoiceChat_LeaveOneOnOneChat_Request.create = function create(properties) {
            return new CVoiceChat_LeaveOneOnOneChat_Request(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_LeaveOneOnOneChat_Request message. Does not implicitly {@link CVoiceChat_LeaveOneOnOneChat_Request.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_LeaveOneOnOneChat_Request
         * @static
         * @param {ICVoiceChat_LeaveOneOnOneChat_Request} message CVoiceChat_LeaveOneOnOneChat_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_LeaveOneOnOneChat_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid_partner);
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.voice_chatid);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_LeaveOneOnOneChat_Request message, length delimited. Does not implicitly {@link CVoiceChat_LeaveOneOnOneChat_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_LeaveOneOnOneChat_Request
         * @static
         * @param {ICVoiceChat_LeaveOneOnOneChat_Request} message CVoiceChat_LeaveOneOnOneChat_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_LeaveOneOnOneChat_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_LeaveOneOnOneChat_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_LeaveOneOnOneChat_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_LeaveOneOnOneChat_Request} CVoiceChat_LeaveOneOnOneChat_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_LeaveOneOnOneChat_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_LeaveOneOnOneChat_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid_partner = reader.fixed64();
                    break;
                case 2:
                    message.voice_chatid = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_LeaveOneOnOneChat_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_LeaveOneOnOneChat_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_LeaveOneOnOneChat_Request} CVoiceChat_LeaveOneOnOneChat_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_LeaveOneOnOneChat_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_LeaveOneOnOneChat_Request message.
         * @function verify
         * @memberof CVoiceChat_LeaveOneOnOneChat_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_LeaveOneOnOneChat_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                if (!$util.isInteger(message.steamid_partner) && !(message.steamid_partner && $util.isInteger(message.steamid_partner.low) && $util.isInteger(message.steamid_partner.high)))
                    return "steamid_partner: integer|Long expected";
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (!$util.isInteger(message.voice_chatid) && !(message.voice_chatid && $util.isInteger(message.voice_chatid.low) && $util.isInteger(message.voice_chatid.high)))
                    return "voice_chatid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_LeaveOneOnOneChat_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_LeaveOneOnOneChat_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_LeaveOneOnOneChat_Request} CVoiceChat_LeaveOneOnOneChat_Request
         */
        CVoiceChat_LeaveOneOnOneChat_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_LeaveOneOnOneChat_Request)
                return object;
            var message = new $root.CVoiceChat_LeaveOneOnOneChat_Request();
            if (object.steamid_partner != null)
                if ($util.Long)
                    (message.steamid_partner = $util.Long.fromValue(object.steamid_partner)).unsigned = false;
                else if (typeof object.steamid_partner === "string")
                    message.steamid_partner = parseInt(object.steamid_partner, 10);
                else if (typeof object.steamid_partner === "number")
                    message.steamid_partner = object.steamid_partner;
                else if (typeof object.steamid_partner === "object")
                    message.steamid_partner = new $util.LongBits(object.steamid_partner.low >>> 0, object.steamid_partner.high >>> 0).toNumber();
            if (object.voice_chatid != null)
                if ($util.Long)
                    (message.voice_chatid = $util.Long.fromValue(object.voice_chatid)).unsigned = false;
                else if (typeof object.voice_chatid === "string")
                    message.voice_chatid = parseInt(object.voice_chatid, 10);
                else if (typeof object.voice_chatid === "number")
                    message.voice_chatid = object.voice_chatid;
                else if (typeof object.voice_chatid === "object")
                    message.voice_chatid = new $util.LongBits(object.voice_chatid.low >>> 0, object.voice_chatid.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_LeaveOneOnOneChat_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_LeaveOneOnOneChat_Request
         * @static
         * @param {CVoiceChat_LeaveOneOnOneChat_Request} message CVoiceChat_LeaveOneOnOneChat_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_LeaveOneOnOneChat_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid_partner = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid_partner = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.voice_chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.voice_chatid = options.longs === String ? "0" : 0;
            }
            if (message.steamid_partner != null && message.hasOwnProperty("steamid_partner"))
                if (typeof message.steamid_partner === "number")
                    object.steamid_partner = options.longs === String ? String(message.steamid_partner) : message.steamid_partner;
                else
                    object.steamid_partner = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_partner) : options.longs === Number ? new $util.LongBits(message.steamid_partner.low >>> 0, message.steamid_partner.high >>> 0).toNumber() : message.steamid_partner;
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (typeof message.voice_chatid === "number")
                    object.voice_chatid = options.longs === String ? String(message.voice_chatid) : message.voice_chatid;
                else
                    object.voice_chatid = options.longs === String ? $util.Long.prototype.toString.call(message.voice_chatid) : options.longs === Number ? new $util.LongBits(message.voice_chatid.low >>> 0, message.voice_chatid.high >>> 0).toNumber() : message.voice_chatid;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_LeaveOneOnOneChat_Request to JSON.
         * @function toJSON
         * @memberof CVoiceChat_LeaveOneOnOneChat_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_LeaveOneOnOneChat_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_LeaveOneOnOneChat_Request;
    })();
    
    $root.CVoiceChat_LeaveOneOnOneChat_Response = (function() {
    
        /**
         * Properties of a CVoiceChat_LeaveOneOnOneChat_Response.
         * @exports ICVoiceChat_LeaveOneOnOneChat_Response
         * @interface ICVoiceChat_LeaveOneOnOneChat_Response
         */
    
        /**
         * Constructs a new CVoiceChat_LeaveOneOnOneChat_Response.
         * @exports CVoiceChat_LeaveOneOnOneChat_Response
         * @classdesc Represents a CVoiceChat_LeaveOneOnOneChat_Response.
         * @implements ICVoiceChat_LeaveOneOnOneChat_Response
         * @constructor
         * @param {ICVoiceChat_LeaveOneOnOneChat_Response=} [properties] Properties to set
         */
        function CVoiceChat_LeaveOneOnOneChat_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CVoiceChat_LeaveOneOnOneChat_Response instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_LeaveOneOnOneChat_Response
         * @static
         * @param {ICVoiceChat_LeaveOneOnOneChat_Response=} [properties] Properties to set
         * @returns {CVoiceChat_LeaveOneOnOneChat_Response} CVoiceChat_LeaveOneOnOneChat_Response instance
         */
        CVoiceChat_LeaveOneOnOneChat_Response.create = function create(properties) {
            return new CVoiceChat_LeaveOneOnOneChat_Response(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_LeaveOneOnOneChat_Response message. Does not implicitly {@link CVoiceChat_LeaveOneOnOneChat_Response.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_LeaveOneOnOneChat_Response
         * @static
         * @param {ICVoiceChat_LeaveOneOnOneChat_Response} message CVoiceChat_LeaveOneOnOneChat_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_LeaveOneOnOneChat_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_LeaveOneOnOneChat_Response message, length delimited. Does not implicitly {@link CVoiceChat_LeaveOneOnOneChat_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_LeaveOneOnOneChat_Response
         * @static
         * @param {ICVoiceChat_LeaveOneOnOneChat_Response} message CVoiceChat_LeaveOneOnOneChat_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_LeaveOneOnOneChat_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_LeaveOneOnOneChat_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_LeaveOneOnOneChat_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_LeaveOneOnOneChat_Response} CVoiceChat_LeaveOneOnOneChat_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_LeaveOneOnOneChat_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_LeaveOneOnOneChat_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_LeaveOneOnOneChat_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_LeaveOneOnOneChat_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_LeaveOneOnOneChat_Response} CVoiceChat_LeaveOneOnOneChat_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_LeaveOneOnOneChat_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_LeaveOneOnOneChat_Response message.
         * @function verify
         * @memberof CVoiceChat_LeaveOneOnOneChat_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_LeaveOneOnOneChat_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_LeaveOneOnOneChat_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_LeaveOneOnOneChat_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_LeaveOneOnOneChat_Response} CVoiceChat_LeaveOneOnOneChat_Response
         */
        CVoiceChat_LeaveOneOnOneChat_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_LeaveOneOnOneChat_Response)
                return object;
            return new $root.CVoiceChat_LeaveOneOnOneChat_Response();
        };
    
        /**
         * Creates a plain object from a CVoiceChat_LeaveOneOnOneChat_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_LeaveOneOnOneChat_Response
         * @static
         * @param {CVoiceChat_LeaveOneOnOneChat_Response} message CVoiceChat_LeaveOneOnOneChat_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_LeaveOneOnOneChat_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CVoiceChat_LeaveOneOnOneChat_Response to JSON.
         * @function toJSON
         * @memberof CVoiceChat_LeaveOneOnOneChat_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_LeaveOneOnOneChat_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_LeaveOneOnOneChat_Response;
    })();
    
    $root.CVoiceChat_UserJoinedVoiceChat_Notification = (function() {
    
        /**
         * Properties of a CVoiceChat_UserJoinedVoiceChat_Notification.
         * @exports ICVoiceChat_UserJoinedVoiceChat_Notification
         * @interface ICVoiceChat_UserJoinedVoiceChat_Notification
         * @property {number|Long|null} [voice_chatid] CVoiceChat_UserJoinedVoiceChat_Notification voice_chatid
         * @property {number|Long|null} [user_steamid] CVoiceChat_UserJoinedVoiceChat_Notification user_steamid
         * @property {number|Long|null} [chatid] CVoiceChat_UserJoinedVoiceChat_Notification chatid
         * @property {number|Long|null} [one_on_one_steamid_lower] CVoiceChat_UserJoinedVoiceChat_Notification one_on_one_steamid_lower
         * @property {number|Long|null} [one_on_one_steamid_higher] CVoiceChat_UserJoinedVoiceChat_Notification one_on_one_steamid_higher
         * @property {number|Long|null} [chat_group_id] CVoiceChat_UserJoinedVoiceChat_Notification chat_group_id
         * @property {number|null} [user_sessionid] CVoiceChat_UserJoinedVoiceChat_Notification user_sessionid
         */
    
        /**
         * Constructs a new CVoiceChat_UserJoinedVoiceChat_Notification.
         * @exports CVoiceChat_UserJoinedVoiceChat_Notification
         * @classdesc Represents a CVoiceChat_UserJoinedVoiceChat_Notification.
         * @implements ICVoiceChat_UserJoinedVoiceChat_Notification
         * @constructor
         * @param {ICVoiceChat_UserJoinedVoiceChat_Notification=} [properties] Properties to set
         */
        function CVoiceChat_UserJoinedVoiceChat_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_UserJoinedVoiceChat_Notification voice_chatid.
         * @member {number|Long} voice_chatid
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.prototype.voice_chatid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_UserJoinedVoiceChat_Notification user_steamid.
         * @member {number|Long} user_steamid
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.prototype.user_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_UserJoinedVoiceChat_Notification chatid.
         * @member {number|Long} chatid
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.prototype.chatid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CVoiceChat_UserJoinedVoiceChat_Notification one_on_one_steamid_lower.
         * @member {number|Long} one_on_one_steamid_lower
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.prototype.one_on_one_steamid_lower = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_UserJoinedVoiceChat_Notification one_on_one_steamid_higher.
         * @member {number|Long} one_on_one_steamid_higher
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.prototype.one_on_one_steamid_higher = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_UserJoinedVoiceChat_Notification chat_group_id.
         * @member {number|Long} chat_group_id
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.prototype.chat_group_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CVoiceChat_UserJoinedVoiceChat_Notification user_sessionid.
         * @member {number} user_sessionid
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.prototype.user_sessionid = 0;
    
        /**
         * Creates a new CVoiceChat_UserJoinedVoiceChat_Notification instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @static
         * @param {ICVoiceChat_UserJoinedVoiceChat_Notification=} [properties] Properties to set
         * @returns {CVoiceChat_UserJoinedVoiceChat_Notification} CVoiceChat_UserJoinedVoiceChat_Notification instance
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.create = function create(properties) {
            return new CVoiceChat_UserJoinedVoiceChat_Notification(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_UserJoinedVoiceChat_Notification message. Does not implicitly {@link CVoiceChat_UserJoinedVoiceChat_Notification.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @static
         * @param {ICVoiceChat_UserJoinedVoiceChat_Notification} message CVoiceChat_UserJoinedVoiceChat_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.voice_chatid);
            if (message.user_steamid != null && message.hasOwnProperty("user_steamid"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.user_steamid);
            if (message.chatid != null && message.hasOwnProperty("chatid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.chatid);
            if (message.one_on_one_steamid_lower != null && message.hasOwnProperty("one_on_one_steamid_lower"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.one_on_one_steamid_lower);
            if (message.one_on_one_steamid_higher != null && message.hasOwnProperty("one_on_one_steamid_higher"))
                writer.uint32(/* id 5, wireType 1 =*/41).fixed64(message.one_on_one_steamid_higher);
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.chat_group_id);
            if (message.user_sessionid != null && message.hasOwnProperty("user_sessionid"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.user_sessionid);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_UserJoinedVoiceChat_Notification message, length delimited. Does not implicitly {@link CVoiceChat_UserJoinedVoiceChat_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @static
         * @param {ICVoiceChat_UserJoinedVoiceChat_Notification} message CVoiceChat_UserJoinedVoiceChat_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_UserJoinedVoiceChat_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_UserJoinedVoiceChat_Notification} CVoiceChat_UserJoinedVoiceChat_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_UserJoinedVoiceChat_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.voice_chatid = reader.fixed64();
                    break;
                case 2:
                    message.user_steamid = reader.fixed64();
                    break;
                case 3:
                    message.chatid = reader.uint64();
                    break;
                case 4:
                    message.one_on_one_steamid_lower = reader.fixed64();
                    break;
                case 5:
                    message.one_on_one_steamid_higher = reader.fixed64();
                    break;
                case 6:
                    message.chat_group_id = reader.uint64();
                    break;
                case 7:
                    message.user_sessionid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_UserJoinedVoiceChat_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_UserJoinedVoiceChat_Notification} CVoiceChat_UserJoinedVoiceChat_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_UserJoinedVoiceChat_Notification message.
         * @function verify
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (!$util.isInteger(message.voice_chatid) && !(message.voice_chatid && $util.isInteger(message.voice_chatid.low) && $util.isInteger(message.voice_chatid.high)))
                    return "voice_chatid: integer|Long expected";
            if (message.user_steamid != null && message.hasOwnProperty("user_steamid"))
                if (!$util.isInteger(message.user_steamid) && !(message.user_steamid && $util.isInteger(message.user_steamid.low) && $util.isInteger(message.user_steamid.high)))
                    return "user_steamid: integer|Long expected";
            if (message.chatid != null && message.hasOwnProperty("chatid"))
                if (!$util.isInteger(message.chatid) && !(message.chatid && $util.isInteger(message.chatid.low) && $util.isInteger(message.chatid.high)))
                    return "chatid: integer|Long expected";
            if (message.one_on_one_steamid_lower != null && message.hasOwnProperty("one_on_one_steamid_lower"))
                if (!$util.isInteger(message.one_on_one_steamid_lower) && !(message.one_on_one_steamid_lower && $util.isInteger(message.one_on_one_steamid_lower.low) && $util.isInteger(message.one_on_one_steamid_lower.high)))
                    return "one_on_one_steamid_lower: integer|Long expected";
            if (message.one_on_one_steamid_higher != null && message.hasOwnProperty("one_on_one_steamid_higher"))
                if (!$util.isInteger(message.one_on_one_steamid_higher) && !(message.one_on_one_steamid_higher && $util.isInteger(message.one_on_one_steamid_higher.low) && $util.isInteger(message.one_on_one_steamid_higher.high)))
                    return "one_on_one_steamid_higher: integer|Long expected";
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                if (!$util.isInteger(message.chat_group_id) && !(message.chat_group_id && $util.isInteger(message.chat_group_id.low) && $util.isInteger(message.chat_group_id.high)))
                    return "chat_group_id: integer|Long expected";
            if (message.user_sessionid != null && message.hasOwnProperty("user_sessionid"))
                if (!$util.isInteger(message.user_sessionid))
                    return "user_sessionid: integer expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_UserJoinedVoiceChat_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_UserJoinedVoiceChat_Notification} CVoiceChat_UserJoinedVoiceChat_Notification
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_UserJoinedVoiceChat_Notification)
                return object;
            var message = new $root.CVoiceChat_UserJoinedVoiceChat_Notification();
            if (object.voice_chatid != null)
                if ($util.Long)
                    (message.voice_chatid = $util.Long.fromValue(object.voice_chatid)).unsigned = false;
                else if (typeof object.voice_chatid === "string")
                    message.voice_chatid = parseInt(object.voice_chatid, 10);
                else if (typeof object.voice_chatid === "number")
                    message.voice_chatid = object.voice_chatid;
                else if (typeof object.voice_chatid === "object")
                    message.voice_chatid = new $util.LongBits(object.voice_chatid.low >>> 0, object.voice_chatid.high >>> 0).toNumber();
            if (object.user_steamid != null)
                if ($util.Long)
                    (message.user_steamid = $util.Long.fromValue(object.user_steamid)).unsigned = false;
                else if (typeof object.user_steamid === "string")
                    message.user_steamid = parseInt(object.user_steamid, 10);
                else if (typeof object.user_steamid === "number")
                    message.user_steamid = object.user_steamid;
                else if (typeof object.user_steamid === "object")
                    message.user_steamid = new $util.LongBits(object.user_steamid.low >>> 0, object.user_steamid.high >>> 0).toNumber();
            if (object.chatid != null)
                if ($util.Long)
                    (message.chatid = $util.Long.fromValue(object.chatid)).unsigned = true;
                else if (typeof object.chatid === "string")
                    message.chatid = parseInt(object.chatid, 10);
                else if (typeof object.chatid === "number")
                    message.chatid = object.chatid;
                else if (typeof object.chatid === "object")
                    message.chatid = new $util.LongBits(object.chatid.low >>> 0, object.chatid.high >>> 0).toNumber(true);
            if (object.one_on_one_steamid_lower != null)
                if ($util.Long)
                    (message.one_on_one_steamid_lower = $util.Long.fromValue(object.one_on_one_steamid_lower)).unsigned = false;
                else if (typeof object.one_on_one_steamid_lower === "string")
                    message.one_on_one_steamid_lower = parseInt(object.one_on_one_steamid_lower, 10);
                else if (typeof object.one_on_one_steamid_lower === "number")
                    message.one_on_one_steamid_lower = object.one_on_one_steamid_lower;
                else if (typeof object.one_on_one_steamid_lower === "object")
                    message.one_on_one_steamid_lower = new $util.LongBits(object.one_on_one_steamid_lower.low >>> 0, object.one_on_one_steamid_lower.high >>> 0).toNumber();
            if (object.one_on_one_steamid_higher != null)
                if ($util.Long)
                    (message.one_on_one_steamid_higher = $util.Long.fromValue(object.one_on_one_steamid_higher)).unsigned = false;
                else if (typeof object.one_on_one_steamid_higher === "string")
                    message.one_on_one_steamid_higher = parseInt(object.one_on_one_steamid_higher, 10);
                else if (typeof object.one_on_one_steamid_higher === "number")
                    message.one_on_one_steamid_higher = object.one_on_one_steamid_higher;
                else if (typeof object.one_on_one_steamid_higher === "object")
                    message.one_on_one_steamid_higher = new $util.LongBits(object.one_on_one_steamid_higher.low >>> 0, object.one_on_one_steamid_higher.high >>> 0).toNumber();
            if (object.chat_group_id != null)
                if ($util.Long)
                    (message.chat_group_id = $util.Long.fromValue(object.chat_group_id)).unsigned = true;
                else if (typeof object.chat_group_id === "string")
                    message.chat_group_id = parseInt(object.chat_group_id, 10);
                else if (typeof object.chat_group_id === "number")
                    message.chat_group_id = object.chat_group_id;
                else if (typeof object.chat_group_id === "object")
                    message.chat_group_id = new $util.LongBits(object.chat_group_id.low >>> 0, object.chat_group_id.high >>> 0).toNumber(true);
            if (object.user_sessionid != null)
                message.user_sessionid = object.user_sessionid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_UserJoinedVoiceChat_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @static
         * @param {CVoiceChat_UserJoinedVoiceChat_Notification} message CVoiceChat_UserJoinedVoiceChat_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.voice_chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.voice_chatid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.user_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.user_steamid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.chatid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.one_on_one_steamid_lower = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.one_on_one_steamid_lower = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.one_on_one_steamid_higher = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.one_on_one_steamid_higher = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.chat_group_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.chat_group_id = options.longs === String ? "0" : 0;
                object.user_sessionid = 0;
            }
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (typeof message.voice_chatid === "number")
                    object.voice_chatid = options.longs === String ? String(message.voice_chatid) : message.voice_chatid;
                else
                    object.voice_chatid = options.longs === String ? $util.Long.prototype.toString.call(message.voice_chatid) : options.longs === Number ? new $util.LongBits(message.voice_chatid.low >>> 0, message.voice_chatid.high >>> 0).toNumber() : message.voice_chatid;
            if (message.user_steamid != null && message.hasOwnProperty("user_steamid"))
                if (typeof message.user_steamid === "number")
                    object.user_steamid = options.longs === String ? String(message.user_steamid) : message.user_steamid;
                else
                    object.user_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.user_steamid) : options.longs === Number ? new $util.LongBits(message.user_steamid.low >>> 0, message.user_steamid.high >>> 0).toNumber() : message.user_steamid;
            if (message.chatid != null && message.hasOwnProperty("chatid"))
                if (typeof message.chatid === "number")
                    object.chatid = options.longs === String ? String(message.chatid) : message.chatid;
                else
                    object.chatid = options.longs === String ? $util.Long.prototype.toString.call(message.chatid) : options.longs === Number ? new $util.LongBits(message.chatid.low >>> 0, message.chatid.high >>> 0).toNumber(true) : message.chatid;
            if (message.one_on_one_steamid_lower != null && message.hasOwnProperty("one_on_one_steamid_lower"))
                if (typeof message.one_on_one_steamid_lower === "number")
                    object.one_on_one_steamid_lower = options.longs === String ? String(message.one_on_one_steamid_lower) : message.one_on_one_steamid_lower;
                else
                    object.one_on_one_steamid_lower = options.longs === String ? $util.Long.prototype.toString.call(message.one_on_one_steamid_lower) : options.longs === Number ? new $util.LongBits(message.one_on_one_steamid_lower.low >>> 0, message.one_on_one_steamid_lower.high >>> 0).toNumber() : message.one_on_one_steamid_lower;
            if (message.one_on_one_steamid_higher != null && message.hasOwnProperty("one_on_one_steamid_higher"))
                if (typeof message.one_on_one_steamid_higher === "number")
                    object.one_on_one_steamid_higher = options.longs === String ? String(message.one_on_one_steamid_higher) : message.one_on_one_steamid_higher;
                else
                    object.one_on_one_steamid_higher = options.longs === String ? $util.Long.prototype.toString.call(message.one_on_one_steamid_higher) : options.longs === Number ? new $util.LongBits(message.one_on_one_steamid_higher.low >>> 0, message.one_on_one_steamid_higher.high >>> 0).toNumber() : message.one_on_one_steamid_higher;
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                if (typeof message.chat_group_id === "number")
                    object.chat_group_id = options.longs === String ? String(message.chat_group_id) : message.chat_group_id;
                else
                    object.chat_group_id = options.longs === String ? $util.Long.prototype.toString.call(message.chat_group_id) : options.longs === Number ? new $util.LongBits(message.chat_group_id.low >>> 0, message.chat_group_id.high >>> 0).toNumber(true) : message.chat_group_id;
            if (message.user_sessionid != null && message.hasOwnProperty("user_sessionid"))
                object.user_sessionid = message.user_sessionid;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_UserJoinedVoiceChat_Notification to JSON.
         * @function toJSON
         * @memberof CVoiceChat_UserJoinedVoiceChat_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_UserJoinedVoiceChat_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_UserJoinedVoiceChat_Notification;
    })();
    
    $root.CVoiceChat_UserVoiceStatus_Notification = (function() {
    
        /**
         * Properties of a CVoiceChat_UserVoiceStatus_Notification.
         * @exports ICVoiceChat_UserVoiceStatus_Notification
         * @interface ICVoiceChat_UserVoiceStatus_Notification
         * @property {number|Long|null} [voice_chatid] CVoiceChat_UserVoiceStatus_Notification voice_chatid
         * @property {number|Long|null} [user_steamid] CVoiceChat_UserVoiceStatus_Notification user_steamid
         * @property {boolean|null} [user_muted_mic_locally] CVoiceChat_UserVoiceStatus_Notification user_muted_mic_locally
         * @property {boolean|null} [user_muted_output_locally] CVoiceChat_UserVoiceStatus_Notification user_muted_output_locally
         * @property {boolean|null} [user_has_no_mic_for_session] CVoiceChat_UserVoiceStatus_Notification user_has_no_mic_for_session
         * @property {number|null} [user_webaudio_sample_rate] CVoiceChat_UserVoiceStatus_Notification user_webaudio_sample_rate
         */
    
        /**
         * Constructs a new CVoiceChat_UserVoiceStatus_Notification.
         * @exports CVoiceChat_UserVoiceStatus_Notification
         * @classdesc Represents a CVoiceChat_UserVoiceStatus_Notification.
         * @implements ICVoiceChat_UserVoiceStatus_Notification
         * @constructor
         * @param {ICVoiceChat_UserVoiceStatus_Notification=} [properties] Properties to set
         */
        function CVoiceChat_UserVoiceStatus_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_UserVoiceStatus_Notification voice_chatid.
         * @member {number|Long} voice_chatid
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @instance
         */
        CVoiceChat_UserVoiceStatus_Notification.prototype.voice_chatid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_UserVoiceStatus_Notification user_steamid.
         * @member {number|Long} user_steamid
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @instance
         */
        CVoiceChat_UserVoiceStatus_Notification.prototype.user_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_UserVoiceStatus_Notification user_muted_mic_locally.
         * @member {boolean} user_muted_mic_locally
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @instance
         */
        CVoiceChat_UserVoiceStatus_Notification.prototype.user_muted_mic_locally = false;
    
        /**
         * CVoiceChat_UserVoiceStatus_Notification user_muted_output_locally.
         * @member {boolean} user_muted_output_locally
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @instance
         */
        CVoiceChat_UserVoiceStatus_Notification.prototype.user_muted_output_locally = false;
    
        /**
         * CVoiceChat_UserVoiceStatus_Notification user_has_no_mic_for_session.
         * @member {boolean} user_has_no_mic_for_session
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @instance
         */
        CVoiceChat_UserVoiceStatus_Notification.prototype.user_has_no_mic_for_session = false;
    
        /**
         * CVoiceChat_UserVoiceStatus_Notification user_webaudio_sample_rate.
         * @member {number} user_webaudio_sample_rate
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @instance
         */
        CVoiceChat_UserVoiceStatus_Notification.prototype.user_webaudio_sample_rate = 0;
    
        /**
         * Creates a new CVoiceChat_UserVoiceStatus_Notification instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @static
         * @param {ICVoiceChat_UserVoiceStatus_Notification=} [properties] Properties to set
         * @returns {CVoiceChat_UserVoiceStatus_Notification} CVoiceChat_UserVoiceStatus_Notification instance
         */
        CVoiceChat_UserVoiceStatus_Notification.create = function create(properties) {
            return new CVoiceChat_UserVoiceStatus_Notification(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_UserVoiceStatus_Notification message. Does not implicitly {@link CVoiceChat_UserVoiceStatus_Notification.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @static
         * @param {ICVoiceChat_UserVoiceStatus_Notification} message CVoiceChat_UserVoiceStatus_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UserVoiceStatus_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.voice_chatid);
            if (message.user_steamid != null && message.hasOwnProperty("user_steamid"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.user_steamid);
            if (message.user_muted_mic_locally != null && message.hasOwnProperty("user_muted_mic_locally"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.user_muted_mic_locally);
            if (message.user_muted_output_locally != null && message.hasOwnProperty("user_muted_output_locally"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.user_muted_output_locally);
            if (message.user_has_no_mic_for_session != null && message.hasOwnProperty("user_has_no_mic_for_session"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.user_has_no_mic_for_session);
            if (message.user_webaudio_sample_rate != null && message.hasOwnProperty("user_webaudio_sample_rate"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.user_webaudio_sample_rate);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_UserVoiceStatus_Notification message, length delimited. Does not implicitly {@link CVoiceChat_UserVoiceStatus_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @static
         * @param {ICVoiceChat_UserVoiceStatus_Notification} message CVoiceChat_UserVoiceStatus_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UserVoiceStatus_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_UserVoiceStatus_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_UserVoiceStatus_Notification} CVoiceChat_UserVoiceStatus_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UserVoiceStatus_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_UserVoiceStatus_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.voice_chatid = reader.fixed64();
                    break;
                case 2:
                    message.user_steamid = reader.fixed64();
                    break;
                case 3:
                    message.user_muted_mic_locally = reader.bool();
                    break;
                case 4:
                    message.user_muted_output_locally = reader.bool();
                    break;
                case 5:
                    message.user_has_no_mic_for_session = reader.bool();
                    break;
                case 6:
                    message.user_webaudio_sample_rate = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_UserVoiceStatus_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_UserVoiceStatus_Notification} CVoiceChat_UserVoiceStatus_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UserVoiceStatus_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_UserVoiceStatus_Notification message.
         * @function verify
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_UserVoiceStatus_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (!$util.isInteger(message.voice_chatid) && !(message.voice_chatid && $util.isInteger(message.voice_chatid.low) && $util.isInteger(message.voice_chatid.high)))
                    return "voice_chatid: integer|Long expected";
            if (message.user_steamid != null && message.hasOwnProperty("user_steamid"))
                if (!$util.isInteger(message.user_steamid) && !(message.user_steamid && $util.isInteger(message.user_steamid.low) && $util.isInteger(message.user_steamid.high)))
                    return "user_steamid: integer|Long expected";
            if (message.user_muted_mic_locally != null && message.hasOwnProperty("user_muted_mic_locally"))
                if (typeof message.user_muted_mic_locally !== "boolean")
                    return "user_muted_mic_locally: boolean expected";
            if (message.user_muted_output_locally != null && message.hasOwnProperty("user_muted_output_locally"))
                if (typeof message.user_muted_output_locally !== "boolean")
                    return "user_muted_output_locally: boolean expected";
            if (message.user_has_no_mic_for_session != null && message.hasOwnProperty("user_has_no_mic_for_session"))
                if (typeof message.user_has_no_mic_for_session !== "boolean")
                    return "user_has_no_mic_for_session: boolean expected";
            if (message.user_webaudio_sample_rate != null && message.hasOwnProperty("user_webaudio_sample_rate"))
                if (!$util.isInteger(message.user_webaudio_sample_rate))
                    return "user_webaudio_sample_rate: integer expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_UserVoiceStatus_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_UserVoiceStatus_Notification} CVoiceChat_UserVoiceStatus_Notification
         */
        CVoiceChat_UserVoiceStatus_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_UserVoiceStatus_Notification)
                return object;
            var message = new $root.CVoiceChat_UserVoiceStatus_Notification();
            if (object.voice_chatid != null)
                if ($util.Long)
                    (message.voice_chatid = $util.Long.fromValue(object.voice_chatid)).unsigned = false;
                else if (typeof object.voice_chatid === "string")
                    message.voice_chatid = parseInt(object.voice_chatid, 10);
                else if (typeof object.voice_chatid === "number")
                    message.voice_chatid = object.voice_chatid;
                else if (typeof object.voice_chatid === "object")
                    message.voice_chatid = new $util.LongBits(object.voice_chatid.low >>> 0, object.voice_chatid.high >>> 0).toNumber();
            if (object.user_steamid != null)
                if ($util.Long)
                    (message.user_steamid = $util.Long.fromValue(object.user_steamid)).unsigned = false;
                else if (typeof object.user_steamid === "string")
                    message.user_steamid = parseInt(object.user_steamid, 10);
                else if (typeof object.user_steamid === "number")
                    message.user_steamid = object.user_steamid;
                else if (typeof object.user_steamid === "object")
                    message.user_steamid = new $util.LongBits(object.user_steamid.low >>> 0, object.user_steamid.high >>> 0).toNumber();
            if (object.user_muted_mic_locally != null)
                message.user_muted_mic_locally = Boolean(object.user_muted_mic_locally);
            if (object.user_muted_output_locally != null)
                message.user_muted_output_locally = Boolean(object.user_muted_output_locally);
            if (object.user_has_no_mic_for_session != null)
                message.user_has_no_mic_for_session = Boolean(object.user_has_no_mic_for_session);
            if (object.user_webaudio_sample_rate != null)
                message.user_webaudio_sample_rate = object.user_webaudio_sample_rate | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_UserVoiceStatus_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @static
         * @param {CVoiceChat_UserVoiceStatus_Notification} message CVoiceChat_UserVoiceStatus_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_UserVoiceStatus_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.voice_chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.voice_chatid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.user_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.user_steamid = options.longs === String ? "0" : 0;
                object.user_muted_mic_locally = false;
                object.user_muted_output_locally = false;
                object.user_has_no_mic_for_session = false;
                object.user_webaudio_sample_rate = 0;
            }
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (typeof message.voice_chatid === "number")
                    object.voice_chatid = options.longs === String ? String(message.voice_chatid) : message.voice_chatid;
                else
                    object.voice_chatid = options.longs === String ? $util.Long.prototype.toString.call(message.voice_chatid) : options.longs === Number ? new $util.LongBits(message.voice_chatid.low >>> 0, message.voice_chatid.high >>> 0).toNumber() : message.voice_chatid;
            if (message.user_steamid != null && message.hasOwnProperty("user_steamid"))
                if (typeof message.user_steamid === "number")
                    object.user_steamid = options.longs === String ? String(message.user_steamid) : message.user_steamid;
                else
                    object.user_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.user_steamid) : options.longs === Number ? new $util.LongBits(message.user_steamid.low >>> 0, message.user_steamid.high >>> 0).toNumber() : message.user_steamid;
            if (message.user_muted_mic_locally != null && message.hasOwnProperty("user_muted_mic_locally"))
                object.user_muted_mic_locally = message.user_muted_mic_locally;
            if (message.user_muted_output_locally != null && message.hasOwnProperty("user_muted_output_locally"))
                object.user_muted_output_locally = message.user_muted_output_locally;
            if (message.user_has_no_mic_for_session != null && message.hasOwnProperty("user_has_no_mic_for_session"))
                object.user_has_no_mic_for_session = message.user_has_no_mic_for_session;
            if (message.user_webaudio_sample_rate != null && message.hasOwnProperty("user_webaudio_sample_rate"))
                object.user_webaudio_sample_rate = message.user_webaudio_sample_rate;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_UserVoiceStatus_Notification to JSON.
         * @function toJSON
         * @memberof CVoiceChat_UserVoiceStatus_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_UserVoiceStatus_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_UserVoiceStatus_Notification;
    })();
    
    $root.CVoiceChat_AllMembersStatus_Notification = (function() {
    
        /**
         * Properties of a CVoiceChat_AllMembersStatus_Notification.
         * @exports ICVoiceChat_AllMembersStatus_Notification
         * @interface ICVoiceChat_AllMembersStatus_Notification
         * @property {number|Long|null} [voice_chatid] CVoiceChat_AllMembersStatus_Notification voice_chatid
         * @property {Array.<ICVoiceChat_UserVoiceStatus_Notification>|null} [users] CVoiceChat_AllMembersStatus_Notification users
         */
    
        /**
         * Constructs a new CVoiceChat_AllMembersStatus_Notification.
         * @exports CVoiceChat_AllMembersStatus_Notification
         * @classdesc Represents a CVoiceChat_AllMembersStatus_Notification.
         * @implements ICVoiceChat_AllMembersStatus_Notification
         * @constructor
         * @param {ICVoiceChat_AllMembersStatus_Notification=} [properties] Properties to set
         */
        function CVoiceChat_AllMembersStatus_Notification(properties) {
            this.users = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_AllMembersStatus_Notification voice_chatid.
         * @member {number|Long} voice_chatid
         * @memberof CVoiceChat_AllMembersStatus_Notification
         * @instance
         */
        CVoiceChat_AllMembersStatus_Notification.prototype.voice_chatid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_AllMembersStatus_Notification users.
         * @member {Array.<ICVoiceChat_UserVoiceStatus_Notification>} users
         * @memberof CVoiceChat_AllMembersStatus_Notification
         * @instance
         */
        CVoiceChat_AllMembersStatus_Notification.prototype.users = $util.emptyArray;
    
        /**
         * Creates a new CVoiceChat_AllMembersStatus_Notification instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_AllMembersStatus_Notification
         * @static
         * @param {ICVoiceChat_AllMembersStatus_Notification=} [properties] Properties to set
         * @returns {CVoiceChat_AllMembersStatus_Notification} CVoiceChat_AllMembersStatus_Notification instance
         */
        CVoiceChat_AllMembersStatus_Notification.create = function create(properties) {
            return new CVoiceChat_AllMembersStatus_Notification(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_AllMembersStatus_Notification message. Does not implicitly {@link CVoiceChat_AllMembersStatus_Notification.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_AllMembersStatus_Notification
         * @static
         * @param {ICVoiceChat_AllMembersStatus_Notification} message CVoiceChat_AllMembersStatus_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_AllMembersStatus_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.voice_chatid);
            if (message.users != null && message.users.length)
                for (var i = 0; i < message.users.length; ++i)
                    $root.CVoiceChat_UserVoiceStatus_Notification.encode(message.users[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_AllMembersStatus_Notification message, length delimited. Does not implicitly {@link CVoiceChat_AllMembersStatus_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_AllMembersStatus_Notification
         * @static
         * @param {ICVoiceChat_AllMembersStatus_Notification} message CVoiceChat_AllMembersStatus_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_AllMembersStatus_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_AllMembersStatus_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_AllMembersStatus_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_AllMembersStatus_Notification} CVoiceChat_AllMembersStatus_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_AllMembersStatus_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_AllMembersStatus_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.voice_chatid = reader.fixed64();
                    break;
                case 2:
                    if (!(message.users && message.users.length))
                        message.users = [];
                    message.users.push($root.CVoiceChat_UserVoiceStatus_Notification.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_AllMembersStatus_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_AllMembersStatus_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_AllMembersStatus_Notification} CVoiceChat_AllMembersStatus_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_AllMembersStatus_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_AllMembersStatus_Notification message.
         * @function verify
         * @memberof CVoiceChat_AllMembersStatus_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_AllMembersStatus_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (!$util.isInteger(message.voice_chatid) && !(message.voice_chatid && $util.isInteger(message.voice_chatid.low) && $util.isInteger(message.voice_chatid.high)))
                    return "voice_chatid: integer|Long expected";
            if (message.users != null && message.hasOwnProperty("users")) {
                if (!Array.isArray(message.users))
                    return "users: array expected";
                for (var i = 0; i < message.users.length; ++i) {
                    var error = $root.CVoiceChat_UserVoiceStatus_Notification.verify(message.users[i]);
                    if (error)
                        return "users." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CVoiceChat_AllMembersStatus_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_AllMembersStatus_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_AllMembersStatus_Notification} CVoiceChat_AllMembersStatus_Notification
         */
        CVoiceChat_AllMembersStatus_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_AllMembersStatus_Notification)
                return object;
            var message = new $root.CVoiceChat_AllMembersStatus_Notification();
            if (object.voice_chatid != null)
                if ($util.Long)
                    (message.voice_chatid = $util.Long.fromValue(object.voice_chatid)).unsigned = false;
                else if (typeof object.voice_chatid === "string")
                    message.voice_chatid = parseInt(object.voice_chatid, 10);
                else if (typeof object.voice_chatid === "number")
                    message.voice_chatid = object.voice_chatid;
                else if (typeof object.voice_chatid === "object")
                    message.voice_chatid = new $util.LongBits(object.voice_chatid.low >>> 0, object.voice_chatid.high >>> 0).toNumber();
            if (object.users) {
                if (!Array.isArray(object.users))
                    throw TypeError(".CVoiceChat_AllMembersStatus_Notification.users: array expected");
                message.users = [];
                for (var i = 0; i < object.users.length; ++i) {
                    if (typeof object.users[i] !== "object")
                        throw TypeError(".CVoiceChat_AllMembersStatus_Notification.users: object expected");
                    message.users[i] = $root.CVoiceChat_UserVoiceStatus_Notification.fromObject(object.users[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_AllMembersStatus_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_AllMembersStatus_Notification
         * @static
         * @param {CVoiceChat_AllMembersStatus_Notification} message CVoiceChat_AllMembersStatus_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_AllMembersStatus_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.users = [];
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.voice_chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.voice_chatid = options.longs === String ? "0" : 0;
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (typeof message.voice_chatid === "number")
                    object.voice_chatid = options.longs === String ? String(message.voice_chatid) : message.voice_chatid;
                else
                    object.voice_chatid = options.longs === String ? $util.Long.prototype.toString.call(message.voice_chatid) : options.longs === Number ? new $util.LongBits(message.voice_chatid.low >>> 0, message.voice_chatid.high >>> 0).toNumber() : message.voice_chatid;
            if (message.users && message.users.length) {
                object.users = [];
                for (var j = 0; j < message.users.length; ++j)
                    object.users[j] = $root.CVoiceChat_UserVoiceStatus_Notification.toObject(message.users[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CVoiceChat_AllMembersStatus_Notification to JSON.
         * @function toJSON
         * @memberof CVoiceChat_AllMembersStatus_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_AllMembersStatus_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_AllMembersStatus_Notification;
    })();
    
    $root.CVoiceChat_UpdateVoiceChatWebRTCData_Request = (function() {
    
        /**
         * Properties of a CVoiceChat_UpdateVoiceChatWebRTCData_Request.
         * @exports ICVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @interface ICVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @property {number|Long|null} [voice_chatid] CVoiceChat_UpdateVoiceChatWebRTCData_Request voice_chatid
         * @property {number|null} [ip_webrtc_server] CVoiceChat_UpdateVoiceChatWebRTCData_Request ip_webrtc_server
         * @property {number|null} [port_webrtc_server] CVoiceChat_UpdateVoiceChatWebRTCData_Request port_webrtc_server
         * @property {number|null} [ip_webrtc_client] CVoiceChat_UpdateVoiceChatWebRTCData_Request ip_webrtc_client
         * @property {number|null} [port_webrtc_client] CVoiceChat_UpdateVoiceChatWebRTCData_Request port_webrtc_client
         * @property {number|null} [ssrc_my_sending_stream] CVoiceChat_UpdateVoiceChatWebRTCData_Request ssrc_my_sending_stream
         * @property {string|null} [user_agent] CVoiceChat_UpdateVoiceChatWebRTCData_Request user_agent
         * @property {boolean|null} [has_audio_worklets_support] CVoiceChat_UpdateVoiceChatWebRTCData_Request has_audio_worklets_support
         */
    
        /**
         * Constructs a new CVoiceChat_UpdateVoiceChatWebRTCData_Request.
         * @exports CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @classdesc Represents a CVoiceChat_UpdateVoiceChatWebRTCData_Request.
         * @implements ICVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @constructor
         * @param {ICVoiceChat_UpdateVoiceChatWebRTCData_Request=} [properties] Properties to set
         */
        function CVoiceChat_UpdateVoiceChatWebRTCData_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_UpdateVoiceChatWebRTCData_Request voice_chatid.
         * @member {number|Long} voice_chatid
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @instance
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.prototype.voice_chatid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_UpdateVoiceChatWebRTCData_Request ip_webrtc_server.
         * @member {number} ip_webrtc_server
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @instance
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.prototype.ip_webrtc_server = 0;
    
        /**
         * CVoiceChat_UpdateVoiceChatWebRTCData_Request port_webrtc_server.
         * @member {number} port_webrtc_server
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @instance
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.prototype.port_webrtc_server = 0;
    
        /**
         * CVoiceChat_UpdateVoiceChatWebRTCData_Request ip_webrtc_client.
         * @member {number} ip_webrtc_client
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @instance
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.prototype.ip_webrtc_client = 0;
    
        /**
         * CVoiceChat_UpdateVoiceChatWebRTCData_Request port_webrtc_client.
         * @member {number} port_webrtc_client
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @instance
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.prototype.port_webrtc_client = 0;
    
        /**
         * CVoiceChat_UpdateVoiceChatWebRTCData_Request ssrc_my_sending_stream.
         * @member {number} ssrc_my_sending_stream
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @instance
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.prototype.ssrc_my_sending_stream = 0;
    
        /**
         * CVoiceChat_UpdateVoiceChatWebRTCData_Request user_agent.
         * @member {string} user_agent
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @instance
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.prototype.user_agent = "";
    
        /**
         * CVoiceChat_UpdateVoiceChatWebRTCData_Request has_audio_worklets_support.
         * @member {boolean} has_audio_worklets_support
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @instance
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.prototype.has_audio_worklets_support = false;
    
        /**
         * Creates a new CVoiceChat_UpdateVoiceChatWebRTCData_Request instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @static
         * @param {ICVoiceChat_UpdateVoiceChatWebRTCData_Request=} [properties] Properties to set
         * @returns {CVoiceChat_UpdateVoiceChatWebRTCData_Request} CVoiceChat_UpdateVoiceChatWebRTCData_Request instance
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.create = function create(properties) {
            return new CVoiceChat_UpdateVoiceChatWebRTCData_Request(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_UpdateVoiceChatWebRTCData_Request message. Does not implicitly {@link CVoiceChat_UpdateVoiceChatWebRTCData_Request.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @static
         * @param {ICVoiceChat_UpdateVoiceChatWebRTCData_Request} message CVoiceChat_UpdateVoiceChatWebRTCData_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.voice_chatid);
            if (message.ip_webrtc_server != null && message.hasOwnProperty("ip_webrtc_server"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ip_webrtc_server);
            if (message.port_webrtc_server != null && message.hasOwnProperty("port_webrtc_server"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.port_webrtc_server);
            if (message.ip_webrtc_client != null && message.hasOwnProperty("ip_webrtc_client"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.ip_webrtc_client);
            if (message.port_webrtc_client != null && message.hasOwnProperty("port_webrtc_client"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.port_webrtc_client);
            if (message.ssrc_my_sending_stream != null && message.hasOwnProperty("ssrc_my_sending_stream"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ssrc_my_sending_stream);
            if (message.user_agent != null && message.hasOwnProperty("user_agent"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.user_agent);
            if (message.has_audio_worklets_support != null && message.hasOwnProperty("has_audio_worklets_support"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.has_audio_worklets_support);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_UpdateVoiceChatWebRTCData_Request message, length delimited. Does not implicitly {@link CVoiceChat_UpdateVoiceChatWebRTCData_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @static
         * @param {ICVoiceChat_UpdateVoiceChatWebRTCData_Request} message CVoiceChat_UpdateVoiceChatWebRTCData_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_UpdateVoiceChatWebRTCData_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_UpdateVoiceChatWebRTCData_Request} CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_UpdateVoiceChatWebRTCData_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.voice_chatid = reader.fixed64();
                    break;
                case 2:
                    message.ip_webrtc_server = reader.uint32();
                    break;
                case 3:
                    message.port_webrtc_server = reader.uint32();
                    break;
                case 4:
                    message.ip_webrtc_client = reader.uint32();
                    break;
                case 5:
                    message.port_webrtc_client = reader.uint32();
                    break;
                case 6:
                    message.ssrc_my_sending_stream = reader.uint32();
                    break;
                case 7:
                    message.user_agent = reader.string();
                    break;
                case 8:
                    message.has_audio_worklets_support = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_UpdateVoiceChatWebRTCData_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_UpdateVoiceChatWebRTCData_Request} CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_UpdateVoiceChatWebRTCData_Request message.
         * @function verify
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (!$util.isInteger(message.voice_chatid) && !(message.voice_chatid && $util.isInteger(message.voice_chatid.low) && $util.isInteger(message.voice_chatid.high)))
                    return "voice_chatid: integer|Long expected";
            if (message.ip_webrtc_server != null && message.hasOwnProperty("ip_webrtc_server"))
                if (!$util.isInteger(message.ip_webrtc_server))
                    return "ip_webrtc_server: integer expected";
            if (message.port_webrtc_server != null && message.hasOwnProperty("port_webrtc_server"))
                if (!$util.isInteger(message.port_webrtc_server))
                    return "port_webrtc_server: integer expected";
            if (message.ip_webrtc_client != null && message.hasOwnProperty("ip_webrtc_client"))
                if (!$util.isInteger(message.ip_webrtc_client))
                    return "ip_webrtc_client: integer expected";
            if (message.port_webrtc_client != null && message.hasOwnProperty("port_webrtc_client"))
                if (!$util.isInteger(message.port_webrtc_client))
                    return "port_webrtc_client: integer expected";
            if (message.ssrc_my_sending_stream != null && message.hasOwnProperty("ssrc_my_sending_stream"))
                if (!$util.isInteger(message.ssrc_my_sending_stream))
                    return "ssrc_my_sending_stream: integer expected";
            if (message.user_agent != null && message.hasOwnProperty("user_agent"))
                if (!$util.isString(message.user_agent))
                    return "user_agent: string expected";
            if (message.has_audio_worklets_support != null && message.hasOwnProperty("has_audio_worklets_support"))
                if (typeof message.has_audio_worklets_support !== "boolean")
                    return "has_audio_worklets_support: boolean expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_UpdateVoiceChatWebRTCData_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_UpdateVoiceChatWebRTCData_Request} CVoiceChat_UpdateVoiceChatWebRTCData_Request
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_UpdateVoiceChatWebRTCData_Request)
                return object;
            var message = new $root.CVoiceChat_UpdateVoiceChatWebRTCData_Request();
            if (object.voice_chatid != null)
                if ($util.Long)
                    (message.voice_chatid = $util.Long.fromValue(object.voice_chatid)).unsigned = false;
                else if (typeof object.voice_chatid === "string")
                    message.voice_chatid = parseInt(object.voice_chatid, 10);
                else if (typeof object.voice_chatid === "number")
                    message.voice_chatid = object.voice_chatid;
                else if (typeof object.voice_chatid === "object")
                    message.voice_chatid = new $util.LongBits(object.voice_chatid.low >>> 0, object.voice_chatid.high >>> 0).toNumber();
            if (object.ip_webrtc_server != null)
                message.ip_webrtc_server = object.ip_webrtc_server >>> 0;
            if (object.port_webrtc_server != null)
                message.port_webrtc_server = object.port_webrtc_server >>> 0;
            if (object.ip_webrtc_client != null)
                message.ip_webrtc_client = object.ip_webrtc_client >>> 0;
            if (object.port_webrtc_client != null)
                message.port_webrtc_client = object.port_webrtc_client >>> 0;
            if (object.ssrc_my_sending_stream != null)
                message.ssrc_my_sending_stream = object.ssrc_my_sending_stream >>> 0;
            if (object.user_agent != null)
                message.user_agent = String(object.user_agent);
            if (object.has_audio_worklets_support != null)
                message.has_audio_worklets_support = Boolean(object.has_audio_worklets_support);
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_UpdateVoiceChatWebRTCData_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @static
         * @param {CVoiceChat_UpdateVoiceChatWebRTCData_Request} message CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.voice_chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.voice_chatid = options.longs === String ? "0" : 0;
                object.ip_webrtc_server = 0;
                object.port_webrtc_server = 0;
                object.ip_webrtc_client = 0;
                object.port_webrtc_client = 0;
                object.ssrc_my_sending_stream = 0;
                object.user_agent = "";
                object.has_audio_worklets_support = false;
            }
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (typeof message.voice_chatid === "number")
                    object.voice_chatid = options.longs === String ? String(message.voice_chatid) : message.voice_chatid;
                else
                    object.voice_chatid = options.longs === String ? $util.Long.prototype.toString.call(message.voice_chatid) : options.longs === Number ? new $util.LongBits(message.voice_chatid.low >>> 0, message.voice_chatid.high >>> 0).toNumber() : message.voice_chatid;
            if (message.ip_webrtc_server != null && message.hasOwnProperty("ip_webrtc_server"))
                object.ip_webrtc_server = message.ip_webrtc_server;
            if (message.port_webrtc_server != null && message.hasOwnProperty("port_webrtc_server"))
                object.port_webrtc_server = message.port_webrtc_server;
            if (message.ip_webrtc_client != null && message.hasOwnProperty("ip_webrtc_client"))
                object.ip_webrtc_client = message.ip_webrtc_client;
            if (message.port_webrtc_client != null && message.hasOwnProperty("port_webrtc_client"))
                object.port_webrtc_client = message.port_webrtc_client;
            if (message.ssrc_my_sending_stream != null && message.hasOwnProperty("ssrc_my_sending_stream"))
                object.ssrc_my_sending_stream = message.ssrc_my_sending_stream;
            if (message.user_agent != null && message.hasOwnProperty("user_agent"))
                object.user_agent = message.user_agent;
            if (message.has_audio_worklets_support != null && message.hasOwnProperty("has_audio_worklets_support"))
                object.has_audio_worklets_support = message.has_audio_worklets_support;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_UpdateVoiceChatWebRTCData_Request to JSON.
         * @function toJSON
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_UpdateVoiceChatWebRTCData_Request;
    })();
    
    $root.CVoiceChat_UpdateVoiceChatWebRTCData_Response = (function() {
    
        /**
         * Properties of a CVoiceChat_UpdateVoiceChatWebRTCData_Response.
         * @exports ICVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @interface ICVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @property {boolean|null} [send_client_voice_logs] CVoiceChat_UpdateVoiceChatWebRTCData_Response send_client_voice_logs
         */
    
        /**
         * Constructs a new CVoiceChat_UpdateVoiceChatWebRTCData_Response.
         * @exports CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @classdesc Represents a CVoiceChat_UpdateVoiceChatWebRTCData_Response.
         * @implements ICVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @constructor
         * @param {ICVoiceChat_UpdateVoiceChatWebRTCData_Response=} [properties] Properties to set
         */
        function CVoiceChat_UpdateVoiceChatWebRTCData_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_UpdateVoiceChatWebRTCData_Response send_client_voice_logs.
         * @member {boolean} send_client_voice_logs
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @instance
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Response.prototype.send_client_voice_logs = false;
    
        /**
         * Creates a new CVoiceChat_UpdateVoiceChatWebRTCData_Response instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @static
         * @param {ICVoiceChat_UpdateVoiceChatWebRTCData_Response=} [properties] Properties to set
         * @returns {CVoiceChat_UpdateVoiceChatWebRTCData_Response} CVoiceChat_UpdateVoiceChatWebRTCData_Response instance
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Response.create = function create(properties) {
            return new CVoiceChat_UpdateVoiceChatWebRTCData_Response(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_UpdateVoiceChatWebRTCData_Response message. Does not implicitly {@link CVoiceChat_UpdateVoiceChatWebRTCData_Response.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @static
         * @param {ICVoiceChat_UpdateVoiceChatWebRTCData_Response} message CVoiceChat_UpdateVoiceChatWebRTCData_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.send_client_voice_logs != null && message.hasOwnProperty("send_client_voice_logs"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.send_client_voice_logs);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_UpdateVoiceChatWebRTCData_Response message, length delimited. Does not implicitly {@link CVoiceChat_UpdateVoiceChatWebRTCData_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @static
         * @param {ICVoiceChat_UpdateVoiceChatWebRTCData_Response} message CVoiceChat_UpdateVoiceChatWebRTCData_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_UpdateVoiceChatWebRTCData_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_UpdateVoiceChatWebRTCData_Response} CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_UpdateVoiceChatWebRTCData_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.send_client_voice_logs = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_UpdateVoiceChatWebRTCData_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_UpdateVoiceChatWebRTCData_Response} CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_UpdateVoiceChatWebRTCData_Response message.
         * @function verify
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.send_client_voice_logs != null && message.hasOwnProperty("send_client_voice_logs"))
                if (typeof message.send_client_voice_logs !== "boolean")
                    return "send_client_voice_logs: boolean expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_UpdateVoiceChatWebRTCData_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_UpdateVoiceChatWebRTCData_Response} CVoiceChat_UpdateVoiceChatWebRTCData_Response
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_UpdateVoiceChatWebRTCData_Response)
                return object;
            var message = new $root.CVoiceChat_UpdateVoiceChatWebRTCData_Response();
            if (object.send_client_voice_logs != null)
                message.send_client_voice_logs = Boolean(object.send_client_voice_logs);
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_UpdateVoiceChatWebRTCData_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @static
         * @param {CVoiceChat_UpdateVoiceChatWebRTCData_Response} message CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.send_client_voice_logs = false;
            if (message.send_client_voice_logs != null && message.hasOwnProperty("send_client_voice_logs"))
                object.send_client_voice_logs = message.send_client_voice_logs;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_UpdateVoiceChatWebRTCData_Response to JSON.
         * @function toJSON
         * @memberof CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_UpdateVoiceChatWebRTCData_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_UpdateVoiceChatWebRTCData_Response;
    })();
    
    $root.CVoiceChat_UploadClientVoiceChatLogs_Request = (function() {
    
        /**
         * Properties of a CVoiceChat_UploadClientVoiceChatLogs_Request.
         * @exports ICVoiceChat_UploadClientVoiceChatLogs_Request
         * @interface ICVoiceChat_UploadClientVoiceChatLogs_Request
         * @property {number|Long|null} [voice_chatid] CVoiceChat_UploadClientVoiceChatLogs_Request voice_chatid
         * @property {string|null} [client_voice_logs_new_lines] CVoiceChat_UploadClientVoiceChatLogs_Request client_voice_logs_new_lines
         */
    
        /**
         * Constructs a new CVoiceChat_UploadClientVoiceChatLogs_Request.
         * @exports CVoiceChat_UploadClientVoiceChatLogs_Request
         * @classdesc Represents a CVoiceChat_UploadClientVoiceChatLogs_Request.
         * @implements ICVoiceChat_UploadClientVoiceChatLogs_Request
         * @constructor
         * @param {ICVoiceChat_UploadClientVoiceChatLogs_Request=} [properties] Properties to set
         */
        function CVoiceChat_UploadClientVoiceChatLogs_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_UploadClientVoiceChatLogs_Request voice_chatid.
         * @member {number|Long} voice_chatid
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Request
         * @instance
         */
        CVoiceChat_UploadClientVoiceChatLogs_Request.prototype.voice_chatid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_UploadClientVoiceChatLogs_Request client_voice_logs_new_lines.
         * @member {string} client_voice_logs_new_lines
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Request
         * @instance
         */
        CVoiceChat_UploadClientVoiceChatLogs_Request.prototype.client_voice_logs_new_lines = "";
    
        /**
         * Creates a new CVoiceChat_UploadClientVoiceChatLogs_Request instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Request
         * @static
         * @param {ICVoiceChat_UploadClientVoiceChatLogs_Request=} [properties] Properties to set
         * @returns {CVoiceChat_UploadClientVoiceChatLogs_Request} CVoiceChat_UploadClientVoiceChatLogs_Request instance
         */
        CVoiceChat_UploadClientVoiceChatLogs_Request.create = function create(properties) {
            return new CVoiceChat_UploadClientVoiceChatLogs_Request(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_UploadClientVoiceChatLogs_Request message. Does not implicitly {@link CVoiceChat_UploadClientVoiceChatLogs_Request.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Request
         * @static
         * @param {ICVoiceChat_UploadClientVoiceChatLogs_Request} message CVoiceChat_UploadClientVoiceChatLogs_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UploadClientVoiceChatLogs_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.voice_chatid);
            if (message.client_voice_logs_new_lines != null && message.hasOwnProperty("client_voice_logs_new_lines"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.client_voice_logs_new_lines);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_UploadClientVoiceChatLogs_Request message, length delimited. Does not implicitly {@link CVoiceChat_UploadClientVoiceChatLogs_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Request
         * @static
         * @param {ICVoiceChat_UploadClientVoiceChatLogs_Request} message CVoiceChat_UploadClientVoiceChatLogs_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UploadClientVoiceChatLogs_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_UploadClientVoiceChatLogs_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_UploadClientVoiceChatLogs_Request} CVoiceChat_UploadClientVoiceChatLogs_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UploadClientVoiceChatLogs_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_UploadClientVoiceChatLogs_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.voice_chatid = reader.fixed64();
                    break;
                case 2:
                    message.client_voice_logs_new_lines = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_UploadClientVoiceChatLogs_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_UploadClientVoiceChatLogs_Request} CVoiceChat_UploadClientVoiceChatLogs_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UploadClientVoiceChatLogs_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_UploadClientVoiceChatLogs_Request message.
         * @function verify
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_UploadClientVoiceChatLogs_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (!$util.isInteger(message.voice_chatid) && !(message.voice_chatid && $util.isInteger(message.voice_chatid.low) && $util.isInteger(message.voice_chatid.high)))
                    return "voice_chatid: integer|Long expected";
            if (message.client_voice_logs_new_lines != null && message.hasOwnProperty("client_voice_logs_new_lines"))
                if (!$util.isString(message.client_voice_logs_new_lines))
                    return "client_voice_logs_new_lines: string expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_UploadClientVoiceChatLogs_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_UploadClientVoiceChatLogs_Request} CVoiceChat_UploadClientVoiceChatLogs_Request
         */
        CVoiceChat_UploadClientVoiceChatLogs_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_UploadClientVoiceChatLogs_Request)
                return object;
            var message = new $root.CVoiceChat_UploadClientVoiceChatLogs_Request();
            if (object.voice_chatid != null)
                if ($util.Long)
                    (message.voice_chatid = $util.Long.fromValue(object.voice_chatid)).unsigned = false;
                else if (typeof object.voice_chatid === "string")
                    message.voice_chatid = parseInt(object.voice_chatid, 10);
                else if (typeof object.voice_chatid === "number")
                    message.voice_chatid = object.voice_chatid;
                else if (typeof object.voice_chatid === "object")
                    message.voice_chatid = new $util.LongBits(object.voice_chatid.low >>> 0, object.voice_chatid.high >>> 0).toNumber();
            if (object.client_voice_logs_new_lines != null)
                message.client_voice_logs_new_lines = String(object.client_voice_logs_new_lines);
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_UploadClientVoiceChatLogs_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Request
         * @static
         * @param {CVoiceChat_UploadClientVoiceChatLogs_Request} message CVoiceChat_UploadClientVoiceChatLogs_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_UploadClientVoiceChatLogs_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.voice_chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.voice_chatid = options.longs === String ? "0" : 0;
                object.client_voice_logs_new_lines = "";
            }
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (typeof message.voice_chatid === "number")
                    object.voice_chatid = options.longs === String ? String(message.voice_chatid) : message.voice_chatid;
                else
                    object.voice_chatid = options.longs === String ? $util.Long.prototype.toString.call(message.voice_chatid) : options.longs === Number ? new $util.LongBits(message.voice_chatid.low >>> 0, message.voice_chatid.high >>> 0).toNumber() : message.voice_chatid;
            if (message.client_voice_logs_new_lines != null && message.hasOwnProperty("client_voice_logs_new_lines"))
                object.client_voice_logs_new_lines = message.client_voice_logs_new_lines;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_UploadClientVoiceChatLogs_Request to JSON.
         * @function toJSON
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_UploadClientVoiceChatLogs_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_UploadClientVoiceChatLogs_Request;
    })();
    
    $root.CVoiceChat_UploadClientVoiceChatLogs_Response = (function() {
    
        /**
         * Properties of a CVoiceChat_UploadClientVoiceChatLogs_Response.
         * @exports ICVoiceChat_UploadClientVoiceChatLogs_Response
         * @interface ICVoiceChat_UploadClientVoiceChatLogs_Response
         */
    
        /**
         * Constructs a new CVoiceChat_UploadClientVoiceChatLogs_Response.
         * @exports CVoiceChat_UploadClientVoiceChatLogs_Response
         * @classdesc Represents a CVoiceChat_UploadClientVoiceChatLogs_Response.
         * @implements ICVoiceChat_UploadClientVoiceChatLogs_Response
         * @constructor
         * @param {ICVoiceChat_UploadClientVoiceChatLogs_Response=} [properties] Properties to set
         */
        function CVoiceChat_UploadClientVoiceChatLogs_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CVoiceChat_UploadClientVoiceChatLogs_Response instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Response
         * @static
         * @param {ICVoiceChat_UploadClientVoiceChatLogs_Response=} [properties] Properties to set
         * @returns {CVoiceChat_UploadClientVoiceChatLogs_Response} CVoiceChat_UploadClientVoiceChatLogs_Response instance
         */
        CVoiceChat_UploadClientVoiceChatLogs_Response.create = function create(properties) {
            return new CVoiceChat_UploadClientVoiceChatLogs_Response(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_UploadClientVoiceChatLogs_Response message. Does not implicitly {@link CVoiceChat_UploadClientVoiceChatLogs_Response.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Response
         * @static
         * @param {ICVoiceChat_UploadClientVoiceChatLogs_Response} message CVoiceChat_UploadClientVoiceChatLogs_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UploadClientVoiceChatLogs_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_UploadClientVoiceChatLogs_Response message, length delimited. Does not implicitly {@link CVoiceChat_UploadClientVoiceChatLogs_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Response
         * @static
         * @param {ICVoiceChat_UploadClientVoiceChatLogs_Response} message CVoiceChat_UploadClientVoiceChatLogs_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UploadClientVoiceChatLogs_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_UploadClientVoiceChatLogs_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_UploadClientVoiceChatLogs_Response} CVoiceChat_UploadClientVoiceChatLogs_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UploadClientVoiceChatLogs_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_UploadClientVoiceChatLogs_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_UploadClientVoiceChatLogs_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_UploadClientVoiceChatLogs_Response} CVoiceChat_UploadClientVoiceChatLogs_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UploadClientVoiceChatLogs_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_UploadClientVoiceChatLogs_Response message.
         * @function verify
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_UploadClientVoiceChatLogs_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_UploadClientVoiceChatLogs_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_UploadClientVoiceChatLogs_Response} CVoiceChat_UploadClientVoiceChatLogs_Response
         */
        CVoiceChat_UploadClientVoiceChatLogs_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_UploadClientVoiceChatLogs_Response)
                return object;
            return new $root.CVoiceChat_UploadClientVoiceChatLogs_Response();
        };
    
        /**
         * Creates a plain object from a CVoiceChat_UploadClientVoiceChatLogs_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Response
         * @static
         * @param {CVoiceChat_UploadClientVoiceChatLogs_Response} message CVoiceChat_UploadClientVoiceChatLogs_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_UploadClientVoiceChatLogs_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CVoiceChat_UploadClientVoiceChatLogs_Response to JSON.
         * @function toJSON
         * @memberof CVoiceChat_UploadClientVoiceChatLogs_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_UploadClientVoiceChatLogs_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_UploadClientVoiceChatLogs_Response;
    })();
    
    $root.CVoiceChat_LeaveVoiceChat_Response = (function() {
    
        /**
         * Properties of a CVoiceChat_LeaveVoiceChat_Response.
         * @exports ICVoiceChat_LeaveVoiceChat_Response
         * @interface ICVoiceChat_LeaveVoiceChat_Response
         */
    
        /**
         * Constructs a new CVoiceChat_LeaveVoiceChat_Response.
         * @exports CVoiceChat_LeaveVoiceChat_Response
         * @classdesc Represents a CVoiceChat_LeaveVoiceChat_Response.
         * @implements ICVoiceChat_LeaveVoiceChat_Response
         * @constructor
         * @param {ICVoiceChat_LeaveVoiceChat_Response=} [properties] Properties to set
         */
        function CVoiceChat_LeaveVoiceChat_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CVoiceChat_LeaveVoiceChat_Response instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_LeaveVoiceChat_Response
         * @static
         * @param {ICVoiceChat_LeaveVoiceChat_Response=} [properties] Properties to set
         * @returns {CVoiceChat_LeaveVoiceChat_Response} CVoiceChat_LeaveVoiceChat_Response instance
         */
        CVoiceChat_LeaveVoiceChat_Response.create = function create(properties) {
            return new CVoiceChat_LeaveVoiceChat_Response(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_LeaveVoiceChat_Response message. Does not implicitly {@link CVoiceChat_LeaveVoiceChat_Response.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_LeaveVoiceChat_Response
         * @static
         * @param {ICVoiceChat_LeaveVoiceChat_Response} message CVoiceChat_LeaveVoiceChat_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_LeaveVoiceChat_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_LeaveVoiceChat_Response message, length delimited. Does not implicitly {@link CVoiceChat_LeaveVoiceChat_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_LeaveVoiceChat_Response
         * @static
         * @param {ICVoiceChat_LeaveVoiceChat_Response} message CVoiceChat_LeaveVoiceChat_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_LeaveVoiceChat_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_LeaveVoiceChat_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_LeaveVoiceChat_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_LeaveVoiceChat_Response} CVoiceChat_LeaveVoiceChat_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_LeaveVoiceChat_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_LeaveVoiceChat_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_LeaveVoiceChat_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_LeaveVoiceChat_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_LeaveVoiceChat_Response} CVoiceChat_LeaveVoiceChat_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_LeaveVoiceChat_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_LeaveVoiceChat_Response message.
         * @function verify
         * @memberof CVoiceChat_LeaveVoiceChat_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_LeaveVoiceChat_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_LeaveVoiceChat_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_LeaveVoiceChat_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_LeaveVoiceChat_Response} CVoiceChat_LeaveVoiceChat_Response
         */
        CVoiceChat_LeaveVoiceChat_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_LeaveVoiceChat_Response)
                return object;
            return new $root.CVoiceChat_LeaveVoiceChat_Response();
        };
    
        /**
         * Creates a plain object from a CVoiceChat_LeaveVoiceChat_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_LeaveVoiceChat_Response
         * @static
         * @param {CVoiceChat_LeaveVoiceChat_Response} message CVoiceChat_LeaveVoiceChat_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_LeaveVoiceChat_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CVoiceChat_LeaveVoiceChat_Response to JSON.
         * @function toJSON
         * @memberof CVoiceChat_LeaveVoiceChat_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_LeaveVoiceChat_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_LeaveVoiceChat_Response;
    })();
    
    $root.CVoiceChat_UserLeftVoiceChat_Notification = (function() {
    
        /**
         * Properties of a CVoiceChat_UserLeftVoiceChat_Notification.
         * @exports ICVoiceChat_UserLeftVoiceChat_Notification
         * @interface ICVoiceChat_UserLeftVoiceChat_Notification
         * @property {number|Long|null} [voice_chatid] CVoiceChat_UserLeftVoiceChat_Notification voice_chatid
         * @property {number|Long|null} [user_steamid] CVoiceChat_UserLeftVoiceChat_Notification user_steamid
         * @property {number|Long|null} [chatid] CVoiceChat_UserLeftVoiceChat_Notification chatid
         * @property {number|Long|null} [one_on_one_steamid_lower] CVoiceChat_UserLeftVoiceChat_Notification one_on_one_steamid_lower
         * @property {number|Long|null} [one_on_one_steamid_higher] CVoiceChat_UserLeftVoiceChat_Notification one_on_one_steamid_higher
         * @property {number|Long|null} [chat_group_id] CVoiceChat_UserLeftVoiceChat_Notification chat_group_id
         * @property {number|null} [user_sessionid] CVoiceChat_UserLeftVoiceChat_Notification user_sessionid
         */
    
        /**
         * Constructs a new CVoiceChat_UserLeftVoiceChat_Notification.
         * @exports CVoiceChat_UserLeftVoiceChat_Notification
         * @classdesc Represents a CVoiceChat_UserLeftVoiceChat_Notification.
         * @implements ICVoiceChat_UserLeftVoiceChat_Notification
         * @constructor
         * @param {ICVoiceChat_UserLeftVoiceChat_Notification=} [properties] Properties to set
         */
        function CVoiceChat_UserLeftVoiceChat_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_UserLeftVoiceChat_Notification voice_chatid.
         * @member {number|Long} voice_chatid
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserLeftVoiceChat_Notification.prototype.voice_chatid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_UserLeftVoiceChat_Notification user_steamid.
         * @member {number|Long} user_steamid
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserLeftVoiceChat_Notification.prototype.user_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_UserLeftVoiceChat_Notification chatid.
         * @member {number|Long} chatid
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserLeftVoiceChat_Notification.prototype.chatid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CVoiceChat_UserLeftVoiceChat_Notification one_on_one_steamid_lower.
         * @member {number|Long} one_on_one_steamid_lower
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserLeftVoiceChat_Notification.prototype.one_on_one_steamid_lower = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_UserLeftVoiceChat_Notification one_on_one_steamid_higher.
         * @member {number|Long} one_on_one_steamid_higher
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserLeftVoiceChat_Notification.prototype.one_on_one_steamid_higher = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_UserLeftVoiceChat_Notification chat_group_id.
         * @member {number|Long} chat_group_id
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserLeftVoiceChat_Notification.prototype.chat_group_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CVoiceChat_UserLeftVoiceChat_Notification user_sessionid.
         * @member {number} user_sessionid
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @instance
         */
        CVoiceChat_UserLeftVoiceChat_Notification.prototype.user_sessionid = 0;
    
        /**
         * Creates a new CVoiceChat_UserLeftVoiceChat_Notification instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @static
         * @param {ICVoiceChat_UserLeftVoiceChat_Notification=} [properties] Properties to set
         * @returns {CVoiceChat_UserLeftVoiceChat_Notification} CVoiceChat_UserLeftVoiceChat_Notification instance
         */
        CVoiceChat_UserLeftVoiceChat_Notification.create = function create(properties) {
            return new CVoiceChat_UserLeftVoiceChat_Notification(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_UserLeftVoiceChat_Notification message. Does not implicitly {@link CVoiceChat_UserLeftVoiceChat_Notification.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @static
         * @param {ICVoiceChat_UserLeftVoiceChat_Notification} message CVoiceChat_UserLeftVoiceChat_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UserLeftVoiceChat_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.voice_chatid);
            if (message.user_steamid != null && message.hasOwnProperty("user_steamid"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.user_steamid);
            if (message.chatid != null && message.hasOwnProperty("chatid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.chatid);
            if (message.one_on_one_steamid_lower != null && message.hasOwnProperty("one_on_one_steamid_lower"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.one_on_one_steamid_lower);
            if (message.one_on_one_steamid_higher != null && message.hasOwnProperty("one_on_one_steamid_higher"))
                writer.uint32(/* id 5, wireType 1 =*/41).fixed64(message.one_on_one_steamid_higher);
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.chat_group_id);
            if (message.user_sessionid != null && message.hasOwnProperty("user_sessionid"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.user_sessionid);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_UserLeftVoiceChat_Notification message, length delimited. Does not implicitly {@link CVoiceChat_UserLeftVoiceChat_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @static
         * @param {ICVoiceChat_UserLeftVoiceChat_Notification} message CVoiceChat_UserLeftVoiceChat_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_UserLeftVoiceChat_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_UserLeftVoiceChat_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_UserLeftVoiceChat_Notification} CVoiceChat_UserLeftVoiceChat_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UserLeftVoiceChat_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_UserLeftVoiceChat_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.voice_chatid = reader.fixed64();
                    break;
                case 2:
                    message.user_steamid = reader.fixed64();
                    break;
                case 3:
                    message.chatid = reader.uint64();
                    break;
                case 4:
                    message.one_on_one_steamid_lower = reader.fixed64();
                    break;
                case 5:
                    message.one_on_one_steamid_higher = reader.fixed64();
                    break;
                case 6:
                    message.chat_group_id = reader.uint64();
                    break;
                case 7:
                    message.user_sessionid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_UserLeftVoiceChat_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_UserLeftVoiceChat_Notification} CVoiceChat_UserLeftVoiceChat_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_UserLeftVoiceChat_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_UserLeftVoiceChat_Notification message.
         * @function verify
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_UserLeftVoiceChat_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (!$util.isInteger(message.voice_chatid) && !(message.voice_chatid && $util.isInteger(message.voice_chatid.low) && $util.isInteger(message.voice_chatid.high)))
                    return "voice_chatid: integer|Long expected";
            if (message.user_steamid != null && message.hasOwnProperty("user_steamid"))
                if (!$util.isInteger(message.user_steamid) && !(message.user_steamid && $util.isInteger(message.user_steamid.low) && $util.isInteger(message.user_steamid.high)))
                    return "user_steamid: integer|Long expected";
            if (message.chatid != null && message.hasOwnProperty("chatid"))
                if (!$util.isInteger(message.chatid) && !(message.chatid && $util.isInteger(message.chatid.low) && $util.isInteger(message.chatid.high)))
                    return "chatid: integer|Long expected";
            if (message.one_on_one_steamid_lower != null && message.hasOwnProperty("one_on_one_steamid_lower"))
                if (!$util.isInteger(message.one_on_one_steamid_lower) && !(message.one_on_one_steamid_lower && $util.isInteger(message.one_on_one_steamid_lower.low) && $util.isInteger(message.one_on_one_steamid_lower.high)))
                    return "one_on_one_steamid_lower: integer|Long expected";
            if (message.one_on_one_steamid_higher != null && message.hasOwnProperty("one_on_one_steamid_higher"))
                if (!$util.isInteger(message.one_on_one_steamid_higher) && !(message.one_on_one_steamid_higher && $util.isInteger(message.one_on_one_steamid_higher.low) && $util.isInteger(message.one_on_one_steamid_higher.high)))
                    return "one_on_one_steamid_higher: integer|Long expected";
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                if (!$util.isInteger(message.chat_group_id) && !(message.chat_group_id && $util.isInteger(message.chat_group_id.low) && $util.isInteger(message.chat_group_id.high)))
                    return "chat_group_id: integer|Long expected";
            if (message.user_sessionid != null && message.hasOwnProperty("user_sessionid"))
                if (!$util.isInteger(message.user_sessionid))
                    return "user_sessionid: integer expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_UserLeftVoiceChat_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_UserLeftVoiceChat_Notification} CVoiceChat_UserLeftVoiceChat_Notification
         */
        CVoiceChat_UserLeftVoiceChat_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_UserLeftVoiceChat_Notification)
                return object;
            var message = new $root.CVoiceChat_UserLeftVoiceChat_Notification();
            if (object.voice_chatid != null)
                if ($util.Long)
                    (message.voice_chatid = $util.Long.fromValue(object.voice_chatid)).unsigned = false;
                else if (typeof object.voice_chatid === "string")
                    message.voice_chatid = parseInt(object.voice_chatid, 10);
                else if (typeof object.voice_chatid === "number")
                    message.voice_chatid = object.voice_chatid;
                else if (typeof object.voice_chatid === "object")
                    message.voice_chatid = new $util.LongBits(object.voice_chatid.low >>> 0, object.voice_chatid.high >>> 0).toNumber();
            if (object.user_steamid != null)
                if ($util.Long)
                    (message.user_steamid = $util.Long.fromValue(object.user_steamid)).unsigned = false;
                else if (typeof object.user_steamid === "string")
                    message.user_steamid = parseInt(object.user_steamid, 10);
                else if (typeof object.user_steamid === "number")
                    message.user_steamid = object.user_steamid;
                else if (typeof object.user_steamid === "object")
                    message.user_steamid = new $util.LongBits(object.user_steamid.low >>> 0, object.user_steamid.high >>> 0).toNumber();
            if (object.chatid != null)
                if ($util.Long)
                    (message.chatid = $util.Long.fromValue(object.chatid)).unsigned = true;
                else if (typeof object.chatid === "string")
                    message.chatid = parseInt(object.chatid, 10);
                else if (typeof object.chatid === "number")
                    message.chatid = object.chatid;
                else if (typeof object.chatid === "object")
                    message.chatid = new $util.LongBits(object.chatid.low >>> 0, object.chatid.high >>> 0).toNumber(true);
            if (object.one_on_one_steamid_lower != null)
                if ($util.Long)
                    (message.one_on_one_steamid_lower = $util.Long.fromValue(object.one_on_one_steamid_lower)).unsigned = false;
                else if (typeof object.one_on_one_steamid_lower === "string")
                    message.one_on_one_steamid_lower = parseInt(object.one_on_one_steamid_lower, 10);
                else if (typeof object.one_on_one_steamid_lower === "number")
                    message.one_on_one_steamid_lower = object.one_on_one_steamid_lower;
                else if (typeof object.one_on_one_steamid_lower === "object")
                    message.one_on_one_steamid_lower = new $util.LongBits(object.one_on_one_steamid_lower.low >>> 0, object.one_on_one_steamid_lower.high >>> 0).toNumber();
            if (object.one_on_one_steamid_higher != null)
                if ($util.Long)
                    (message.one_on_one_steamid_higher = $util.Long.fromValue(object.one_on_one_steamid_higher)).unsigned = false;
                else if (typeof object.one_on_one_steamid_higher === "string")
                    message.one_on_one_steamid_higher = parseInt(object.one_on_one_steamid_higher, 10);
                else if (typeof object.one_on_one_steamid_higher === "number")
                    message.one_on_one_steamid_higher = object.one_on_one_steamid_higher;
                else if (typeof object.one_on_one_steamid_higher === "object")
                    message.one_on_one_steamid_higher = new $util.LongBits(object.one_on_one_steamid_higher.low >>> 0, object.one_on_one_steamid_higher.high >>> 0).toNumber();
            if (object.chat_group_id != null)
                if ($util.Long)
                    (message.chat_group_id = $util.Long.fromValue(object.chat_group_id)).unsigned = true;
                else if (typeof object.chat_group_id === "string")
                    message.chat_group_id = parseInt(object.chat_group_id, 10);
                else if (typeof object.chat_group_id === "number")
                    message.chat_group_id = object.chat_group_id;
                else if (typeof object.chat_group_id === "object")
                    message.chat_group_id = new $util.LongBits(object.chat_group_id.low >>> 0, object.chat_group_id.high >>> 0).toNumber(true);
            if (object.user_sessionid != null)
                message.user_sessionid = object.user_sessionid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_UserLeftVoiceChat_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @static
         * @param {CVoiceChat_UserLeftVoiceChat_Notification} message CVoiceChat_UserLeftVoiceChat_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_UserLeftVoiceChat_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.voice_chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.voice_chatid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.user_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.user_steamid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.chatid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.one_on_one_steamid_lower = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.one_on_one_steamid_lower = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.one_on_one_steamid_higher = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.one_on_one_steamid_higher = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.chat_group_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.chat_group_id = options.longs === String ? "0" : 0;
                object.user_sessionid = 0;
            }
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (typeof message.voice_chatid === "number")
                    object.voice_chatid = options.longs === String ? String(message.voice_chatid) : message.voice_chatid;
                else
                    object.voice_chatid = options.longs === String ? $util.Long.prototype.toString.call(message.voice_chatid) : options.longs === Number ? new $util.LongBits(message.voice_chatid.low >>> 0, message.voice_chatid.high >>> 0).toNumber() : message.voice_chatid;
            if (message.user_steamid != null && message.hasOwnProperty("user_steamid"))
                if (typeof message.user_steamid === "number")
                    object.user_steamid = options.longs === String ? String(message.user_steamid) : message.user_steamid;
                else
                    object.user_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.user_steamid) : options.longs === Number ? new $util.LongBits(message.user_steamid.low >>> 0, message.user_steamid.high >>> 0).toNumber() : message.user_steamid;
            if (message.chatid != null && message.hasOwnProperty("chatid"))
                if (typeof message.chatid === "number")
                    object.chatid = options.longs === String ? String(message.chatid) : message.chatid;
                else
                    object.chatid = options.longs === String ? $util.Long.prototype.toString.call(message.chatid) : options.longs === Number ? new $util.LongBits(message.chatid.low >>> 0, message.chatid.high >>> 0).toNumber(true) : message.chatid;
            if (message.one_on_one_steamid_lower != null && message.hasOwnProperty("one_on_one_steamid_lower"))
                if (typeof message.one_on_one_steamid_lower === "number")
                    object.one_on_one_steamid_lower = options.longs === String ? String(message.one_on_one_steamid_lower) : message.one_on_one_steamid_lower;
                else
                    object.one_on_one_steamid_lower = options.longs === String ? $util.Long.prototype.toString.call(message.one_on_one_steamid_lower) : options.longs === Number ? new $util.LongBits(message.one_on_one_steamid_lower.low >>> 0, message.one_on_one_steamid_lower.high >>> 0).toNumber() : message.one_on_one_steamid_lower;
            if (message.one_on_one_steamid_higher != null && message.hasOwnProperty("one_on_one_steamid_higher"))
                if (typeof message.one_on_one_steamid_higher === "number")
                    object.one_on_one_steamid_higher = options.longs === String ? String(message.one_on_one_steamid_higher) : message.one_on_one_steamid_higher;
                else
                    object.one_on_one_steamid_higher = options.longs === String ? $util.Long.prototype.toString.call(message.one_on_one_steamid_higher) : options.longs === Number ? new $util.LongBits(message.one_on_one_steamid_higher.low >>> 0, message.one_on_one_steamid_higher.high >>> 0).toNumber() : message.one_on_one_steamid_higher;
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                if (typeof message.chat_group_id === "number")
                    object.chat_group_id = options.longs === String ? String(message.chat_group_id) : message.chat_group_id;
                else
                    object.chat_group_id = options.longs === String ? $util.Long.prototype.toString.call(message.chat_group_id) : options.longs === Number ? new $util.LongBits(message.chat_group_id.low >>> 0, message.chat_group_id.high >>> 0).toNumber(true) : message.chat_group_id;
            if (message.user_sessionid != null && message.hasOwnProperty("user_sessionid"))
                object.user_sessionid = message.user_sessionid;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_UserLeftVoiceChat_Notification to JSON.
         * @function toJSON
         * @memberof CVoiceChat_UserLeftVoiceChat_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_UserLeftVoiceChat_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_UserLeftVoiceChat_Notification;
    })();
    
    $root.CVoiceChat_VoiceChatEnded_Notification = (function() {
    
        /**
         * Properties of a CVoiceChat_VoiceChatEnded_Notification.
         * @exports ICVoiceChat_VoiceChatEnded_Notification
         * @interface ICVoiceChat_VoiceChatEnded_Notification
         * @property {number|Long|null} [voice_chatid] CVoiceChat_VoiceChatEnded_Notification voice_chatid
         * @property {number|Long|null} [one_on_one_steamid_lower] CVoiceChat_VoiceChatEnded_Notification one_on_one_steamid_lower
         * @property {number|Long|null} [one_on_one_steamid_higher] CVoiceChat_VoiceChatEnded_Notification one_on_one_steamid_higher
         * @property {number|Long|null} [chatid] CVoiceChat_VoiceChatEnded_Notification chatid
         * @property {number|Long|null} [chat_group_id] CVoiceChat_VoiceChatEnded_Notification chat_group_id
         */
    
        /**
         * Constructs a new CVoiceChat_VoiceChatEnded_Notification.
         * @exports CVoiceChat_VoiceChatEnded_Notification
         * @classdesc Represents a CVoiceChat_VoiceChatEnded_Notification.
         * @implements ICVoiceChat_VoiceChatEnded_Notification
         * @constructor
         * @param {ICVoiceChat_VoiceChatEnded_Notification=} [properties] Properties to set
         */
        function CVoiceChat_VoiceChatEnded_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CVoiceChat_VoiceChatEnded_Notification voice_chatid.
         * @member {number|Long} voice_chatid
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @instance
         */
        CVoiceChat_VoiceChatEnded_Notification.prototype.voice_chatid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_VoiceChatEnded_Notification one_on_one_steamid_lower.
         * @member {number|Long} one_on_one_steamid_lower
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @instance
         */
        CVoiceChat_VoiceChatEnded_Notification.prototype.one_on_one_steamid_lower = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_VoiceChatEnded_Notification one_on_one_steamid_higher.
         * @member {number|Long} one_on_one_steamid_higher
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @instance
         */
        CVoiceChat_VoiceChatEnded_Notification.prototype.one_on_one_steamid_higher = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CVoiceChat_VoiceChatEnded_Notification chatid.
         * @member {number|Long} chatid
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @instance
         */
        CVoiceChat_VoiceChatEnded_Notification.prototype.chatid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CVoiceChat_VoiceChatEnded_Notification chat_group_id.
         * @member {number|Long} chat_group_id
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @instance
         */
        CVoiceChat_VoiceChatEnded_Notification.prototype.chat_group_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CVoiceChat_VoiceChatEnded_Notification instance using the specified properties.
         * @function create
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @static
         * @param {ICVoiceChat_VoiceChatEnded_Notification=} [properties] Properties to set
         * @returns {CVoiceChat_VoiceChatEnded_Notification} CVoiceChat_VoiceChatEnded_Notification instance
         */
        CVoiceChat_VoiceChatEnded_Notification.create = function create(properties) {
            return new CVoiceChat_VoiceChatEnded_Notification(properties);
        };
    
        /**
         * Encodes the specified CVoiceChat_VoiceChatEnded_Notification message. Does not implicitly {@link CVoiceChat_VoiceChatEnded_Notification.verify|verify} messages.
         * @function encode
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @static
         * @param {ICVoiceChat_VoiceChatEnded_Notification} message CVoiceChat_VoiceChatEnded_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_VoiceChatEnded_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.voice_chatid);
            if (message.one_on_one_steamid_lower != null && message.hasOwnProperty("one_on_one_steamid_lower"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.one_on_one_steamid_lower);
            if (message.one_on_one_steamid_higher != null && message.hasOwnProperty("one_on_one_steamid_higher"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.one_on_one_steamid_higher);
            if (message.chatid != null && message.hasOwnProperty("chatid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.chatid);
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.chat_group_id);
            return writer;
        };
    
        /**
         * Encodes the specified CVoiceChat_VoiceChatEnded_Notification message, length delimited. Does not implicitly {@link CVoiceChat_VoiceChatEnded_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @static
         * @param {ICVoiceChat_VoiceChatEnded_Notification} message CVoiceChat_VoiceChatEnded_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CVoiceChat_VoiceChatEnded_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CVoiceChat_VoiceChatEnded_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVoiceChat_VoiceChatEnded_Notification} CVoiceChat_VoiceChatEnded_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_VoiceChatEnded_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVoiceChat_VoiceChatEnded_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.voice_chatid = reader.fixed64();
                    break;
                case 2:
                    message.one_on_one_steamid_lower = reader.fixed64();
                    break;
                case 3:
                    message.one_on_one_steamid_higher = reader.fixed64();
                    break;
                case 4:
                    message.chatid = reader.uint64();
                    break;
                case 5:
                    message.chat_group_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CVoiceChat_VoiceChatEnded_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVoiceChat_VoiceChatEnded_Notification} CVoiceChat_VoiceChatEnded_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CVoiceChat_VoiceChatEnded_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CVoiceChat_VoiceChatEnded_Notification message.
         * @function verify
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CVoiceChat_VoiceChatEnded_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (!$util.isInteger(message.voice_chatid) && !(message.voice_chatid && $util.isInteger(message.voice_chatid.low) && $util.isInteger(message.voice_chatid.high)))
                    return "voice_chatid: integer|Long expected";
            if (message.one_on_one_steamid_lower != null && message.hasOwnProperty("one_on_one_steamid_lower"))
                if (!$util.isInteger(message.one_on_one_steamid_lower) && !(message.one_on_one_steamid_lower && $util.isInteger(message.one_on_one_steamid_lower.low) && $util.isInteger(message.one_on_one_steamid_lower.high)))
                    return "one_on_one_steamid_lower: integer|Long expected";
            if (message.one_on_one_steamid_higher != null && message.hasOwnProperty("one_on_one_steamid_higher"))
                if (!$util.isInteger(message.one_on_one_steamid_higher) && !(message.one_on_one_steamid_higher && $util.isInteger(message.one_on_one_steamid_higher.low) && $util.isInteger(message.one_on_one_steamid_higher.high)))
                    return "one_on_one_steamid_higher: integer|Long expected";
            if (message.chatid != null && message.hasOwnProperty("chatid"))
                if (!$util.isInteger(message.chatid) && !(message.chatid && $util.isInteger(message.chatid.low) && $util.isInteger(message.chatid.high)))
                    return "chatid: integer|Long expected";
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                if (!$util.isInteger(message.chat_group_id) && !(message.chat_group_id && $util.isInteger(message.chat_group_id.low) && $util.isInteger(message.chat_group_id.high)))
                    return "chat_group_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CVoiceChat_VoiceChatEnded_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVoiceChat_VoiceChatEnded_Notification} CVoiceChat_VoiceChatEnded_Notification
         */
        CVoiceChat_VoiceChatEnded_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CVoiceChat_VoiceChatEnded_Notification)
                return object;
            var message = new $root.CVoiceChat_VoiceChatEnded_Notification();
            if (object.voice_chatid != null)
                if ($util.Long)
                    (message.voice_chatid = $util.Long.fromValue(object.voice_chatid)).unsigned = false;
                else if (typeof object.voice_chatid === "string")
                    message.voice_chatid = parseInt(object.voice_chatid, 10);
                else if (typeof object.voice_chatid === "number")
                    message.voice_chatid = object.voice_chatid;
                else if (typeof object.voice_chatid === "object")
                    message.voice_chatid = new $util.LongBits(object.voice_chatid.low >>> 0, object.voice_chatid.high >>> 0).toNumber();
            if (object.one_on_one_steamid_lower != null)
                if ($util.Long)
                    (message.one_on_one_steamid_lower = $util.Long.fromValue(object.one_on_one_steamid_lower)).unsigned = false;
                else if (typeof object.one_on_one_steamid_lower === "string")
                    message.one_on_one_steamid_lower = parseInt(object.one_on_one_steamid_lower, 10);
                else if (typeof object.one_on_one_steamid_lower === "number")
                    message.one_on_one_steamid_lower = object.one_on_one_steamid_lower;
                else if (typeof object.one_on_one_steamid_lower === "object")
                    message.one_on_one_steamid_lower = new $util.LongBits(object.one_on_one_steamid_lower.low >>> 0, object.one_on_one_steamid_lower.high >>> 0).toNumber();
            if (object.one_on_one_steamid_higher != null)
                if ($util.Long)
                    (message.one_on_one_steamid_higher = $util.Long.fromValue(object.one_on_one_steamid_higher)).unsigned = false;
                else if (typeof object.one_on_one_steamid_higher === "string")
                    message.one_on_one_steamid_higher = parseInt(object.one_on_one_steamid_higher, 10);
                else if (typeof object.one_on_one_steamid_higher === "number")
                    message.one_on_one_steamid_higher = object.one_on_one_steamid_higher;
                else if (typeof object.one_on_one_steamid_higher === "object")
                    message.one_on_one_steamid_higher = new $util.LongBits(object.one_on_one_steamid_higher.low >>> 0, object.one_on_one_steamid_higher.high >>> 0).toNumber();
            if (object.chatid != null)
                if ($util.Long)
                    (message.chatid = $util.Long.fromValue(object.chatid)).unsigned = true;
                else if (typeof object.chatid === "string")
                    message.chatid = parseInt(object.chatid, 10);
                else if (typeof object.chatid === "number")
                    message.chatid = object.chatid;
                else if (typeof object.chatid === "object")
                    message.chatid = new $util.LongBits(object.chatid.low >>> 0, object.chatid.high >>> 0).toNumber(true);
            if (object.chat_group_id != null)
                if ($util.Long)
                    (message.chat_group_id = $util.Long.fromValue(object.chat_group_id)).unsigned = true;
                else if (typeof object.chat_group_id === "string")
                    message.chat_group_id = parseInt(object.chat_group_id, 10);
                else if (typeof object.chat_group_id === "number")
                    message.chat_group_id = object.chat_group_id;
                else if (typeof object.chat_group_id === "object")
                    message.chat_group_id = new $util.LongBits(object.chat_group_id.low >>> 0, object.chat_group_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CVoiceChat_VoiceChatEnded_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @static
         * @param {CVoiceChat_VoiceChatEnded_Notification} message CVoiceChat_VoiceChatEnded_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CVoiceChat_VoiceChatEnded_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.voice_chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.voice_chatid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.one_on_one_steamid_lower = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.one_on_one_steamid_lower = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.one_on_one_steamid_higher = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.one_on_one_steamid_higher = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.chatid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.chatid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.chat_group_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.chat_group_id = options.longs === String ? "0" : 0;
            }
            if (message.voice_chatid != null && message.hasOwnProperty("voice_chatid"))
                if (typeof message.voice_chatid === "number")
                    object.voice_chatid = options.longs === String ? String(message.voice_chatid) : message.voice_chatid;
                else
                    object.voice_chatid = options.longs === String ? $util.Long.prototype.toString.call(message.voice_chatid) : options.longs === Number ? new $util.LongBits(message.voice_chatid.low >>> 0, message.voice_chatid.high >>> 0).toNumber() : message.voice_chatid;
            if (message.one_on_one_steamid_lower != null && message.hasOwnProperty("one_on_one_steamid_lower"))
                if (typeof message.one_on_one_steamid_lower === "number")
                    object.one_on_one_steamid_lower = options.longs === String ? String(message.one_on_one_steamid_lower) : message.one_on_one_steamid_lower;
                else
                    object.one_on_one_steamid_lower = options.longs === String ? $util.Long.prototype.toString.call(message.one_on_one_steamid_lower) : options.longs === Number ? new $util.LongBits(message.one_on_one_steamid_lower.low >>> 0, message.one_on_one_steamid_lower.high >>> 0).toNumber() : message.one_on_one_steamid_lower;
            if (message.one_on_one_steamid_higher != null && message.hasOwnProperty("one_on_one_steamid_higher"))
                if (typeof message.one_on_one_steamid_higher === "number")
                    object.one_on_one_steamid_higher = options.longs === String ? String(message.one_on_one_steamid_higher) : message.one_on_one_steamid_higher;
                else
                    object.one_on_one_steamid_higher = options.longs === String ? $util.Long.prototype.toString.call(message.one_on_one_steamid_higher) : options.longs === Number ? new $util.LongBits(message.one_on_one_steamid_higher.low >>> 0, message.one_on_one_steamid_higher.high >>> 0).toNumber() : message.one_on_one_steamid_higher;
            if (message.chatid != null && message.hasOwnProperty("chatid"))
                if (typeof message.chatid === "number")
                    object.chatid = options.longs === String ? String(message.chatid) : message.chatid;
                else
                    object.chatid = options.longs === String ? $util.Long.prototype.toString.call(message.chatid) : options.longs === Number ? new $util.LongBits(message.chatid.low >>> 0, message.chatid.high >>> 0).toNumber(true) : message.chatid;
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                if (typeof message.chat_group_id === "number")
                    object.chat_group_id = options.longs === String ? String(message.chat_group_id) : message.chat_group_id;
                else
                    object.chat_group_id = options.longs === String ? $util.Long.prototype.toString.call(message.chat_group_id) : options.longs === Number ? new $util.LongBits(message.chat_group_id.low >>> 0, message.chat_group_id.high >>> 0).toNumber(true) : message.chat_group_id;
            return object;
        };
    
        /**
         * Converts this CVoiceChat_VoiceChatEnded_Notification to JSON.
         * @function toJSON
         * @memberof CVoiceChat_VoiceChatEnded_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CVoiceChat_VoiceChatEnded_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CVoiceChat_VoiceChatEnded_Notification;
    })();
    
    $root.CSteamTV_CreateBroadcastChannel_Response = (function() {
    
        /**
         * Properties of a CSteamTV_CreateBroadcastChannel_Response.
         * @exports ICSteamTV_CreateBroadcastChannel_Response
         * @interface ICSteamTV_CreateBroadcastChannel_Response
         * @property {number|Long|null} [broadcast_channel_id] CSteamTV_CreateBroadcastChannel_Response broadcast_channel_id
         */
    
        /**
         * Constructs a new CSteamTV_CreateBroadcastChannel_Response.
         * @exports CSteamTV_CreateBroadcastChannel_Response
         * @classdesc Represents a CSteamTV_CreateBroadcastChannel_Response.
         * @implements ICSteamTV_CreateBroadcastChannel_Response
         * @constructor
         * @param {ICSteamTV_CreateBroadcastChannel_Response=} [properties] Properties to set
         */
        function CSteamTV_CreateBroadcastChannel_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_CreateBroadcastChannel_Response broadcast_channel_id.
         * @member {number|Long} broadcast_channel_id
         * @memberof CSteamTV_CreateBroadcastChannel_Response
         * @instance
         */
        CSteamTV_CreateBroadcastChannel_Response.prototype.broadcast_channel_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CSteamTV_CreateBroadcastChannel_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_CreateBroadcastChannel_Response
         * @static
         * @param {ICSteamTV_CreateBroadcastChannel_Response=} [properties] Properties to set
         * @returns {CSteamTV_CreateBroadcastChannel_Response} CSteamTV_CreateBroadcastChannel_Response instance
         */
        CSteamTV_CreateBroadcastChannel_Response.create = function create(properties) {
            return new CSteamTV_CreateBroadcastChannel_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_CreateBroadcastChannel_Response message. Does not implicitly {@link CSteamTV_CreateBroadcastChannel_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_CreateBroadcastChannel_Response
         * @static
         * @param {ICSteamTV_CreateBroadcastChannel_Response} message CSteamTV_CreateBroadcastChannel_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_CreateBroadcastChannel_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.broadcast_channel_id);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_CreateBroadcastChannel_Response message, length delimited. Does not implicitly {@link CSteamTV_CreateBroadcastChannel_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_CreateBroadcastChannel_Response
         * @static
         * @param {ICSteamTV_CreateBroadcastChannel_Response} message CSteamTV_CreateBroadcastChannel_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_CreateBroadcastChannel_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_CreateBroadcastChannel_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_CreateBroadcastChannel_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_CreateBroadcastChannel_Response} CSteamTV_CreateBroadcastChannel_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_CreateBroadcastChannel_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_CreateBroadcastChannel_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.broadcast_channel_id = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_CreateBroadcastChannel_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_CreateBroadcastChannel_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_CreateBroadcastChannel_Response} CSteamTV_CreateBroadcastChannel_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_CreateBroadcastChannel_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_CreateBroadcastChannel_Response message.
         * @function verify
         * @memberof CSteamTV_CreateBroadcastChannel_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_CreateBroadcastChannel_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (!$util.isInteger(message.broadcast_channel_id) && !(message.broadcast_channel_id && $util.isInteger(message.broadcast_channel_id.low) && $util.isInteger(message.broadcast_channel_id.high)))
                    return "broadcast_channel_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_CreateBroadcastChannel_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_CreateBroadcastChannel_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_CreateBroadcastChannel_Response} CSteamTV_CreateBroadcastChannel_Response
         */
        CSteamTV_CreateBroadcastChannel_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_CreateBroadcastChannel_Response)
                return object;
            var message = new $root.CSteamTV_CreateBroadcastChannel_Response();
            if (object.broadcast_channel_id != null)
                if ($util.Long)
                    (message.broadcast_channel_id = $util.Long.fromValue(object.broadcast_channel_id)).unsigned = false;
                else if (typeof object.broadcast_channel_id === "string")
                    message.broadcast_channel_id = parseInt(object.broadcast_channel_id, 10);
                else if (typeof object.broadcast_channel_id === "number")
                    message.broadcast_channel_id = object.broadcast_channel_id;
                else if (typeof object.broadcast_channel_id === "object")
                    message.broadcast_channel_id = new $util.LongBits(object.broadcast_channel_id.low >>> 0, object.broadcast_channel_id.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_CreateBroadcastChannel_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_CreateBroadcastChannel_Response
         * @static
         * @param {CSteamTV_CreateBroadcastChannel_Response} message CSteamTV_CreateBroadcastChannel_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_CreateBroadcastChannel_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.broadcast_channel_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.broadcast_channel_id = options.longs === String ? "0" : 0;
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (typeof message.broadcast_channel_id === "number")
                    object.broadcast_channel_id = options.longs === String ? String(message.broadcast_channel_id) : message.broadcast_channel_id;
                else
                    object.broadcast_channel_id = options.longs === String ? $util.Long.prototype.toString.call(message.broadcast_channel_id) : options.longs === Number ? new $util.LongBits(message.broadcast_channel_id.low >>> 0, message.broadcast_channel_id.high >>> 0).toNumber() : message.broadcast_channel_id;
            return object;
        };
    
        /**
         * Converts this CSteamTV_CreateBroadcastChannel_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_CreateBroadcastChannel_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_CreateBroadcastChannel_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_CreateBroadcastChannel_Response;
    })();
    
    $root.CSteamTV_GetBroadcastChannelID_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetBroadcastChannelID_Response.
         * @exports ICSteamTV_GetBroadcastChannelID_Response
         * @interface ICSteamTV_GetBroadcastChannelID_Response
         * @property {number|Long|null} [broadcast_channel_id] CSteamTV_GetBroadcastChannelID_Response broadcast_channel_id
         * @property {string|null} [unique_name] CSteamTV_GetBroadcastChannelID_Response unique_name
         * @property {number|Long|null} [steamid] CSteamTV_GetBroadcastChannelID_Response steamid
         */
    
        /**
         * Constructs a new CSteamTV_GetBroadcastChannelID_Response.
         * @exports CSteamTV_GetBroadcastChannelID_Response
         * @classdesc Represents a CSteamTV_GetBroadcastChannelID_Response.
         * @implements ICSteamTV_GetBroadcastChannelID_Response
         * @constructor
         * @param {ICSteamTV_GetBroadcastChannelID_Response=} [properties] Properties to set
         */
        function CSteamTV_GetBroadcastChannelID_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetBroadcastChannelID_Response broadcast_channel_id.
         * @member {number|Long} broadcast_channel_id
         * @memberof CSteamTV_GetBroadcastChannelID_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelID_Response.prototype.broadcast_channel_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_GetBroadcastChannelID_Response unique_name.
         * @member {string} unique_name
         * @memberof CSteamTV_GetBroadcastChannelID_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelID_Response.prototype.unique_name = "";
    
        /**
         * CSteamTV_GetBroadcastChannelID_Response steamid.
         * @member {number|Long} steamid
         * @memberof CSteamTV_GetBroadcastChannelID_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelID_Response.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CSteamTV_GetBroadcastChannelID_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetBroadcastChannelID_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelID_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetBroadcastChannelID_Response} CSteamTV_GetBroadcastChannelID_Response instance
         */
        CSteamTV_GetBroadcastChannelID_Response.create = function create(properties) {
            return new CSteamTV_GetBroadcastChannelID_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelID_Response message. Does not implicitly {@link CSteamTV_GetBroadcastChannelID_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetBroadcastChannelID_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelID_Response} message CSteamTV_GetBroadcastChannelID_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelID_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.broadcast_channel_id);
            if (message.unique_name != null && message.hasOwnProperty("unique_name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.unique_name);
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.steamid);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelID_Response message, length delimited. Does not implicitly {@link CSteamTV_GetBroadcastChannelID_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelID_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelID_Response} message CSteamTV_GetBroadcastChannelID_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelID_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelID_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetBroadcastChannelID_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetBroadcastChannelID_Response} CSteamTV_GetBroadcastChannelID_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelID_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetBroadcastChannelID_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.broadcast_channel_id = reader.fixed64();
                    break;
                case 2:
                    message.unique_name = reader.string();
                    break;
                case 3:
                    message.steamid = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelID_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelID_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetBroadcastChannelID_Response} CSteamTV_GetBroadcastChannelID_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelID_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetBroadcastChannelID_Response message.
         * @function verify
         * @memberof CSteamTV_GetBroadcastChannelID_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetBroadcastChannelID_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (!$util.isInteger(message.broadcast_channel_id) && !(message.broadcast_channel_id && $util.isInteger(message.broadcast_channel_id.low) && $util.isInteger(message.broadcast_channel_id.high)))
                    return "broadcast_channel_id: integer|Long expected";
            if (message.unique_name != null && message.hasOwnProperty("unique_name"))
                if (!$util.isString(message.unique_name))
                    return "unique_name: string expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetBroadcastChannelID_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetBroadcastChannelID_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetBroadcastChannelID_Response} CSteamTV_GetBroadcastChannelID_Response
         */
        CSteamTV_GetBroadcastChannelID_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetBroadcastChannelID_Response)
                return object;
            var message = new $root.CSteamTV_GetBroadcastChannelID_Response();
            if (object.broadcast_channel_id != null)
                if ($util.Long)
                    (message.broadcast_channel_id = $util.Long.fromValue(object.broadcast_channel_id)).unsigned = false;
                else if (typeof object.broadcast_channel_id === "string")
                    message.broadcast_channel_id = parseInt(object.broadcast_channel_id, 10);
                else if (typeof object.broadcast_channel_id === "number")
                    message.broadcast_channel_id = object.broadcast_channel_id;
                else if (typeof object.broadcast_channel_id === "object")
                    message.broadcast_channel_id = new $util.LongBits(object.broadcast_channel_id.low >>> 0, object.broadcast_channel_id.high >>> 0).toNumber();
            if (object.unique_name != null)
                message.unique_name = String(object.unique_name);
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetBroadcastChannelID_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetBroadcastChannelID_Response
         * @static
         * @param {CSteamTV_GetBroadcastChannelID_Response} message CSteamTV_GetBroadcastChannelID_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetBroadcastChannelID_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.broadcast_channel_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.broadcast_channel_id = options.longs === String ? "0" : 0;
                object.unique_name = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
            }
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (typeof message.broadcast_channel_id === "number")
                    object.broadcast_channel_id = options.longs === String ? String(message.broadcast_channel_id) : message.broadcast_channel_id;
                else
                    object.broadcast_channel_id = options.longs === String ? $util.Long.prototype.toString.call(message.broadcast_channel_id) : options.longs === Number ? new $util.LongBits(message.broadcast_channel_id.low >>> 0, message.broadcast_channel_id.high >>> 0).toNumber() : message.broadcast_channel_id;
            if (message.unique_name != null && message.hasOwnProperty("unique_name"))
                object.unique_name = message.unique_name;
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetBroadcastChannelID_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetBroadcastChannelID_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetBroadcastChannelID_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetBroadcastChannelID_Response;
    })();
    
    $root.CSteamTV_SetBroadcastChannelProfile_Response = (function() {
    
        /**
         * Properties of a CSteamTV_SetBroadcastChannelProfile_Response.
         * @exports ICSteamTV_SetBroadcastChannelProfile_Response
         * @interface ICSteamTV_SetBroadcastChannelProfile_Response
         */
    
        /**
         * Constructs a new CSteamTV_SetBroadcastChannelProfile_Response.
         * @exports CSteamTV_SetBroadcastChannelProfile_Response
         * @classdesc Represents a CSteamTV_SetBroadcastChannelProfile_Response.
         * @implements ICSteamTV_SetBroadcastChannelProfile_Response
         * @constructor
         * @param {ICSteamTV_SetBroadcastChannelProfile_Response=} [properties] Properties to set
         */
        function CSteamTV_SetBroadcastChannelProfile_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CSteamTV_SetBroadcastChannelProfile_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_SetBroadcastChannelProfile_Response
         * @static
         * @param {ICSteamTV_SetBroadcastChannelProfile_Response=} [properties] Properties to set
         * @returns {CSteamTV_SetBroadcastChannelProfile_Response} CSteamTV_SetBroadcastChannelProfile_Response instance
         */
        CSteamTV_SetBroadcastChannelProfile_Response.create = function create(properties) {
            return new CSteamTV_SetBroadcastChannelProfile_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_SetBroadcastChannelProfile_Response message. Does not implicitly {@link CSteamTV_SetBroadcastChannelProfile_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_SetBroadcastChannelProfile_Response
         * @static
         * @param {ICSteamTV_SetBroadcastChannelProfile_Response} message CSteamTV_SetBroadcastChannelProfile_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_SetBroadcastChannelProfile_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_SetBroadcastChannelProfile_Response message, length delimited. Does not implicitly {@link CSteamTV_SetBroadcastChannelProfile_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_SetBroadcastChannelProfile_Response
         * @static
         * @param {ICSteamTV_SetBroadcastChannelProfile_Response} message CSteamTV_SetBroadcastChannelProfile_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_SetBroadcastChannelProfile_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_SetBroadcastChannelProfile_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_SetBroadcastChannelProfile_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_SetBroadcastChannelProfile_Response} CSteamTV_SetBroadcastChannelProfile_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_SetBroadcastChannelProfile_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_SetBroadcastChannelProfile_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_SetBroadcastChannelProfile_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_SetBroadcastChannelProfile_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_SetBroadcastChannelProfile_Response} CSteamTV_SetBroadcastChannelProfile_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_SetBroadcastChannelProfile_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_SetBroadcastChannelProfile_Response message.
         * @function verify
         * @memberof CSteamTV_SetBroadcastChannelProfile_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_SetBroadcastChannelProfile_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_SetBroadcastChannelProfile_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_SetBroadcastChannelProfile_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_SetBroadcastChannelProfile_Response} CSteamTV_SetBroadcastChannelProfile_Response
         */
        CSteamTV_SetBroadcastChannelProfile_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_SetBroadcastChannelProfile_Response)
                return object;
            return new $root.CSteamTV_SetBroadcastChannelProfile_Response();
        };
    
        /**
         * Creates a plain object from a CSteamTV_SetBroadcastChannelProfile_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_SetBroadcastChannelProfile_Response
         * @static
         * @param {CSteamTV_SetBroadcastChannelProfile_Response} message CSteamTV_SetBroadcastChannelProfile_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_SetBroadcastChannelProfile_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CSteamTV_SetBroadcastChannelProfile_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_SetBroadcastChannelProfile_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_SetBroadcastChannelProfile_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_SetBroadcastChannelProfile_Response;
    })();
    
    $root.CSteamTV_GetBroadcastChannelProfile_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetBroadcastChannelProfile_Response.
         * @exports ICSteamTV_GetBroadcastChannelProfile_Response
         * @interface ICSteamTV_GetBroadcastChannelProfile_Response
         * @property {string|null} [unique_name] CSteamTV_GetBroadcastChannelProfile_Response unique_name
         * @property {number|Long|null} [owner_steamid] CSteamTV_GetBroadcastChannelProfile_Response owner_steamid
         * @property {string|null} [name] CSteamTV_GetBroadcastChannelProfile_Response name
         * @property {string|null} [language] CSteamTV_GetBroadcastChannelProfile_Response language
         * @property {string|null} [headline] CSteamTV_GetBroadcastChannelProfile_Response headline
         * @property {string|null} [summary] CSteamTV_GetBroadcastChannelProfile_Response summary
         * @property {string|null} [schedule] CSteamTV_GetBroadcastChannelProfile_Response schedule
         * @property {string|null} [rules] CSteamTV_GetBroadcastChannelProfile_Response rules
         * @property {string|null} [panels] CSteamTV_GetBroadcastChannelProfile_Response panels
         * @property {boolean|null} [is_partnered] CSteamTV_GetBroadcastChannelProfile_Response is_partnered
         */
    
        /**
         * Constructs a new CSteamTV_GetBroadcastChannelProfile_Response.
         * @exports CSteamTV_GetBroadcastChannelProfile_Response
         * @classdesc Represents a CSteamTV_GetBroadcastChannelProfile_Response.
         * @implements ICSteamTV_GetBroadcastChannelProfile_Response
         * @constructor
         * @param {ICSteamTV_GetBroadcastChannelProfile_Response=} [properties] Properties to set
         */
        function CSteamTV_GetBroadcastChannelProfile_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetBroadcastChannelProfile_Response unique_name.
         * @member {string} unique_name
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelProfile_Response.prototype.unique_name = "";
    
        /**
         * CSteamTV_GetBroadcastChannelProfile_Response owner_steamid.
         * @member {number|Long} owner_steamid
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelProfile_Response.prototype.owner_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_GetBroadcastChannelProfile_Response name.
         * @member {string} name
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelProfile_Response.prototype.name = "";
    
        /**
         * CSteamTV_GetBroadcastChannelProfile_Response language.
         * @member {string} language
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelProfile_Response.prototype.language = "";
    
        /**
         * CSteamTV_GetBroadcastChannelProfile_Response headline.
         * @member {string} headline
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelProfile_Response.prototype.headline = "";
    
        /**
         * CSteamTV_GetBroadcastChannelProfile_Response summary.
         * @member {string} summary
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelProfile_Response.prototype.summary = "";
    
        /**
         * CSteamTV_GetBroadcastChannelProfile_Response schedule.
         * @member {string} schedule
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelProfile_Response.prototype.schedule = "";
    
        /**
         * CSteamTV_GetBroadcastChannelProfile_Response rules.
         * @member {string} rules
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelProfile_Response.prototype.rules = "";
    
        /**
         * CSteamTV_GetBroadcastChannelProfile_Response panels.
         * @member {string} panels
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelProfile_Response.prototype.panels = "";
    
        /**
         * CSteamTV_GetBroadcastChannelProfile_Response is_partnered.
         * @member {boolean} is_partnered
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelProfile_Response.prototype.is_partnered = false;
    
        /**
         * Creates a new CSteamTV_GetBroadcastChannelProfile_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelProfile_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetBroadcastChannelProfile_Response} CSteamTV_GetBroadcastChannelProfile_Response instance
         */
        CSteamTV_GetBroadcastChannelProfile_Response.create = function create(properties) {
            return new CSteamTV_GetBroadcastChannelProfile_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelProfile_Response message. Does not implicitly {@link CSteamTV_GetBroadcastChannelProfile_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelProfile_Response} message CSteamTV_GetBroadcastChannelProfile_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelProfile_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.unique_name != null && message.hasOwnProperty("unique_name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.unique_name);
            if (message.owner_steamid != null && message.hasOwnProperty("owner_steamid"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.owner_steamid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            if (message.language != null && message.hasOwnProperty("language"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.language);
            if (message.headline != null && message.hasOwnProperty("headline"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.headline);
            if (message.summary != null && message.hasOwnProperty("summary"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.summary);
            if (message.schedule != null && message.hasOwnProperty("schedule"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.schedule);
            if (message.rules != null && message.hasOwnProperty("rules"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.rules);
            if (message.panels != null && message.hasOwnProperty("panels"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.panels);
            if (message.is_partnered != null && message.hasOwnProperty("is_partnered"))
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.is_partnered);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelProfile_Response message, length delimited. Does not implicitly {@link CSteamTV_GetBroadcastChannelProfile_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelProfile_Response} message CSteamTV_GetBroadcastChannelProfile_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelProfile_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelProfile_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetBroadcastChannelProfile_Response} CSteamTV_GetBroadcastChannelProfile_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelProfile_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetBroadcastChannelProfile_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.unique_name = reader.string();
                    break;
                case 2:
                    message.owner_steamid = reader.fixed64();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.language = reader.string();
                    break;
                case 5:
                    message.headline = reader.string();
                    break;
                case 6:
                    message.summary = reader.string();
                    break;
                case 7:
                    message.schedule = reader.string();
                    break;
                case 8:
                    message.rules = reader.string();
                    break;
                case 9:
                    message.panels = reader.string();
                    break;
                case 10:
                    message.is_partnered = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelProfile_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetBroadcastChannelProfile_Response} CSteamTV_GetBroadcastChannelProfile_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelProfile_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetBroadcastChannelProfile_Response message.
         * @function verify
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetBroadcastChannelProfile_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.unique_name != null && message.hasOwnProperty("unique_name"))
                if (!$util.isString(message.unique_name))
                    return "unique_name: string expected";
            if (message.owner_steamid != null && message.hasOwnProperty("owner_steamid"))
                if (!$util.isInteger(message.owner_steamid) && !(message.owner_steamid && $util.isInteger(message.owner_steamid.low) && $util.isInteger(message.owner_steamid.high)))
                    return "owner_steamid: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isString(message.language))
                    return "language: string expected";
            if (message.headline != null && message.hasOwnProperty("headline"))
                if (!$util.isString(message.headline))
                    return "headline: string expected";
            if (message.summary != null && message.hasOwnProperty("summary"))
                if (!$util.isString(message.summary))
                    return "summary: string expected";
            if (message.schedule != null && message.hasOwnProperty("schedule"))
                if (!$util.isString(message.schedule))
                    return "schedule: string expected";
            if (message.rules != null && message.hasOwnProperty("rules"))
                if (!$util.isString(message.rules))
                    return "rules: string expected";
            if (message.panels != null && message.hasOwnProperty("panels"))
                if (!$util.isString(message.panels))
                    return "panels: string expected";
            if (message.is_partnered != null && message.hasOwnProperty("is_partnered"))
                if (typeof message.is_partnered !== "boolean")
                    return "is_partnered: boolean expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetBroadcastChannelProfile_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetBroadcastChannelProfile_Response} CSteamTV_GetBroadcastChannelProfile_Response
         */
        CSteamTV_GetBroadcastChannelProfile_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetBroadcastChannelProfile_Response)
                return object;
            var message = new $root.CSteamTV_GetBroadcastChannelProfile_Response();
            if (object.unique_name != null)
                message.unique_name = String(object.unique_name);
            if (object.owner_steamid != null)
                if ($util.Long)
                    (message.owner_steamid = $util.Long.fromValue(object.owner_steamid)).unsigned = false;
                else if (typeof object.owner_steamid === "string")
                    message.owner_steamid = parseInt(object.owner_steamid, 10);
                else if (typeof object.owner_steamid === "number")
                    message.owner_steamid = object.owner_steamid;
                else if (typeof object.owner_steamid === "object")
                    message.owner_steamid = new $util.LongBits(object.owner_steamid.low >>> 0, object.owner_steamid.high >>> 0).toNumber();
            if (object.name != null)
                message.name = String(object.name);
            if (object.language != null)
                message.language = String(object.language);
            if (object.headline != null)
                message.headline = String(object.headline);
            if (object.summary != null)
                message.summary = String(object.summary);
            if (object.schedule != null)
                message.schedule = String(object.schedule);
            if (object.rules != null)
                message.rules = String(object.rules);
            if (object.panels != null)
                message.panels = String(object.panels);
            if (object.is_partnered != null)
                message.is_partnered = Boolean(object.is_partnered);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetBroadcastChannelProfile_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @static
         * @param {CSteamTV_GetBroadcastChannelProfile_Response} message CSteamTV_GetBroadcastChannelProfile_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetBroadcastChannelProfile_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.unique_name = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.owner_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.owner_steamid = options.longs === String ? "0" : 0;
                object.name = "";
                object.language = "";
                object.headline = "";
                object.summary = "";
                object.schedule = "";
                object.rules = "";
                object.panels = "";
                object.is_partnered = false;
            }
            if (message.unique_name != null && message.hasOwnProperty("unique_name"))
                object.unique_name = message.unique_name;
            if (message.owner_steamid != null && message.hasOwnProperty("owner_steamid"))
                if (typeof message.owner_steamid === "number")
                    object.owner_steamid = options.longs === String ? String(message.owner_steamid) : message.owner_steamid;
                else
                    object.owner_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.owner_steamid) : options.longs === Number ? new $util.LongBits(message.owner_steamid.low >>> 0, message.owner_steamid.high >>> 0).toNumber() : message.owner_steamid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            if (message.headline != null && message.hasOwnProperty("headline"))
                object.headline = message.headline;
            if (message.summary != null && message.hasOwnProperty("summary"))
                object.summary = message.summary;
            if (message.schedule != null && message.hasOwnProperty("schedule"))
                object.schedule = message.schedule;
            if (message.rules != null && message.hasOwnProperty("rules"))
                object.rules = message.rules;
            if (message.panels != null && message.hasOwnProperty("panels"))
                object.panels = message.panels;
            if (message.is_partnered != null && message.hasOwnProperty("is_partnered"))
                object.is_partnered = message.is_partnered;
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetBroadcastChannelProfile_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetBroadcastChannelProfile_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetBroadcastChannelProfile_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetBroadcastChannelProfile_Response;
    })();
    
    $root.CSteamTV_SetBroadcastChannelImage_Response = (function() {
    
        /**
         * Properties of a CSteamTV_SetBroadcastChannelImage_Response.
         * @exports ICSteamTV_SetBroadcastChannelImage_Response
         * @interface ICSteamTV_SetBroadcastChannelImage_Response
         * @property {string|null} [replace_image_hash] CSteamTV_SetBroadcastChannelImage_Response replace_image_hash
         */
    
        /**
         * Constructs a new CSteamTV_SetBroadcastChannelImage_Response.
         * @exports CSteamTV_SetBroadcastChannelImage_Response
         * @classdesc Represents a CSteamTV_SetBroadcastChannelImage_Response.
         * @implements ICSteamTV_SetBroadcastChannelImage_Response
         * @constructor
         * @param {ICSteamTV_SetBroadcastChannelImage_Response=} [properties] Properties to set
         */
        function CSteamTV_SetBroadcastChannelImage_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_SetBroadcastChannelImage_Response replace_image_hash.
         * @member {string} replace_image_hash
         * @memberof CSteamTV_SetBroadcastChannelImage_Response
         * @instance
         */
        CSteamTV_SetBroadcastChannelImage_Response.prototype.replace_image_hash = "";
    
        /**
         * Creates a new CSteamTV_SetBroadcastChannelImage_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_SetBroadcastChannelImage_Response
         * @static
         * @param {ICSteamTV_SetBroadcastChannelImage_Response=} [properties] Properties to set
         * @returns {CSteamTV_SetBroadcastChannelImage_Response} CSteamTV_SetBroadcastChannelImage_Response instance
         */
        CSteamTV_SetBroadcastChannelImage_Response.create = function create(properties) {
            return new CSteamTV_SetBroadcastChannelImage_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_SetBroadcastChannelImage_Response message. Does not implicitly {@link CSteamTV_SetBroadcastChannelImage_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_SetBroadcastChannelImage_Response
         * @static
         * @param {ICSteamTV_SetBroadcastChannelImage_Response} message CSteamTV_SetBroadcastChannelImage_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_SetBroadcastChannelImage_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.replace_image_hash != null && message.hasOwnProperty("replace_image_hash"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.replace_image_hash);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_SetBroadcastChannelImage_Response message, length delimited. Does not implicitly {@link CSteamTV_SetBroadcastChannelImage_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_SetBroadcastChannelImage_Response
         * @static
         * @param {ICSteamTV_SetBroadcastChannelImage_Response} message CSteamTV_SetBroadcastChannelImage_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_SetBroadcastChannelImage_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_SetBroadcastChannelImage_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_SetBroadcastChannelImage_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_SetBroadcastChannelImage_Response} CSteamTV_SetBroadcastChannelImage_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_SetBroadcastChannelImage_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_SetBroadcastChannelImage_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.replace_image_hash = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_SetBroadcastChannelImage_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_SetBroadcastChannelImage_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_SetBroadcastChannelImage_Response} CSteamTV_SetBroadcastChannelImage_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_SetBroadcastChannelImage_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_SetBroadcastChannelImage_Response message.
         * @function verify
         * @memberof CSteamTV_SetBroadcastChannelImage_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_SetBroadcastChannelImage_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.replace_image_hash != null && message.hasOwnProperty("replace_image_hash"))
                if (!$util.isString(message.replace_image_hash))
                    return "replace_image_hash: string expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_SetBroadcastChannelImage_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_SetBroadcastChannelImage_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_SetBroadcastChannelImage_Response} CSteamTV_SetBroadcastChannelImage_Response
         */
        CSteamTV_SetBroadcastChannelImage_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_SetBroadcastChannelImage_Response)
                return object;
            var message = new $root.CSteamTV_SetBroadcastChannelImage_Response();
            if (object.replace_image_hash != null)
                message.replace_image_hash = String(object.replace_image_hash);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_SetBroadcastChannelImage_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_SetBroadcastChannelImage_Response
         * @static
         * @param {CSteamTV_SetBroadcastChannelImage_Response} message CSteamTV_SetBroadcastChannelImage_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_SetBroadcastChannelImage_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.replace_image_hash = "";
            if (message.replace_image_hash != null && message.hasOwnProperty("replace_image_hash"))
                object.replace_image_hash = message.replace_image_hash;
            return object;
        };
    
        /**
         * Converts this CSteamTV_SetBroadcastChannelImage_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_SetBroadcastChannelImage_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_SetBroadcastChannelImage_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_SetBroadcastChannelImage_Response;
    })();
    
    $root.CSteamTV_GetBroadcastChannelImages_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetBroadcastChannelImages_Response.
         * @exports ICSteamTV_GetBroadcastChannelImages_Response
         * @interface ICSteamTV_GetBroadcastChannelImages_Response
         * @property {Array.<ICSteamTV_GetBroadcastChannelImages_Response_Images>|null} [images] CSteamTV_GetBroadcastChannelImages_Response images
         */
    
        /**
         * Constructs a new CSteamTV_GetBroadcastChannelImages_Response.
         * @exports CSteamTV_GetBroadcastChannelImages_Response
         * @classdesc Represents a CSteamTV_GetBroadcastChannelImages_Response.
         * @implements ICSteamTV_GetBroadcastChannelImages_Response
         * @constructor
         * @param {ICSteamTV_GetBroadcastChannelImages_Response=} [properties] Properties to set
         */
        function CSteamTV_GetBroadcastChannelImages_Response(properties) {
            this.images = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetBroadcastChannelImages_Response images.
         * @member {Array.<ICSteamTV_GetBroadcastChannelImages_Response_Images>} images
         * @memberof CSteamTV_GetBroadcastChannelImages_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelImages_Response.prototype.images = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_GetBroadcastChannelImages_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetBroadcastChannelImages_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelImages_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetBroadcastChannelImages_Response} CSteamTV_GetBroadcastChannelImages_Response instance
         */
        CSteamTV_GetBroadcastChannelImages_Response.create = function create(properties) {
            return new CSteamTV_GetBroadcastChannelImages_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelImages_Response message. Does not implicitly {@link CSteamTV_GetBroadcastChannelImages_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetBroadcastChannelImages_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelImages_Response} message CSteamTV_GetBroadcastChannelImages_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelImages_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.images != null && message.images.length)
                for (var i = 0; i < message.images.length; ++i)
                    $root.CSteamTV_GetBroadcastChannelImages_Response_Images.encode(message.images[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelImages_Response message, length delimited. Does not implicitly {@link CSteamTV_GetBroadcastChannelImages_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelImages_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelImages_Response} message CSteamTV_GetBroadcastChannelImages_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelImages_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelImages_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetBroadcastChannelImages_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetBroadcastChannelImages_Response} CSteamTV_GetBroadcastChannelImages_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelImages_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetBroadcastChannelImages_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.images && message.images.length))
                        message.images = [];
                    message.images.push($root.CSteamTV_GetBroadcastChannelImages_Response_Images.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelImages_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelImages_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetBroadcastChannelImages_Response} CSteamTV_GetBroadcastChannelImages_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelImages_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetBroadcastChannelImages_Response message.
         * @function verify
         * @memberof CSteamTV_GetBroadcastChannelImages_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetBroadcastChannelImages_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.images != null && message.hasOwnProperty("images")) {
                if (!Array.isArray(message.images))
                    return "images: array expected";
                for (var i = 0; i < message.images.length; ++i) {
                    var error = $root.CSteamTV_GetBroadcastChannelImages_Response_Images.verify(message.images[i]);
                    if (error)
                        return "images." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetBroadcastChannelImages_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetBroadcastChannelImages_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetBroadcastChannelImages_Response} CSteamTV_GetBroadcastChannelImages_Response
         */
        CSteamTV_GetBroadcastChannelImages_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetBroadcastChannelImages_Response)
                return object;
            var message = new $root.CSteamTV_GetBroadcastChannelImages_Response();
            if (object.images) {
                if (!Array.isArray(object.images))
                    throw TypeError(".CSteamTV_GetBroadcastChannelImages_Response.images: array expected");
                message.images = [];
                for (var i = 0; i < object.images.length; ++i) {
                    if (typeof object.images[i] !== "object")
                        throw TypeError(".CSteamTV_GetBroadcastChannelImages_Response.images: object expected");
                    message.images[i] = $root.CSteamTV_GetBroadcastChannelImages_Response_Images.fromObject(object.images[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetBroadcastChannelImages_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetBroadcastChannelImages_Response
         * @static
         * @param {CSteamTV_GetBroadcastChannelImages_Response} message CSteamTV_GetBroadcastChannelImages_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetBroadcastChannelImages_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.images = [];
            if (message.images && message.images.length) {
                object.images = [];
                for (var j = 0; j < message.images.length; ++j)
                    object.images[j] = $root.CSteamTV_GetBroadcastChannelImages_Response_Images.toObject(message.images[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetBroadcastChannelImages_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetBroadcastChannelImages_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetBroadcastChannelImages_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetBroadcastChannelImages_Response;
    })();
    
    $root.CSteamTV_GetBroadcastChannelImages_Response_Images = (function() {
    
        /**
         * Properties of a CSteamTV_GetBroadcastChannelImages_Response_Images.
         * @exports ICSteamTV_GetBroadcastChannelImages_Response_Images
         * @interface ICSteamTV_GetBroadcastChannelImages_Response_Images
         * @property {number|null} [image_type] CSteamTV_GetBroadcastChannelImages_Response_Images image_type
         * @property {string|null} [image_path] CSteamTV_GetBroadcastChannelImages_Response_Images image_path
         * @property {number|null} [image_index] CSteamTV_GetBroadcastChannelImages_Response_Images image_index
         */
    
        /**
         * Constructs a new CSteamTV_GetBroadcastChannelImages_Response_Images.
         * @exports CSteamTV_GetBroadcastChannelImages_Response_Images
         * @classdesc Represents a CSteamTV_GetBroadcastChannelImages_Response_Images.
         * @implements ICSteamTV_GetBroadcastChannelImages_Response_Images
         * @constructor
         * @param {ICSteamTV_GetBroadcastChannelImages_Response_Images=} [properties] Properties to set
         */
        function CSteamTV_GetBroadcastChannelImages_Response_Images(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetBroadcastChannelImages_Response_Images image_type.
         * @member {number} image_type
         * @memberof CSteamTV_GetBroadcastChannelImages_Response_Images
         * @instance
         */
        CSteamTV_GetBroadcastChannelImages_Response_Images.prototype.image_type = 0;
    
        /**
         * CSteamTV_GetBroadcastChannelImages_Response_Images image_path.
         * @member {string} image_path
         * @memberof CSteamTV_GetBroadcastChannelImages_Response_Images
         * @instance
         */
        CSteamTV_GetBroadcastChannelImages_Response_Images.prototype.image_path = "";
    
        /**
         * CSteamTV_GetBroadcastChannelImages_Response_Images image_index.
         * @member {number} image_index
         * @memberof CSteamTV_GetBroadcastChannelImages_Response_Images
         * @instance
         */
        CSteamTV_GetBroadcastChannelImages_Response_Images.prototype.image_index = 0;
    
        /**
         * Creates a new CSteamTV_GetBroadcastChannelImages_Response_Images instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetBroadcastChannelImages_Response_Images
         * @static
         * @param {ICSteamTV_GetBroadcastChannelImages_Response_Images=} [properties] Properties to set
         * @returns {CSteamTV_GetBroadcastChannelImages_Response_Images} CSteamTV_GetBroadcastChannelImages_Response_Images instance
         */
        CSteamTV_GetBroadcastChannelImages_Response_Images.create = function create(properties) {
            return new CSteamTV_GetBroadcastChannelImages_Response_Images(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelImages_Response_Images message. Does not implicitly {@link CSteamTV_GetBroadcastChannelImages_Response_Images.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetBroadcastChannelImages_Response_Images
         * @static
         * @param {ICSteamTV_GetBroadcastChannelImages_Response_Images} message CSteamTV_GetBroadcastChannelImages_Response_Images message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelImages_Response_Images.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.image_type != null && message.hasOwnProperty("image_type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.image_type);
            if (message.image_path != null && message.hasOwnProperty("image_path"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.image_path);
            if (message.image_index != null && message.hasOwnProperty("image_index"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.image_index);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelImages_Response_Images message, length delimited. Does not implicitly {@link CSteamTV_GetBroadcastChannelImages_Response_Images.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelImages_Response_Images
         * @static
         * @param {ICSteamTV_GetBroadcastChannelImages_Response_Images} message CSteamTV_GetBroadcastChannelImages_Response_Images message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelImages_Response_Images.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelImages_Response_Images message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetBroadcastChannelImages_Response_Images
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetBroadcastChannelImages_Response_Images} CSteamTV_GetBroadcastChannelImages_Response_Images
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelImages_Response_Images.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetBroadcastChannelImages_Response_Images();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.image_type = reader.int32();
                    break;
                case 2:
                    message.image_path = reader.string();
                    break;
                case 3:
                    message.image_index = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelImages_Response_Images message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelImages_Response_Images
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetBroadcastChannelImages_Response_Images} CSteamTV_GetBroadcastChannelImages_Response_Images
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelImages_Response_Images.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetBroadcastChannelImages_Response_Images message.
         * @function verify
         * @memberof CSteamTV_GetBroadcastChannelImages_Response_Images
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetBroadcastChannelImages_Response_Images.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.image_type != null && message.hasOwnProperty("image_type"))
                if (!$util.isInteger(message.image_type))
                    return "image_type: integer expected";
            if (message.image_path != null && message.hasOwnProperty("image_path"))
                if (!$util.isString(message.image_path))
                    return "image_path: string expected";
            if (message.image_index != null && message.hasOwnProperty("image_index"))
                if (!$util.isInteger(message.image_index))
                    return "image_index: integer expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetBroadcastChannelImages_Response_Images message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetBroadcastChannelImages_Response_Images
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetBroadcastChannelImages_Response_Images} CSteamTV_GetBroadcastChannelImages_Response_Images
         */
        CSteamTV_GetBroadcastChannelImages_Response_Images.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetBroadcastChannelImages_Response_Images)
                return object;
            var message = new $root.CSteamTV_GetBroadcastChannelImages_Response_Images();
            if (object.image_type != null)
                message.image_type = object.image_type | 0;
            if (object.image_path != null)
                message.image_path = String(object.image_path);
            if (object.image_index != null)
                message.image_index = object.image_index >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetBroadcastChannelImages_Response_Images message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetBroadcastChannelImages_Response_Images
         * @static
         * @param {CSteamTV_GetBroadcastChannelImages_Response_Images} message CSteamTV_GetBroadcastChannelImages_Response_Images
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetBroadcastChannelImages_Response_Images.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.image_type = 0;
                object.image_path = "";
                object.image_index = 0;
            }
            if (message.image_type != null && message.hasOwnProperty("image_type"))
                object.image_type = message.image_type;
            if (message.image_path != null && message.hasOwnProperty("image_path"))
                object.image_path = message.image_path;
            if (message.image_index != null && message.hasOwnProperty("image_index"))
                object.image_index = message.image_index;
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetBroadcastChannelImages_Response_Images to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetBroadcastChannelImages_Response_Images
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetBroadcastChannelImages_Response_Images.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetBroadcastChannelImages_Response_Images;
    })();
    
    $root.CSteamTV_GetBroadcastChannelLinks_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetBroadcastChannelLinks_Response.
         * @exports ICSteamTV_GetBroadcastChannelLinks_Response
         * @interface ICSteamTV_GetBroadcastChannelLinks_Response
         * @property {Array.<ICSteamTV_GetBroadcastChannelLinks_Response_Links>|null} [links] CSteamTV_GetBroadcastChannelLinks_Response links
         */
    
        /**
         * Constructs a new CSteamTV_GetBroadcastChannelLinks_Response.
         * @exports CSteamTV_GetBroadcastChannelLinks_Response
         * @classdesc Represents a CSteamTV_GetBroadcastChannelLinks_Response.
         * @implements ICSteamTV_GetBroadcastChannelLinks_Response
         * @constructor
         * @param {ICSteamTV_GetBroadcastChannelLinks_Response=} [properties] Properties to set
         */
        function CSteamTV_GetBroadcastChannelLinks_Response(properties) {
            this.links = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetBroadcastChannelLinks_Response links.
         * @member {Array.<ICSteamTV_GetBroadcastChannelLinks_Response_Links>} links
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelLinks_Response.prototype.links = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_GetBroadcastChannelLinks_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelLinks_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetBroadcastChannelLinks_Response} CSteamTV_GetBroadcastChannelLinks_Response instance
         */
        CSteamTV_GetBroadcastChannelLinks_Response.create = function create(properties) {
            return new CSteamTV_GetBroadcastChannelLinks_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelLinks_Response message. Does not implicitly {@link CSteamTV_GetBroadcastChannelLinks_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelLinks_Response} message CSteamTV_GetBroadcastChannelLinks_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelLinks_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.links != null && message.links.length)
                for (var i = 0; i < message.links.length; ++i)
                    $root.CSteamTV_GetBroadcastChannelLinks_Response_Links.encode(message.links[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelLinks_Response message, length delimited. Does not implicitly {@link CSteamTV_GetBroadcastChannelLinks_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelLinks_Response} message CSteamTV_GetBroadcastChannelLinks_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelLinks_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelLinks_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetBroadcastChannelLinks_Response} CSteamTV_GetBroadcastChannelLinks_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelLinks_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetBroadcastChannelLinks_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.links && message.links.length))
                        message.links = [];
                    message.links.push($root.CSteamTV_GetBroadcastChannelLinks_Response_Links.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelLinks_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetBroadcastChannelLinks_Response} CSteamTV_GetBroadcastChannelLinks_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelLinks_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetBroadcastChannelLinks_Response message.
         * @function verify
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetBroadcastChannelLinks_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.links != null && message.hasOwnProperty("links")) {
                if (!Array.isArray(message.links))
                    return "links: array expected";
                for (var i = 0; i < message.links.length; ++i) {
                    var error = $root.CSteamTV_GetBroadcastChannelLinks_Response_Links.verify(message.links[i]);
                    if (error)
                        return "links." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetBroadcastChannelLinks_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetBroadcastChannelLinks_Response} CSteamTV_GetBroadcastChannelLinks_Response
         */
        CSteamTV_GetBroadcastChannelLinks_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetBroadcastChannelLinks_Response)
                return object;
            var message = new $root.CSteamTV_GetBroadcastChannelLinks_Response();
            if (object.links) {
                if (!Array.isArray(object.links))
                    throw TypeError(".CSteamTV_GetBroadcastChannelLinks_Response.links: array expected");
                message.links = [];
                for (var i = 0; i < object.links.length; ++i) {
                    if (typeof object.links[i] !== "object")
                        throw TypeError(".CSteamTV_GetBroadcastChannelLinks_Response.links: object expected");
                    message.links[i] = $root.CSteamTV_GetBroadcastChannelLinks_Response_Links.fromObject(object.links[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetBroadcastChannelLinks_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response
         * @static
         * @param {CSteamTV_GetBroadcastChannelLinks_Response} message CSteamTV_GetBroadcastChannelLinks_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetBroadcastChannelLinks_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.links = [];
            if (message.links && message.links.length) {
                object.links = [];
                for (var j = 0; j < message.links.length; ++j)
                    object.links[j] = $root.CSteamTV_GetBroadcastChannelLinks_Response_Links.toObject(message.links[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetBroadcastChannelLinks_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetBroadcastChannelLinks_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetBroadcastChannelLinks_Response;
    })();
    
    $root.CSteamTV_GetBroadcastChannelLinks_Response_Links = (function() {
    
        /**
         * Properties of a CSteamTV_GetBroadcastChannelLinks_Response_Links.
         * @exports ICSteamTV_GetBroadcastChannelLinks_Response_Links
         * @interface ICSteamTV_GetBroadcastChannelLinks_Response_Links
         * @property {number|null} [link_index] CSteamTV_GetBroadcastChannelLinks_Response_Links link_index
         * @property {string|null} [url] CSteamTV_GetBroadcastChannelLinks_Response_Links url
         * @property {string|null} [link_description] CSteamTV_GetBroadcastChannelLinks_Response_Links link_description
         * @property {number|null} [left] CSteamTV_GetBroadcastChannelLinks_Response_Links left
         * @property {number|null} [top] CSteamTV_GetBroadcastChannelLinks_Response_Links top
         * @property {number|null} [width] CSteamTV_GetBroadcastChannelLinks_Response_Links width
         * @property {number|null} [height] CSteamTV_GetBroadcastChannelLinks_Response_Links height
         */
    
        /**
         * Constructs a new CSteamTV_GetBroadcastChannelLinks_Response_Links.
         * @exports CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @classdesc Represents a CSteamTV_GetBroadcastChannelLinks_Response_Links.
         * @implements ICSteamTV_GetBroadcastChannelLinks_Response_Links
         * @constructor
         * @param {ICSteamTV_GetBroadcastChannelLinks_Response_Links=} [properties] Properties to set
         */
        function CSteamTV_GetBroadcastChannelLinks_Response_Links(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetBroadcastChannelLinks_Response_Links link_index.
         * @member {number} link_index
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @instance
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.prototype.link_index = 0;
    
        /**
         * CSteamTV_GetBroadcastChannelLinks_Response_Links url.
         * @member {string} url
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @instance
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.prototype.url = "";
    
        /**
         * CSteamTV_GetBroadcastChannelLinks_Response_Links link_description.
         * @member {string} link_description
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @instance
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.prototype.link_description = "";
    
        /**
         * CSteamTV_GetBroadcastChannelLinks_Response_Links left.
         * @member {number} left
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @instance
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.prototype.left = 0;
    
        /**
         * CSteamTV_GetBroadcastChannelLinks_Response_Links top.
         * @member {number} top
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @instance
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.prototype.top = 0;
    
        /**
         * CSteamTV_GetBroadcastChannelLinks_Response_Links width.
         * @member {number} width
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @instance
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.prototype.width = 0;
    
        /**
         * CSteamTV_GetBroadcastChannelLinks_Response_Links height.
         * @member {number} height
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @instance
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.prototype.height = 0;
    
        /**
         * Creates a new CSteamTV_GetBroadcastChannelLinks_Response_Links instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @static
         * @param {ICSteamTV_GetBroadcastChannelLinks_Response_Links=} [properties] Properties to set
         * @returns {CSteamTV_GetBroadcastChannelLinks_Response_Links} CSteamTV_GetBroadcastChannelLinks_Response_Links instance
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.create = function create(properties) {
            return new CSteamTV_GetBroadcastChannelLinks_Response_Links(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelLinks_Response_Links message. Does not implicitly {@link CSteamTV_GetBroadcastChannelLinks_Response_Links.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @static
         * @param {ICSteamTV_GetBroadcastChannelLinks_Response_Links} message CSteamTV_GetBroadcastChannelLinks_Response_Links message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.link_index != null && message.hasOwnProperty("link_index"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.link_index);
            if (message.url != null && message.hasOwnProperty("url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.link_description != null && message.hasOwnProperty("link_description"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.link_description);
            if (message.left != null && message.hasOwnProperty("left"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.left);
            if (message.top != null && message.hasOwnProperty("top"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.top);
            if (message.width != null && message.hasOwnProperty("width"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.width);
            if (message.height != null && message.hasOwnProperty("height"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.height);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelLinks_Response_Links message, length delimited. Does not implicitly {@link CSteamTV_GetBroadcastChannelLinks_Response_Links.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @static
         * @param {ICSteamTV_GetBroadcastChannelLinks_Response_Links} message CSteamTV_GetBroadcastChannelLinks_Response_Links message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelLinks_Response_Links message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetBroadcastChannelLinks_Response_Links} CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetBroadcastChannelLinks_Response_Links();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.link_index = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.link_description = reader.string();
                    break;
                case 4:
                    message.left = reader.uint32();
                    break;
                case 5:
                    message.top = reader.uint32();
                    break;
                case 6:
                    message.width = reader.uint32();
                    break;
                case 7:
                    message.height = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelLinks_Response_Links message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetBroadcastChannelLinks_Response_Links} CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetBroadcastChannelLinks_Response_Links message.
         * @function verify
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.link_index != null && message.hasOwnProperty("link_index"))
                if (!$util.isInteger(message.link_index))
                    return "link_index: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.link_description != null && message.hasOwnProperty("link_description"))
                if (!$util.isString(message.link_description))
                    return "link_description: string expected";
            if (message.left != null && message.hasOwnProperty("left"))
                if (!$util.isInteger(message.left))
                    return "left: integer expected";
            if (message.top != null && message.hasOwnProperty("top"))
                if (!$util.isInteger(message.top))
                    return "top: integer expected";
            if (message.width != null && message.hasOwnProperty("width"))
                if (!$util.isInteger(message.width))
                    return "width: integer expected";
            if (message.height != null && message.hasOwnProperty("height"))
                if (!$util.isInteger(message.height))
                    return "height: integer expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetBroadcastChannelLinks_Response_Links message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetBroadcastChannelLinks_Response_Links} CSteamTV_GetBroadcastChannelLinks_Response_Links
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetBroadcastChannelLinks_Response_Links)
                return object;
            var message = new $root.CSteamTV_GetBroadcastChannelLinks_Response_Links();
            if (object.link_index != null)
                message.link_index = object.link_index >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.link_description != null)
                message.link_description = String(object.link_description);
            if (object.left != null)
                message.left = object.left >>> 0;
            if (object.top != null)
                message.top = object.top >>> 0;
            if (object.width != null)
                message.width = object.width >>> 0;
            if (object.height != null)
                message.height = object.height >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetBroadcastChannelLinks_Response_Links message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @static
         * @param {CSteamTV_GetBroadcastChannelLinks_Response_Links} message CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.link_index = 0;
                object.url = "";
                object.link_description = "";
                object.left = 0;
                object.top = 0;
                object.width = 0;
                object.height = 0;
            }
            if (message.link_index != null && message.hasOwnProperty("link_index"))
                object.link_index = message.link_index;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.link_description != null && message.hasOwnProperty("link_description"))
                object.link_description = message.link_description;
            if (message.left != null && message.hasOwnProperty("left"))
                object.left = message.left;
            if (message.top != null && message.hasOwnProperty("top"))
                object.top = message.top;
            if (message.width != null && message.hasOwnProperty("width"))
                object.width = message.width;
            if (message.height != null && message.hasOwnProperty("height"))
                object.height = message.height;
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetBroadcastChannelLinks_Response_Links to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetBroadcastChannelLinks_Response_Links
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetBroadcastChannelLinks_Response_Links.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetBroadcastChannelLinks_Response_Links;
    })();
    
    $root.CSteamTV_SetBroadcastChannelLinkRegions_Request_Links = (function() {
    
        /**
         * Properties of a CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.
         * @exports ICSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @interface ICSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @property {number|null} [link_index] CSteamTV_SetBroadcastChannelLinkRegions_Request_Links link_index
         * @property {string|null} [url] CSteamTV_SetBroadcastChannelLinkRegions_Request_Links url
         * @property {string|null} [link_description] CSteamTV_SetBroadcastChannelLinkRegions_Request_Links link_description
         * @property {number|null} [left] CSteamTV_SetBroadcastChannelLinkRegions_Request_Links left
         * @property {number|null} [top] CSteamTV_SetBroadcastChannelLinkRegions_Request_Links top
         * @property {number|null} [width] CSteamTV_SetBroadcastChannelLinkRegions_Request_Links width
         * @property {number|null} [height] CSteamTV_SetBroadcastChannelLinkRegions_Request_Links height
         */
    
        /**
         * Constructs a new CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.
         * @exports CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @classdesc Represents a CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.
         * @implements ICSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @constructor
         * @param {ICSteamTV_SetBroadcastChannelLinkRegions_Request_Links=} [properties] Properties to set
         */
        function CSteamTV_SetBroadcastChannelLinkRegions_Request_Links(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_SetBroadcastChannelLinkRegions_Request_Links link_index.
         * @member {number} link_index
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @instance
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.prototype.link_index = 0;
    
        /**
         * CSteamTV_SetBroadcastChannelLinkRegions_Request_Links url.
         * @member {string} url
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @instance
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.prototype.url = "";
    
        /**
         * CSteamTV_SetBroadcastChannelLinkRegions_Request_Links link_description.
         * @member {string} link_description
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @instance
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.prototype.link_description = "";
    
        /**
         * CSteamTV_SetBroadcastChannelLinkRegions_Request_Links left.
         * @member {number} left
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @instance
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.prototype.left = 0;
    
        /**
         * CSteamTV_SetBroadcastChannelLinkRegions_Request_Links top.
         * @member {number} top
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @instance
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.prototype.top = 0;
    
        /**
         * CSteamTV_SetBroadcastChannelLinkRegions_Request_Links width.
         * @member {number} width
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @instance
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.prototype.width = 0;
    
        /**
         * CSteamTV_SetBroadcastChannelLinkRegions_Request_Links height.
         * @member {number} height
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @instance
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.prototype.height = 0;
    
        /**
         * Creates a new CSteamTV_SetBroadcastChannelLinkRegions_Request_Links instance using the specified properties.
         * @function create
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @static
         * @param {ICSteamTV_SetBroadcastChannelLinkRegions_Request_Links=} [properties] Properties to set
         * @returns {CSteamTV_SetBroadcastChannelLinkRegions_Request_Links} CSteamTV_SetBroadcastChannelLinkRegions_Request_Links instance
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.create = function create(properties) {
            return new CSteamTV_SetBroadcastChannelLinkRegions_Request_Links(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_SetBroadcastChannelLinkRegions_Request_Links message. Does not implicitly {@link CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @static
         * @param {ICSteamTV_SetBroadcastChannelLinkRegions_Request_Links} message CSteamTV_SetBroadcastChannelLinkRegions_Request_Links message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.link_index != null && message.hasOwnProperty("link_index"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.link_index);
            if (message.url != null && message.hasOwnProperty("url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.link_description != null && message.hasOwnProperty("link_description"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.link_description);
            if (message.left != null && message.hasOwnProperty("left"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.left);
            if (message.top != null && message.hasOwnProperty("top"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.top);
            if (message.width != null && message.hasOwnProperty("width"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.width);
            if (message.height != null && message.hasOwnProperty("height"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.height);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_SetBroadcastChannelLinkRegions_Request_Links message, length delimited. Does not implicitly {@link CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @static
         * @param {ICSteamTV_SetBroadcastChannelLinkRegions_Request_Links} message CSteamTV_SetBroadcastChannelLinkRegions_Request_Links message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_SetBroadcastChannelLinkRegions_Request_Links message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_SetBroadcastChannelLinkRegions_Request_Links} CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_SetBroadcastChannelLinkRegions_Request_Links();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.link_index = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.link_description = reader.string();
                    break;
                case 4:
                    message.left = reader.uint32();
                    break;
                case 5:
                    message.top = reader.uint32();
                    break;
                case 6:
                    message.width = reader.uint32();
                    break;
                case 7:
                    message.height = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_SetBroadcastChannelLinkRegions_Request_Links message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_SetBroadcastChannelLinkRegions_Request_Links} CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_SetBroadcastChannelLinkRegions_Request_Links message.
         * @function verify
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.link_index != null && message.hasOwnProperty("link_index"))
                if (!$util.isInteger(message.link_index))
                    return "link_index: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.link_description != null && message.hasOwnProperty("link_description"))
                if (!$util.isString(message.link_description))
                    return "link_description: string expected";
            if (message.left != null && message.hasOwnProperty("left"))
                if (!$util.isInteger(message.left))
                    return "left: integer expected";
            if (message.top != null && message.hasOwnProperty("top"))
                if (!$util.isInteger(message.top))
                    return "top: integer expected";
            if (message.width != null && message.hasOwnProperty("width"))
                if (!$util.isInteger(message.width))
                    return "width: integer expected";
            if (message.height != null && message.hasOwnProperty("height"))
                if (!$util.isInteger(message.height))
                    return "height: integer expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_SetBroadcastChannelLinkRegions_Request_Links message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_SetBroadcastChannelLinkRegions_Request_Links} CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_SetBroadcastChannelLinkRegions_Request_Links)
                return object;
            var message = new $root.CSteamTV_SetBroadcastChannelLinkRegions_Request_Links();
            if (object.link_index != null)
                message.link_index = object.link_index >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.link_description != null)
                message.link_description = String(object.link_description);
            if (object.left != null)
                message.left = object.left >>> 0;
            if (object.top != null)
                message.top = object.top >>> 0;
            if (object.width != null)
                message.width = object.width >>> 0;
            if (object.height != null)
                message.height = object.height >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_SetBroadcastChannelLinkRegions_Request_Links message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @static
         * @param {CSteamTV_SetBroadcastChannelLinkRegions_Request_Links} message CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.link_index = 0;
                object.url = "";
                object.link_description = "";
                object.left = 0;
                object.top = 0;
                object.width = 0;
                object.height = 0;
            }
            if (message.link_index != null && message.hasOwnProperty("link_index"))
                object.link_index = message.link_index;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.link_description != null && message.hasOwnProperty("link_description"))
                object.link_description = message.link_description;
            if (message.left != null && message.hasOwnProperty("left"))
                object.left = message.left;
            if (message.top != null && message.hasOwnProperty("top"))
                object.top = message.top;
            if (message.width != null && message.hasOwnProperty("width"))
                object.width = message.width;
            if (message.height != null && message.hasOwnProperty("height"))
                object.height = message.height;
            return object;
        };
    
        /**
         * Converts this CSteamTV_SetBroadcastChannelLinkRegions_Request_Links to JSON.
         * @function toJSON
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_SetBroadcastChannelLinkRegions_Request_Links;
    })();
    
    $root.CSteamTV_SetBroadcastChannelLinkRegions_Response = (function() {
    
        /**
         * Properties of a CSteamTV_SetBroadcastChannelLinkRegions_Response.
         * @exports ICSteamTV_SetBroadcastChannelLinkRegions_Response
         * @interface ICSteamTV_SetBroadcastChannelLinkRegions_Response
         */
    
        /**
         * Constructs a new CSteamTV_SetBroadcastChannelLinkRegions_Response.
         * @exports CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @classdesc Represents a CSteamTV_SetBroadcastChannelLinkRegions_Response.
         * @implements ICSteamTV_SetBroadcastChannelLinkRegions_Response
         * @constructor
         * @param {ICSteamTV_SetBroadcastChannelLinkRegions_Response=} [properties] Properties to set
         */
        function CSteamTV_SetBroadcastChannelLinkRegions_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CSteamTV_SetBroadcastChannelLinkRegions_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @static
         * @param {ICSteamTV_SetBroadcastChannelLinkRegions_Response=} [properties] Properties to set
         * @returns {CSteamTV_SetBroadcastChannelLinkRegions_Response} CSteamTV_SetBroadcastChannelLinkRegions_Response instance
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Response.create = function create(properties) {
            return new CSteamTV_SetBroadcastChannelLinkRegions_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_SetBroadcastChannelLinkRegions_Response message. Does not implicitly {@link CSteamTV_SetBroadcastChannelLinkRegions_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @static
         * @param {ICSteamTV_SetBroadcastChannelLinkRegions_Response} message CSteamTV_SetBroadcastChannelLinkRegions_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_SetBroadcastChannelLinkRegions_Response message, length delimited. Does not implicitly {@link CSteamTV_SetBroadcastChannelLinkRegions_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @static
         * @param {ICSteamTV_SetBroadcastChannelLinkRegions_Response} message CSteamTV_SetBroadcastChannelLinkRegions_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_SetBroadcastChannelLinkRegions_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_SetBroadcastChannelLinkRegions_Response} CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_SetBroadcastChannelLinkRegions_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_SetBroadcastChannelLinkRegions_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_SetBroadcastChannelLinkRegions_Response} CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_SetBroadcastChannelLinkRegions_Response message.
         * @function verify
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_SetBroadcastChannelLinkRegions_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_SetBroadcastChannelLinkRegions_Response} CSteamTV_SetBroadcastChannelLinkRegions_Response
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_SetBroadcastChannelLinkRegions_Response)
                return object;
            return new $root.CSteamTV_SetBroadcastChannelLinkRegions_Response();
        };
    
        /**
         * Creates a plain object from a CSteamTV_SetBroadcastChannelLinkRegions_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @static
         * @param {CSteamTV_SetBroadcastChannelLinkRegions_Response} message CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CSteamTV_SetBroadcastChannelLinkRegions_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_SetBroadcastChannelLinkRegions_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_SetBroadcastChannelLinkRegions_Response;
    })();
    
    $root.CSteamTV_GetBroadcastChannelStatus_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetBroadcastChannelStatus_Response.
         * @exports ICSteamTV_GetBroadcastChannelStatus_Response
         * @interface ICSteamTV_GetBroadcastChannelStatus_Response
         * @property {boolean|null} [is_live] CSteamTV_GetBroadcastChannelStatus_Response is_live
         * @property {boolean|null} [is_disabled] CSteamTV_GetBroadcastChannelStatus_Response is_disabled
         * @property {number|null} [appid] CSteamTV_GetBroadcastChannelStatus_Response appid
         * @property {number|Long|null} [viewers] CSteamTV_GetBroadcastChannelStatus_Response viewers
         * @property {number|Long|null} [views] CSteamTV_GetBroadcastChannelStatus_Response views
         * @property {number|Long|null} [broadcaster_steamid] CSteamTV_GetBroadcastChannelStatus_Response broadcaster_steamid
         * @property {string|null} [thumbnail_url] CSteamTV_GetBroadcastChannelStatus_Response thumbnail_url
         * @property {number|Long|null} [followers] CSteamTV_GetBroadcastChannelStatus_Response followers
         * @property {number|Long|null} [subscribers] CSteamTV_GetBroadcastChannelStatus_Response subscribers
         * @property {string|null} [unique_name] CSteamTV_GetBroadcastChannelStatus_Response unique_name
         * @property {number|Long|null} [broadcast_session_id] CSteamTV_GetBroadcastChannelStatus_Response broadcast_session_id
         */
    
        /**
         * Constructs a new CSteamTV_GetBroadcastChannelStatus_Response.
         * @exports CSteamTV_GetBroadcastChannelStatus_Response
         * @classdesc Represents a CSteamTV_GetBroadcastChannelStatus_Response.
         * @implements ICSteamTV_GetBroadcastChannelStatus_Response
         * @constructor
         * @param {ICSteamTV_GetBroadcastChannelStatus_Response=} [properties] Properties to set
         */
        function CSteamTV_GetBroadcastChannelStatus_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetBroadcastChannelStatus_Response is_live.
         * @member {boolean} is_live
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelStatus_Response.prototype.is_live = false;
    
        /**
         * CSteamTV_GetBroadcastChannelStatus_Response is_disabled.
         * @member {boolean} is_disabled
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelStatus_Response.prototype.is_disabled = false;
    
        /**
         * CSteamTV_GetBroadcastChannelStatus_Response appid.
         * @member {number} appid
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelStatus_Response.prototype.appid = 0;
    
        /**
         * CSteamTV_GetBroadcastChannelStatus_Response viewers.
         * @member {number|Long} viewers
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelStatus_Response.prototype.viewers = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CSteamTV_GetBroadcastChannelStatus_Response views.
         * @member {number|Long} views
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelStatus_Response.prototype.views = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CSteamTV_GetBroadcastChannelStatus_Response broadcaster_steamid.
         * @member {number|Long} broadcaster_steamid
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelStatus_Response.prototype.broadcaster_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_GetBroadcastChannelStatus_Response thumbnail_url.
         * @member {string} thumbnail_url
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelStatus_Response.prototype.thumbnail_url = "";
    
        /**
         * CSteamTV_GetBroadcastChannelStatus_Response followers.
         * @member {number|Long} followers
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelStatus_Response.prototype.followers = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CSteamTV_GetBroadcastChannelStatus_Response subscribers.
         * @member {number|Long} subscribers
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelStatus_Response.prototype.subscribers = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CSteamTV_GetBroadcastChannelStatus_Response unique_name.
         * @member {string} unique_name
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelStatus_Response.prototype.unique_name = "";
    
        /**
         * CSteamTV_GetBroadcastChannelStatus_Response broadcast_session_id.
         * @member {number|Long} broadcast_session_id
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelStatus_Response.prototype.broadcast_session_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CSteamTV_GetBroadcastChannelStatus_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelStatus_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetBroadcastChannelStatus_Response} CSteamTV_GetBroadcastChannelStatus_Response instance
         */
        CSteamTV_GetBroadcastChannelStatus_Response.create = function create(properties) {
            return new CSteamTV_GetBroadcastChannelStatus_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelStatus_Response message. Does not implicitly {@link CSteamTV_GetBroadcastChannelStatus_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelStatus_Response} message CSteamTV_GetBroadcastChannelStatus_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelStatus_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.is_live != null && message.hasOwnProperty("is_live"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.is_live);
            if (message.is_disabled != null && message.hasOwnProperty("is_disabled"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_disabled);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.appid);
            if (message.viewers != null && message.hasOwnProperty("viewers"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.viewers);
            if (message.views != null && message.hasOwnProperty("views"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.views);
            if (message.broadcaster_steamid != null && message.hasOwnProperty("broadcaster_steamid"))
                writer.uint32(/* id 6, wireType 1 =*/49).fixed64(message.broadcaster_steamid);
            if (message.thumbnail_url != null && message.hasOwnProperty("thumbnail_url"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.thumbnail_url);
            if (message.followers != null && message.hasOwnProperty("followers"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.followers);
            if (message.subscribers != null && message.hasOwnProperty("subscribers"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.subscribers);
            if (message.unique_name != null && message.hasOwnProperty("unique_name"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.unique_name);
            if (message.broadcast_session_id != null && message.hasOwnProperty("broadcast_session_id"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.broadcast_session_id);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelStatus_Response message, length delimited. Does not implicitly {@link CSteamTV_GetBroadcastChannelStatus_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelStatus_Response} message CSteamTV_GetBroadcastChannelStatus_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelStatus_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelStatus_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetBroadcastChannelStatus_Response} CSteamTV_GetBroadcastChannelStatus_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelStatus_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetBroadcastChannelStatus_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.is_live = reader.bool();
                    break;
                case 2:
                    message.is_disabled = reader.bool();
                    break;
                case 3:
                    message.appid = reader.uint32();
                    break;
                case 4:
                    message.viewers = reader.uint64();
                    break;
                case 5:
                    message.views = reader.uint64();
                    break;
                case 6:
                    message.broadcaster_steamid = reader.fixed64();
                    break;
                case 7:
                    message.thumbnail_url = reader.string();
                    break;
                case 8:
                    message.followers = reader.uint64();
                    break;
                case 9:
                    message.subscribers = reader.uint64();
                    break;
                case 10:
                    message.unique_name = reader.string();
                    break;
                case 11:
                    message.broadcast_session_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelStatus_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetBroadcastChannelStatus_Response} CSteamTV_GetBroadcastChannelStatus_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelStatus_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetBroadcastChannelStatus_Response message.
         * @function verify
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetBroadcastChannelStatus_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.is_live != null && message.hasOwnProperty("is_live"))
                if (typeof message.is_live !== "boolean")
                    return "is_live: boolean expected";
            if (message.is_disabled != null && message.hasOwnProperty("is_disabled"))
                if (typeof message.is_disabled !== "boolean")
                    return "is_disabled: boolean expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.viewers != null && message.hasOwnProperty("viewers"))
                if (!$util.isInteger(message.viewers) && !(message.viewers && $util.isInteger(message.viewers.low) && $util.isInteger(message.viewers.high)))
                    return "viewers: integer|Long expected";
            if (message.views != null && message.hasOwnProperty("views"))
                if (!$util.isInteger(message.views) && !(message.views && $util.isInteger(message.views.low) && $util.isInteger(message.views.high)))
                    return "views: integer|Long expected";
            if (message.broadcaster_steamid != null && message.hasOwnProperty("broadcaster_steamid"))
                if (!$util.isInteger(message.broadcaster_steamid) && !(message.broadcaster_steamid && $util.isInteger(message.broadcaster_steamid.low) && $util.isInteger(message.broadcaster_steamid.high)))
                    return "broadcaster_steamid: integer|Long expected";
            if (message.thumbnail_url != null && message.hasOwnProperty("thumbnail_url"))
                if (!$util.isString(message.thumbnail_url))
                    return "thumbnail_url: string expected";
            if (message.followers != null && message.hasOwnProperty("followers"))
                if (!$util.isInteger(message.followers) && !(message.followers && $util.isInteger(message.followers.low) && $util.isInteger(message.followers.high)))
                    return "followers: integer|Long expected";
            if (message.subscribers != null && message.hasOwnProperty("subscribers"))
                if (!$util.isInteger(message.subscribers) && !(message.subscribers && $util.isInteger(message.subscribers.low) && $util.isInteger(message.subscribers.high)))
                    return "subscribers: integer|Long expected";
            if (message.unique_name != null && message.hasOwnProperty("unique_name"))
                if (!$util.isString(message.unique_name))
                    return "unique_name: string expected";
            if (message.broadcast_session_id != null && message.hasOwnProperty("broadcast_session_id"))
                if (!$util.isInteger(message.broadcast_session_id) && !(message.broadcast_session_id && $util.isInteger(message.broadcast_session_id.low) && $util.isInteger(message.broadcast_session_id.high)))
                    return "broadcast_session_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetBroadcastChannelStatus_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetBroadcastChannelStatus_Response} CSteamTV_GetBroadcastChannelStatus_Response
         */
        CSteamTV_GetBroadcastChannelStatus_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetBroadcastChannelStatus_Response)
                return object;
            var message = new $root.CSteamTV_GetBroadcastChannelStatus_Response();
            if (object.is_live != null)
                message.is_live = Boolean(object.is_live);
            if (object.is_disabled != null)
                message.is_disabled = Boolean(object.is_disabled);
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.viewers != null)
                if ($util.Long)
                    (message.viewers = $util.Long.fromValue(object.viewers)).unsigned = true;
                else if (typeof object.viewers === "string")
                    message.viewers = parseInt(object.viewers, 10);
                else if (typeof object.viewers === "number")
                    message.viewers = object.viewers;
                else if (typeof object.viewers === "object")
                    message.viewers = new $util.LongBits(object.viewers.low >>> 0, object.viewers.high >>> 0).toNumber(true);
            if (object.views != null)
                if ($util.Long)
                    (message.views = $util.Long.fromValue(object.views)).unsigned = true;
                else if (typeof object.views === "string")
                    message.views = parseInt(object.views, 10);
                else if (typeof object.views === "number")
                    message.views = object.views;
                else if (typeof object.views === "object")
                    message.views = new $util.LongBits(object.views.low >>> 0, object.views.high >>> 0).toNumber(true);
            if (object.broadcaster_steamid != null)
                if ($util.Long)
                    (message.broadcaster_steamid = $util.Long.fromValue(object.broadcaster_steamid)).unsigned = false;
                else if (typeof object.broadcaster_steamid === "string")
                    message.broadcaster_steamid = parseInt(object.broadcaster_steamid, 10);
                else if (typeof object.broadcaster_steamid === "number")
                    message.broadcaster_steamid = object.broadcaster_steamid;
                else if (typeof object.broadcaster_steamid === "object")
                    message.broadcaster_steamid = new $util.LongBits(object.broadcaster_steamid.low >>> 0, object.broadcaster_steamid.high >>> 0).toNumber();
            if (object.thumbnail_url != null)
                message.thumbnail_url = String(object.thumbnail_url);
            if (object.followers != null)
                if ($util.Long)
                    (message.followers = $util.Long.fromValue(object.followers)).unsigned = true;
                else if (typeof object.followers === "string")
                    message.followers = parseInt(object.followers, 10);
                else if (typeof object.followers === "number")
                    message.followers = object.followers;
                else if (typeof object.followers === "object")
                    message.followers = new $util.LongBits(object.followers.low >>> 0, object.followers.high >>> 0).toNumber(true);
            if (object.subscribers != null)
                if ($util.Long)
                    (message.subscribers = $util.Long.fromValue(object.subscribers)).unsigned = true;
                else if (typeof object.subscribers === "string")
                    message.subscribers = parseInt(object.subscribers, 10);
                else if (typeof object.subscribers === "number")
                    message.subscribers = object.subscribers;
                else if (typeof object.subscribers === "object")
                    message.subscribers = new $util.LongBits(object.subscribers.low >>> 0, object.subscribers.high >>> 0).toNumber(true);
            if (object.unique_name != null)
                message.unique_name = String(object.unique_name);
            if (object.broadcast_session_id != null)
                if ($util.Long)
                    (message.broadcast_session_id = $util.Long.fromValue(object.broadcast_session_id)).unsigned = true;
                else if (typeof object.broadcast_session_id === "string")
                    message.broadcast_session_id = parseInt(object.broadcast_session_id, 10);
                else if (typeof object.broadcast_session_id === "number")
                    message.broadcast_session_id = object.broadcast_session_id;
                else if (typeof object.broadcast_session_id === "object")
                    message.broadcast_session_id = new $util.LongBits(object.broadcast_session_id.low >>> 0, object.broadcast_session_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetBroadcastChannelStatus_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @static
         * @param {CSteamTV_GetBroadcastChannelStatus_Response} message CSteamTV_GetBroadcastChannelStatus_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetBroadcastChannelStatus_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.is_live = false;
                object.is_disabled = false;
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.viewers = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.viewers = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.views = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.views = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.broadcaster_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.broadcaster_steamid = options.longs === String ? "0" : 0;
                object.thumbnail_url = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.followers = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.followers = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.subscribers = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.subscribers = options.longs === String ? "0" : 0;
                object.unique_name = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.broadcast_session_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.broadcast_session_id = options.longs === String ? "0" : 0;
            }
            if (message.is_live != null && message.hasOwnProperty("is_live"))
                object.is_live = message.is_live;
            if (message.is_disabled != null && message.hasOwnProperty("is_disabled"))
                object.is_disabled = message.is_disabled;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.viewers != null && message.hasOwnProperty("viewers"))
                if (typeof message.viewers === "number")
                    object.viewers = options.longs === String ? String(message.viewers) : message.viewers;
                else
                    object.viewers = options.longs === String ? $util.Long.prototype.toString.call(message.viewers) : options.longs === Number ? new $util.LongBits(message.viewers.low >>> 0, message.viewers.high >>> 0).toNumber(true) : message.viewers;
            if (message.views != null && message.hasOwnProperty("views"))
                if (typeof message.views === "number")
                    object.views = options.longs === String ? String(message.views) : message.views;
                else
                    object.views = options.longs === String ? $util.Long.prototype.toString.call(message.views) : options.longs === Number ? new $util.LongBits(message.views.low >>> 0, message.views.high >>> 0).toNumber(true) : message.views;
            if (message.broadcaster_steamid != null && message.hasOwnProperty("broadcaster_steamid"))
                if (typeof message.broadcaster_steamid === "number")
                    object.broadcaster_steamid = options.longs === String ? String(message.broadcaster_steamid) : message.broadcaster_steamid;
                else
                    object.broadcaster_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.broadcaster_steamid) : options.longs === Number ? new $util.LongBits(message.broadcaster_steamid.low >>> 0, message.broadcaster_steamid.high >>> 0).toNumber() : message.broadcaster_steamid;
            if (message.thumbnail_url != null && message.hasOwnProperty("thumbnail_url"))
                object.thumbnail_url = message.thumbnail_url;
            if (message.followers != null && message.hasOwnProperty("followers"))
                if (typeof message.followers === "number")
                    object.followers = options.longs === String ? String(message.followers) : message.followers;
                else
                    object.followers = options.longs === String ? $util.Long.prototype.toString.call(message.followers) : options.longs === Number ? new $util.LongBits(message.followers.low >>> 0, message.followers.high >>> 0).toNumber(true) : message.followers;
            if (message.subscribers != null && message.hasOwnProperty("subscribers"))
                if (typeof message.subscribers === "number")
                    object.subscribers = options.longs === String ? String(message.subscribers) : message.subscribers;
                else
                    object.subscribers = options.longs === String ? $util.Long.prototype.toString.call(message.subscribers) : options.longs === Number ? new $util.LongBits(message.subscribers.low >>> 0, message.subscribers.high >>> 0).toNumber(true) : message.subscribers;
            if (message.unique_name != null && message.hasOwnProperty("unique_name"))
                object.unique_name = message.unique_name;
            if (message.broadcast_session_id != null && message.hasOwnProperty("broadcast_session_id"))
                if (typeof message.broadcast_session_id === "number")
                    object.broadcast_session_id = options.longs === String ? String(message.broadcast_session_id) : message.broadcast_session_id;
                else
                    object.broadcast_session_id = options.longs === String ? $util.Long.prototype.toString.call(message.broadcast_session_id) : options.longs === Number ? new $util.LongBits(message.broadcast_session_id.low >>> 0, message.broadcast_session_id.high >>> 0).toNumber(true) : message.broadcast_session_id;
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetBroadcastChannelStatus_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetBroadcastChannelStatus_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetBroadcastChannelStatus_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetBroadcastChannelStatus_Response;
    })();
    
    $root.GetBroadcastChannelEntry = (function() {
    
        /**
         * Properties of a GetBroadcastChannelEntry.
         * @exports IGetBroadcastChannelEntry
         * @interface IGetBroadcastChannelEntry
         * @property {number|Long|null} [broadcast_channel_id] GetBroadcastChannelEntry broadcast_channel_id
         * @property {string|null} [unique_name] GetBroadcastChannelEntry unique_name
         * @property {string|null} [name] GetBroadcastChannelEntry name
         * @property {number|null} [appid] GetBroadcastChannelEntry appid
         * @property {number|Long|null} [viewers] GetBroadcastChannelEntry viewers
         * @property {number|Long|null} [views] GetBroadcastChannelEntry views
         * @property {string|null} [thumbnail_url] GetBroadcastChannelEntry thumbnail_url
         * @property {number|Long|null} [followers] GetBroadcastChannelEntry followers
         * @property {string|null} [headline] GetBroadcastChannelEntry headline
         * @property {string|null} [avatar_url] GetBroadcastChannelEntry avatar_url
         * @property {number|Long|null} [broadcaster_steamid] GetBroadcastChannelEntry broadcaster_steamid
         * @property {number|Long|null} [subscribers] GetBroadcastChannelEntry subscribers
         * @property {string|null} [background_url] GetBroadcastChannelEntry background_url
         * @property {boolean|null} [is_featured] GetBroadcastChannelEntry is_featured
         * @property {boolean|null} [is_disabled] GetBroadcastChannelEntry is_disabled
         * @property {boolean|null} [is_live] GetBroadcastChannelEntry is_live
         * @property {string|null} [language] GetBroadcastChannelEntry language
         * @property {number|null} [reports] GetBroadcastChannelEntry reports
         * @property {boolean|null} [is_partnered] GetBroadcastChannelEntry is_partnered
         */
    
        /**
         * Constructs a new GetBroadcastChannelEntry.
         * @exports GetBroadcastChannelEntry
         * @classdesc Represents a GetBroadcastChannelEntry.
         * @implements IGetBroadcastChannelEntry
         * @constructor
         * @param {IGetBroadcastChannelEntry=} [properties] Properties to set
         */
        function GetBroadcastChannelEntry(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * GetBroadcastChannelEntry broadcast_channel_id.
         * @member {number|Long} broadcast_channel_id
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.broadcast_channel_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * GetBroadcastChannelEntry unique_name.
         * @member {string} unique_name
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.unique_name = "";
    
        /**
         * GetBroadcastChannelEntry name.
         * @member {string} name
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.name = "";
    
        /**
         * GetBroadcastChannelEntry appid.
         * @member {number} appid
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.appid = 0;
    
        /**
         * GetBroadcastChannelEntry viewers.
         * @member {number|Long} viewers
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.viewers = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * GetBroadcastChannelEntry views.
         * @member {number|Long} views
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.views = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * GetBroadcastChannelEntry thumbnail_url.
         * @member {string} thumbnail_url
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.thumbnail_url = "";
    
        /**
         * GetBroadcastChannelEntry followers.
         * @member {number|Long} followers
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.followers = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * GetBroadcastChannelEntry headline.
         * @member {string} headline
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.headline = "";
    
        /**
         * GetBroadcastChannelEntry avatar_url.
         * @member {string} avatar_url
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.avatar_url = "";
    
        /**
         * GetBroadcastChannelEntry broadcaster_steamid.
         * @member {number|Long} broadcaster_steamid
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.broadcaster_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * GetBroadcastChannelEntry subscribers.
         * @member {number|Long} subscribers
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.subscribers = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * GetBroadcastChannelEntry background_url.
         * @member {string} background_url
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.background_url = "";
    
        /**
         * GetBroadcastChannelEntry is_featured.
         * @member {boolean} is_featured
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.is_featured = false;
    
        /**
         * GetBroadcastChannelEntry is_disabled.
         * @member {boolean} is_disabled
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.is_disabled = false;
    
        /**
         * GetBroadcastChannelEntry is_live.
         * @member {boolean} is_live
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.is_live = false;
    
        /**
         * GetBroadcastChannelEntry language.
         * @member {string} language
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.language = "";
    
        /**
         * GetBroadcastChannelEntry reports.
         * @member {number} reports
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.reports = 0;
    
        /**
         * GetBroadcastChannelEntry is_partnered.
         * @member {boolean} is_partnered
         * @memberof GetBroadcastChannelEntry
         * @instance
         */
        GetBroadcastChannelEntry.prototype.is_partnered = false;
    
        /**
         * Creates a new GetBroadcastChannelEntry instance using the specified properties.
         * @function create
         * @memberof GetBroadcastChannelEntry
         * @static
         * @param {IGetBroadcastChannelEntry=} [properties] Properties to set
         * @returns {GetBroadcastChannelEntry} GetBroadcastChannelEntry instance
         */
        GetBroadcastChannelEntry.create = function create(properties) {
            return new GetBroadcastChannelEntry(properties);
        };
    
        /**
         * Encodes the specified GetBroadcastChannelEntry message. Does not implicitly {@link GetBroadcastChannelEntry.verify|verify} messages.
         * @function encode
         * @memberof GetBroadcastChannelEntry
         * @static
         * @param {IGetBroadcastChannelEntry} message GetBroadcastChannelEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetBroadcastChannelEntry.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.broadcast_channel_id);
            if (message.unique_name != null && message.hasOwnProperty("unique_name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.unique_name);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.appid);
            if (message.viewers != null && message.hasOwnProperty("viewers"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.viewers);
            if (message.views != null && message.hasOwnProperty("views"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.views);
            if (message.thumbnail_url != null && message.hasOwnProperty("thumbnail_url"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.thumbnail_url);
            if (message.followers != null && message.hasOwnProperty("followers"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.followers);
            if (message.headline != null && message.hasOwnProperty("headline"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.headline);
            if (message.avatar_url != null && message.hasOwnProperty("avatar_url"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.avatar_url);
            if (message.broadcaster_steamid != null && message.hasOwnProperty("broadcaster_steamid"))
                writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.broadcaster_steamid);
            if (message.subscribers != null && message.hasOwnProperty("subscribers"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.subscribers);
            if (message.background_url != null && message.hasOwnProperty("background_url"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.background_url);
            if (message.is_featured != null && message.hasOwnProperty("is_featured"))
                writer.uint32(/* id 14, wireType 0 =*/112).bool(message.is_featured);
            if (message.is_disabled != null && message.hasOwnProperty("is_disabled"))
                writer.uint32(/* id 15, wireType 0 =*/120).bool(message.is_disabled);
            if (message.is_live != null && message.hasOwnProperty("is_live"))
                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.is_live);
            if (message.language != null && message.hasOwnProperty("language"))
                writer.uint32(/* id 17, wireType 2 =*/138).string(message.language);
            if (message.reports != null && message.hasOwnProperty("reports"))
                writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.reports);
            if (message.is_partnered != null && message.hasOwnProperty("is_partnered"))
                writer.uint32(/* id 19, wireType 0 =*/152).bool(message.is_partnered);
            return writer;
        };
    
        /**
         * Encodes the specified GetBroadcastChannelEntry message, length delimited. Does not implicitly {@link GetBroadcastChannelEntry.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GetBroadcastChannelEntry
         * @static
         * @param {IGetBroadcastChannelEntry} message GetBroadcastChannelEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetBroadcastChannelEntry.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a GetBroadcastChannelEntry message from the specified reader or buffer.
         * @function decode
         * @memberof GetBroadcastChannelEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {GetBroadcastChannelEntry} GetBroadcastChannelEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetBroadcastChannelEntry.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetBroadcastChannelEntry();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.broadcast_channel_id = reader.fixed64();
                    break;
                case 2:
                    message.unique_name = reader.string();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.appid = reader.uint32();
                    break;
                case 5:
                    message.viewers = reader.uint64();
                    break;
                case 6:
                    message.views = reader.uint64();
                    break;
                case 7:
                    message.thumbnail_url = reader.string();
                    break;
                case 8:
                    message.followers = reader.uint64();
                    break;
                case 9:
                    message.headline = reader.string();
                    break;
                case 10:
                    message.avatar_url = reader.string();
                    break;
                case 11:
                    message.broadcaster_steamid = reader.fixed64();
                    break;
                case 12:
                    message.subscribers = reader.uint64();
                    break;
                case 13:
                    message.background_url = reader.string();
                    break;
                case 14:
                    message.is_featured = reader.bool();
                    break;
                case 15:
                    message.is_disabled = reader.bool();
                    break;
                case 16:
                    message.is_live = reader.bool();
                    break;
                case 17:
                    message.language = reader.string();
                    break;
                case 18:
                    message.reports = reader.uint32();
                    break;
                case 19:
                    message.is_partnered = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a GetBroadcastChannelEntry message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof GetBroadcastChannelEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {GetBroadcastChannelEntry} GetBroadcastChannelEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetBroadcastChannelEntry.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a GetBroadcastChannelEntry message.
         * @function verify
         * @memberof GetBroadcastChannelEntry
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetBroadcastChannelEntry.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (!$util.isInteger(message.broadcast_channel_id) && !(message.broadcast_channel_id && $util.isInteger(message.broadcast_channel_id.low) && $util.isInteger(message.broadcast_channel_id.high)))
                    return "broadcast_channel_id: integer|Long expected";
            if (message.unique_name != null && message.hasOwnProperty("unique_name"))
                if (!$util.isString(message.unique_name))
                    return "unique_name: string expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.viewers != null && message.hasOwnProperty("viewers"))
                if (!$util.isInteger(message.viewers) && !(message.viewers && $util.isInteger(message.viewers.low) && $util.isInteger(message.viewers.high)))
                    return "viewers: integer|Long expected";
            if (message.views != null && message.hasOwnProperty("views"))
                if (!$util.isInteger(message.views) && !(message.views && $util.isInteger(message.views.low) && $util.isInteger(message.views.high)))
                    return "views: integer|Long expected";
            if (message.thumbnail_url != null && message.hasOwnProperty("thumbnail_url"))
                if (!$util.isString(message.thumbnail_url))
                    return "thumbnail_url: string expected";
            if (message.followers != null && message.hasOwnProperty("followers"))
                if (!$util.isInteger(message.followers) && !(message.followers && $util.isInteger(message.followers.low) && $util.isInteger(message.followers.high)))
                    return "followers: integer|Long expected";
            if (message.headline != null && message.hasOwnProperty("headline"))
                if (!$util.isString(message.headline))
                    return "headline: string expected";
            if (message.avatar_url != null && message.hasOwnProperty("avatar_url"))
                if (!$util.isString(message.avatar_url))
                    return "avatar_url: string expected";
            if (message.broadcaster_steamid != null && message.hasOwnProperty("broadcaster_steamid"))
                if (!$util.isInteger(message.broadcaster_steamid) && !(message.broadcaster_steamid && $util.isInteger(message.broadcaster_steamid.low) && $util.isInteger(message.broadcaster_steamid.high)))
                    return "broadcaster_steamid: integer|Long expected";
            if (message.subscribers != null && message.hasOwnProperty("subscribers"))
                if (!$util.isInteger(message.subscribers) && !(message.subscribers && $util.isInteger(message.subscribers.low) && $util.isInteger(message.subscribers.high)))
                    return "subscribers: integer|Long expected";
            if (message.background_url != null && message.hasOwnProperty("background_url"))
                if (!$util.isString(message.background_url))
                    return "background_url: string expected";
            if (message.is_featured != null && message.hasOwnProperty("is_featured"))
                if (typeof message.is_featured !== "boolean")
                    return "is_featured: boolean expected";
            if (message.is_disabled != null && message.hasOwnProperty("is_disabled"))
                if (typeof message.is_disabled !== "boolean")
                    return "is_disabled: boolean expected";
            if (message.is_live != null && message.hasOwnProperty("is_live"))
                if (typeof message.is_live !== "boolean")
                    return "is_live: boolean expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isString(message.language))
                    return "language: string expected";
            if (message.reports != null && message.hasOwnProperty("reports"))
                if (!$util.isInteger(message.reports))
                    return "reports: integer expected";
            if (message.is_partnered != null && message.hasOwnProperty("is_partnered"))
                if (typeof message.is_partnered !== "boolean")
                    return "is_partnered: boolean expected";
            return null;
        };
    
        /**
         * Creates a GetBroadcastChannelEntry message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof GetBroadcastChannelEntry
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {GetBroadcastChannelEntry} GetBroadcastChannelEntry
         */
        GetBroadcastChannelEntry.fromObject = function fromObject(object) {
            if (object instanceof $root.GetBroadcastChannelEntry)
                return object;
            var message = new $root.GetBroadcastChannelEntry();
            if (object.broadcast_channel_id != null)
                if ($util.Long)
                    (message.broadcast_channel_id = $util.Long.fromValue(object.broadcast_channel_id)).unsigned = false;
                else if (typeof object.broadcast_channel_id === "string")
                    message.broadcast_channel_id = parseInt(object.broadcast_channel_id, 10);
                else if (typeof object.broadcast_channel_id === "number")
                    message.broadcast_channel_id = object.broadcast_channel_id;
                else if (typeof object.broadcast_channel_id === "object")
                    message.broadcast_channel_id = new $util.LongBits(object.broadcast_channel_id.low >>> 0, object.broadcast_channel_id.high >>> 0).toNumber();
            if (object.unique_name != null)
                message.unique_name = String(object.unique_name);
            if (object.name != null)
                message.name = String(object.name);
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.viewers != null)
                if ($util.Long)
                    (message.viewers = $util.Long.fromValue(object.viewers)).unsigned = true;
                else if (typeof object.viewers === "string")
                    message.viewers = parseInt(object.viewers, 10);
                else if (typeof object.viewers === "number")
                    message.viewers = object.viewers;
                else if (typeof object.viewers === "object")
                    message.viewers = new $util.LongBits(object.viewers.low >>> 0, object.viewers.high >>> 0).toNumber(true);
            if (object.views != null)
                if ($util.Long)
                    (message.views = $util.Long.fromValue(object.views)).unsigned = true;
                else if (typeof object.views === "string")
                    message.views = parseInt(object.views, 10);
                else if (typeof object.views === "number")
                    message.views = object.views;
                else if (typeof object.views === "object")
                    message.views = new $util.LongBits(object.views.low >>> 0, object.views.high >>> 0).toNumber(true);
            if (object.thumbnail_url != null)
                message.thumbnail_url = String(object.thumbnail_url);
            if (object.followers != null)
                if ($util.Long)
                    (message.followers = $util.Long.fromValue(object.followers)).unsigned = true;
                else if (typeof object.followers === "string")
                    message.followers = parseInt(object.followers, 10);
                else if (typeof object.followers === "number")
                    message.followers = object.followers;
                else if (typeof object.followers === "object")
                    message.followers = new $util.LongBits(object.followers.low >>> 0, object.followers.high >>> 0).toNumber(true);
            if (object.headline != null)
                message.headline = String(object.headline);
            if (object.avatar_url != null)
                message.avatar_url = String(object.avatar_url);
            if (object.broadcaster_steamid != null)
                if ($util.Long)
                    (message.broadcaster_steamid = $util.Long.fromValue(object.broadcaster_steamid)).unsigned = false;
                else if (typeof object.broadcaster_steamid === "string")
                    message.broadcaster_steamid = parseInt(object.broadcaster_steamid, 10);
                else if (typeof object.broadcaster_steamid === "number")
                    message.broadcaster_steamid = object.broadcaster_steamid;
                else if (typeof object.broadcaster_steamid === "object")
                    message.broadcaster_steamid = new $util.LongBits(object.broadcaster_steamid.low >>> 0, object.broadcaster_steamid.high >>> 0).toNumber();
            if (object.subscribers != null)
                if ($util.Long)
                    (message.subscribers = $util.Long.fromValue(object.subscribers)).unsigned = true;
                else if (typeof object.subscribers === "string")
                    message.subscribers = parseInt(object.subscribers, 10);
                else if (typeof object.subscribers === "number")
                    message.subscribers = object.subscribers;
                else if (typeof object.subscribers === "object")
                    message.subscribers = new $util.LongBits(object.subscribers.low >>> 0, object.subscribers.high >>> 0).toNumber(true);
            if (object.background_url != null)
                message.background_url = String(object.background_url);
            if (object.is_featured != null)
                message.is_featured = Boolean(object.is_featured);
            if (object.is_disabled != null)
                message.is_disabled = Boolean(object.is_disabled);
            if (object.is_live != null)
                message.is_live = Boolean(object.is_live);
            if (object.language != null)
                message.language = String(object.language);
            if (object.reports != null)
                message.reports = object.reports >>> 0;
            if (object.is_partnered != null)
                message.is_partnered = Boolean(object.is_partnered);
            return message;
        };
    
        /**
         * Creates a plain object from a GetBroadcastChannelEntry message. Also converts values to other types if specified.
         * @function toObject
         * @memberof GetBroadcastChannelEntry
         * @static
         * @param {GetBroadcastChannelEntry} message GetBroadcastChannelEntry
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetBroadcastChannelEntry.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.broadcast_channel_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.broadcast_channel_id = options.longs === String ? "0" : 0;
                object.unique_name = "";
                object.name = "";
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.viewers = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.viewers = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.views = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.views = options.longs === String ? "0" : 0;
                object.thumbnail_url = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.followers = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.followers = options.longs === String ? "0" : 0;
                object.headline = "";
                object.avatar_url = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.broadcaster_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.broadcaster_steamid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.subscribers = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.subscribers = options.longs === String ? "0" : 0;
                object.background_url = "";
                object.is_featured = false;
                object.is_disabled = false;
                object.is_live = false;
                object.language = "";
                object.reports = 0;
                object.is_partnered = false;
            }
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (typeof message.broadcast_channel_id === "number")
                    object.broadcast_channel_id = options.longs === String ? String(message.broadcast_channel_id) : message.broadcast_channel_id;
                else
                    object.broadcast_channel_id = options.longs === String ? $util.Long.prototype.toString.call(message.broadcast_channel_id) : options.longs === Number ? new $util.LongBits(message.broadcast_channel_id.low >>> 0, message.broadcast_channel_id.high >>> 0).toNumber() : message.broadcast_channel_id;
            if (message.unique_name != null && message.hasOwnProperty("unique_name"))
                object.unique_name = message.unique_name;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.viewers != null && message.hasOwnProperty("viewers"))
                if (typeof message.viewers === "number")
                    object.viewers = options.longs === String ? String(message.viewers) : message.viewers;
                else
                    object.viewers = options.longs === String ? $util.Long.prototype.toString.call(message.viewers) : options.longs === Number ? new $util.LongBits(message.viewers.low >>> 0, message.viewers.high >>> 0).toNumber(true) : message.viewers;
            if (message.views != null && message.hasOwnProperty("views"))
                if (typeof message.views === "number")
                    object.views = options.longs === String ? String(message.views) : message.views;
                else
                    object.views = options.longs === String ? $util.Long.prototype.toString.call(message.views) : options.longs === Number ? new $util.LongBits(message.views.low >>> 0, message.views.high >>> 0).toNumber(true) : message.views;
            if (message.thumbnail_url != null && message.hasOwnProperty("thumbnail_url"))
                object.thumbnail_url = message.thumbnail_url;
            if (message.followers != null && message.hasOwnProperty("followers"))
                if (typeof message.followers === "number")
                    object.followers = options.longs === String ? String(message.followers) : message.followers;
                else
                    object.followers = options.longs === String ? $util.Long.prototype.toString.call(message.followers) : options.longs === Number ? new $util.LongBits(message.followers.low >>> 0, message.followers.high >>> 0).toNumber(true) : message.followers;
            if (message.headline != null && message.hasOwnProperty("headline"))
                object.headline = message.headline;
            if (message.avatar_url != null && message.hasOwnProperty("avatar_url"))
                object.avatar_url = message.avatar_url;
            if (message.broadcaster_steamid != null && message.hasOwnProperty("broadcaster_steamid"))
                if (typeof message.broadcaster_steamid === "number")
                    object.broadcaster_steamid = options.longs === String ? String(message.broadcaster_steamid) : message.broadcaster_steamid;
                else
                    object.broadcaster_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.broadcaster_steamid) : options.longs === Number ? new $util.LongBits(message.broadcaster_steamid.low >>> 0, message.broadcaster_steamid.high >>> 0).toNumber() : message.broadcaster_steamid;
            if (message.subscribers != null && message.hasOwnProperty("subscribers"))
                if (typeof message.subscribers === "number")
                    object.subscribers = options.longs === String ? String(message.subscribers) : message.subscribers;
                else
                    object.subscribers = options.longs === String ? $util.Long.prototype.toString.call(message.subscribers) : options.longs === Number ? new $util.LongBits(message.subscribers.low >>> 0, message.subscribers.high >>> 0).toNumber(true) : message.subscribers;
            if (message.background_url != null && message.hasOwnProperty("background_url"))
                object.background_url = message.background_url;
            if (message.is_featured != null && message.hasOwnProperty("is_featured"))
                object.is_featured = message.is_featured;
            if (message.is_disabled != null && message.hasOwnProperty("is_disabled"))
                object.is_disabled = message.is_disabled;
            if (message.is_live != null && message.hasOwnProperty("is_live"))
                object.is_live = message.is_live;
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            if (message.reports != null && message.hasOwnProperty("reports"))
                object.reports = message.reports;
            if (message.is_partnered != null && message.hasOwnProperty("is_partnered"))
                object.is_partnered = message.is_partnered;
            return object;
        };
    
        /**
         * Converts this GetBroadcastChannelEntry to JSON.
         * @function toJSON
         * @memberof GetBroadcastChannelEntry
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetBroadcastChannelEntry.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return GetBroadcastChannelEntry;
    })();
    
    $root.CSteamTV_GetFollowedChannels_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetFollowedChannels_Response.
         * @exports ICSteamTV_GetFollowedChannels_Response
         * @interface ICSteamTV_GetFollowedChannels_Response
         * @property {Array.<IGetBroadcastChannelEntry>|null} [results] CSteamTV_GetFollowedChannels_Response results
         */
    
        /**
         * Constructs a new CSteamTV_GetFollowedChannels_Response.
         * @exports CSteamTV_GetFollowedChannels_Response
         * @classdesc Represents a CSteamTV_GetFollowedChannels_Response.
         * @implements ICSteamTV_GetFollowedChannels_Response
         * @constructor
         * @param {ICSteamTV_GetFollowedChannels_Response=} [properties] Properties to set
         */
        function CSteamTV_GetFollowedChannels_Response(properties) {
            this.results = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetFollowedChannels_Response results.
         * @member {Array.<IGetBroadcastChannelEntry>} results
         * @memberof CSteamTV_GetFollowedChannels_Response
         * @instance
         */
        CSteamTV_GetFollowedChannels_Response.prototype.results = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_GetFollowedChannels_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetFollowedChannels_Response
         * @static
         * @param {ICSteamTV_GetFollowedChannels_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetFollowedChannels_Response} CSteamTV_GetFollowedChannels_Response instance
         */
        CSteamTV_GetFollowedChannels_Response.create = function create(properties) {
            return new CSteamTV_GetFollowedChannels_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetFollowedChannels_Response message. Does not implicitly {@link CSteamTV_GetFollowedChannels_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetFollowedChannels_Response
         * @static
         * @param {ICSteamTV_GetFollowedChannels_Response} message CSteamTV_GetFollowedChannels_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetFollowedChannels_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.results != null && message.results.length)
                for (var i = 0; i < message.results.length; ++i)
                    $root.GetBroadcastChannelEntry.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetFollowedChannels_Response message, length delimited. Does not implicitly {@link CSteamTV_GetFollowedChannels_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetFollowedChannels_Response
         * @static
         * @param {ICSteamTV_GetFollowedChannels_Response} message CSteamTV_GetFollowedChannels_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetFollowedChannels_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetFollowedChannels_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetFollowedChannels_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetFollowedChannels_Response} CSteamTV_GetFollowedChannels_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetFollowedChannels_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetFollowedChannels_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.results && message.results.length))
                        message.results = [];
                    message.results.push($root.GetBroadcastChannelEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetFollowedChannels_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetFollowedChannels_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetFollowedChannels_Response} CSteamTV_GetFollowedChannels_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetFollowedChannels_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetFollowedChannels_Response message.
         * @function verify
         * @memberof CSteamTV_GetFollowedChannels_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetFollowedChannels_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.results != null && message.hasOwnProperty("results")) {
                if (!Array.isArray(message.results))
                    return "results: array expected";
                for (var i = 0; i < message.results.length; ++i) {
                    var error = $root.GetBroadcastChannelEntry.verify(message.results[i]);
                    if (error)
                        return "results." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetFollowedChannels_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetFollowedChannels_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetFollowedChannels_Response} CSteamTV_GetFollowedChannels_Response
         */
        CSteamTV_GetFollowedChannels_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetFollowedChannels_Response)
                return object;
            var message = new $root.CSteamTV_GetFollowedChannels_Response();
            if (object.results) {
                if (!Array.isArray(object.results))
                    throw TypeError(".CSteamTV_GetFollowedChannels_Response.results: array expected");
                message.results = [];
                for (var i = 0; i < object.results.length; ++i) {
                    if (typeof object.results[i] !== "object")
                        throw TypeError(".CSteamTV_GetFollowedChannels_Response.results: object expected");
                    message.results[i] = $root.GetBroadcastChannelEntry.fromObject(object.results[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetFollowedChannels_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetFollowedChannels_Response
         * @static
         * @param {CSteamTV_GetFollowedChannels_Response} message CSteamTV_GetFollowedChannels_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetFollowedChannels_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.results = [];
            if (message.results && message.results.length) {
                object.results = [];
                for (var j = 0; j < message.results.length; ++j)
                    object.results[j] = $root.GetBroadcastChannelEntry.toObject(message.results[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetFollowedChannels_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetFollowedChannels_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetFollowedChannels_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetFollowedChannels_Response;
    })();
    
    $root.CSteamTV_GetSubscribedChannels_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetSubscribedChannels_Response.
         * @exports ICSteamTV_GetSubscribedChannels_Response
         * @interface ICSteamTV_GetSubscribedChannels_Response
         * @property {Array.<IGetBroadcastChannelEntry>|null} [results] CSteamTV_GetSubscribedChannels_Response results
         */
    
        /**
         * Constructs a new CSteamTV_GetSubscribedChannels_Response.
         * @exports CSteamTV_GetSubscribedChannels_Response
         * @classdesc Represents a CSteamTV_GetSubscribedChannels_Response.
         * @implements ICSteamTV_GetSubscribedChannels_Response
         * @constructor
         * @param {ICSteamTV_GetSubscribedChannels_Response=} [properties] Properties to set
         */
        function CSteamTV_GetSubscribedChannels_Response(properties) {
            this.results = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetSubscribedChannels_Response results.
         * @member {Array.<IGetBroadcastChannelEntry>} results
         * @memberof CSteamTV_GetSubscribedChannels_Response
         * @instance
         */
        CSteamTV_GetSubscribedChannels_Response.prototype.results = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_GetSubscribedChannels_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetSubscribedChannels_Response
         * @static
         * @param {ICSteamTV_GetSubscribedChannels_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetSubscribedChannels_Response} CSteamTV_GetSubscribedChannels_Response instance
         */
        CSteamTV_GetSubscribedChannels_Response.create = function create(properties) {
            return new CSteamTV_GetSubscribedChannels_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetSubscribedChannels_Response message. Does not implicitly {@link CSteamTV_GetSubscribedChannels_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetSubscribedChannels_Response
         * @static
         * @param {ICSteamTV_GetSubscribedChannels_Response} message CSteamTV_GetSubscribedChannels_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetSubscribedChannels_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.results != null && message.results.length)
                for (var i = 0; i < message.results.length; ++i)
                    $root.GetBroadcastChannelEntry.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetSubscribedChannels_Response message, length delimited. Does not implicitly {@link CSteamTV_GetSubscribedChannels_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetSubscribedChannels_Response
         * @static
         * @param {ICSteamTV_GetSubscribedChannels_Response} message CSteamTV_GetSubscribedChannels_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetSubscribedChannels_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetSubscribedChannels_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetSubscribedChannels_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetSubscribedChannels_Response} CSteamTV_GetSubscribedChannels_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetSubscribedChannels_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetSubscribedChannels_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.results && message.results.length))
                        message.results = [];
                    message.results.push($root.GetBroadcastChannelEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetSubscribedChannels_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetSubscribedChannels_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetSubscribedChannels_Response} CSteamTV_GetSubscribedChannels_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetSubscribedChannels_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetSubscribedChannels_Response message.
         * @function verify
         * @memberof CSteamTV_GetSubscribedChannels_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetSubscribedChannels_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.results != null && message.hasOwnProperty("results")) {
                if (!Array.isArray(message.results))
                    return "results: array expected";
                for (var i = 0; i < message.results.length; ++i) {
                    var error = $root.GetBroadcastChannelEntry.verify(message.results[i]);
                    if (error)
                        return "results." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetSubscribedChannels_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetSubscribedChannels_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetSubscribedChannels_Response} CSteamTV_GetSubscribedChannels_Response
         */
        CSteamTV_GetSubscribedChannels_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetSubscribedChannels_Response)
                return object;
            var message = new $root.CSteamTV_GetSubscribedChannels_Response();
            if (object.results) {
                if (!Array.isArray(object.results))
                    throw TypeError(".CSteamTV_GetSubscribedChannels_Response.results: array expected");
                message.results = [];
                for (var i = 0; i < object.results.length; ++i) {
                    if (typeof object.results[i] !== "object")
                        throw TypeError(".CSteamTV_GetSubscribedChannels_Response.results: object expected");
                    message.results[i] = $root.GetBroadcastChannelEntry.fromObject(object.results[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetSubscribedChannels_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetSubscribedChannels_Response
         * @static
         * @param {CSteamTV_GetSubscribedChannels_Response} message CSteamTV_GetSubscribedChannels_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetSubscribedChannels_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.results = [];
            if (message.results && message.results.length) {
                object.results = [];
                for (var j = 0; j < message.results.length; ++j)
                    object.results[j] = $root.GetBroadcastChannelEntry.toObject(message.results[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetSubscribedChannels_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetSubscribedChannels_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetSubscribedChannels_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetSubscribedChannels_Response;
    })();
    
    $root.CSteamTV_FollowBroadcastChannel_Response = (function() {
    
        /**
         * Properties of a CSteamTV_FollowBroadcastChannel_Response.
         * @exports ICSteamTV_FollowBroadcastChannel_Response
         * @interface ICSteamTV_FollowBroadcastChannel_Response
         * @property {boolean|null} [is_followed] CSteamTV_FollowBroadcastChannel_Response is_followed
         */
    
        /**
         * Constructs a new CSteamTV_FollowBroadcastChannel_Response.
         * @exports CSteamTV_FollowBroadcastChannel_Response
         * @classdesc Represents a CSteamTV_FollowBroadcastChannel_Response.
         * @implements ICSteamTV_FollowBroadcastChannel_Response
         * @constructor
         * @param {ICSteamTV_FollowBroadcastChannel_Response=} [properties] Properties to set
         */
        function CSteamTV_FollowBroadcastChannel_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_FollowBroadcastChannel_Response is_followed.
         * @member {boolean} is_followed
         * @memberof CSteamTV_FollowBroadcastChannel_Response
         * @instance
         */
        CSteamTV_FollowBroadcastChannel_Response.prototype.is_followed = false;
    
        /**
         * Creates a new CSteamTV_FollowBroadcastChannel_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_FollowBroadcastChannel_Response
         * @static
         * @param {ICSteamTV_FollowBroadcastChannel_Response=} [properties] Properties to set
         * @returns {CSteamTV_FollowBroadcastChannel_Response} CSteamTV_FollowBroadcastChannel_Response instance
         */
        CSteamTV_FollowBroadcastChannel_Response.create = function create(properties) {
            return new CSteamTV_FollowBroadcastChannel_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_FollowBroadcastChannel_Response message. Does not implicitly {@link CSteamTV_FollowBroadcastChannel_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_FollowBroadcastChannel_Response
         * @static
         * @param {ICSteamTV_FollowBroadcastChannel_Response} message CSteamTV_FollowBroadcastChannel_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_FollowBroadcastChannel_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.is_followed != null && message.hasOwnProperty("is_followed"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.is_followed);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_FollowBroadcastChannel_Response message, length delimited. Does not implicitly {@link CSteamTV_FollowBroadcastChannel_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_FollowBroadcastChannel_Response
         * @static
         * @param {ICSteamTV_FollowBroadcastChannel_Response} message CSteamTV_FollowBroadcastChannel_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_FollowBroadcastChannel_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_FollowBroadcastChannel_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_FollowBroadcastChannel_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_FollowBroadcastChannel_Response} CSteamTV_FollowBroadcastChannel_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_FollowBroadcastChannel_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_FollowBroadcastChannel_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.is_followed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_FollowBroadcastChannel_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_FollowBroadcastChannel_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_FollowBroadcastChannel_Response} CSteamTV_FollowBroadcastChannel_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_FollowBroadcastChannel_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_FollowBroadcastChannel_Response message.
         * @function verify
         * @memberof CSteamTV_FollowBroadcastChannel_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_FollowBroadcastChannel_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.is_followed != null && message.hasOwnProperty("is_followed"))
                if (typeof message.is_followed !== "boolean")
                    return "is_followed: boolean expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_FollowBroadcastChannel_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_FollowBroadcastChannel_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_FollowBroadcastChannel_Response} CSteamTV_FollowBroadcastChannel_Response
         */
        CSteamTV_FollowBroadcastChannel_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_FollowBroadcastChannel_Response)
                return object;
            var message = new $root.CSteamTV_FollowBroadcastChannel_Response();
            if (object.is_followed != null)
                message.is_followed = Boolean(object.is_followed);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_FollowBroadcastChannel_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_FollowBroadcastChannel_Response
         * @static
         * @param {CSteamTV_FollowBroadcastChannel_Response} message CSteamTV_FollowBroadcastChannel_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_FollowBroadcastChannel_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.is_followed = false;
            if (message.is_followed != null && message.hasOwnProperty("is_followed"))
                object.is_followed = message.is_followed;
            return object;
        };
    
        /**
         * Converts this CSteamTV_FollowBroadcastChannel_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_FollowBroadcastChannel_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_FollowBroadcastChannel_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_FollowBroadcastChannel_Response;
    })();
    
    $root.CSteamTV_SubscribeBroadcastChannel_Response = (function() {
    
        /**
         * Properties of a CSteamTV_SubscribeBroadcastChannel_Response.
         * @exports ICSteamTV_SubscribeBroadcastChannel_Response
         * @interface ICSteamTV_SubscribeBroadcastChannel_Response
         * @property {boolean|null} [is_subscribed] CSteamTV_SubscribeBroadcastChannel_Response is_subscribed
         */
    
        /**
         * Constructs a new CSteamTV_SubscribeBroadcastChannel_Response.
         * @exports CSteamTV_SubscribeBroadcastChannel_Response
         * @classdesc Represents a CSteamTV_SubscribeBroadcastChannel_Response.
         * @implements ICSteamTV_SubscribeBroadcastChannel_Response
         * @constructor
         * @param {ICSteamTV_SubscribeBroadcastChannel_Response=} [properties] Properties to set
         */
        function CSteamTV_SubscribeBroadcastChannel_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_SubscribeBroadcastChannel_Response is_subscribed.
         * @member {boolean} is_subscribed
         * @memberof CSteamTV_SubscribeBroadcastChannel_Response
         * @instance
         */
        CSteamTV_SubscribeBroadcastChannel_Response.prototype.is_subscribed = false;
    
        /**
         * Creates a new CSteamTV_SubscribeBroadcastChannel_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_SubscribeBroadcastChannel_Response
         * @static
         * @param {ICSteamTV_SubscribeBroadcastChannel_Response=} [properties] Properties to set
         * @returns {CSteamTV_SubscribeBroadcastChannel_Response} CSteamTV_SubscribeBroadcastChannel_Response instance
         */
        CSteamTV_SubscribeBroadcastChannel_Response.create = function create(properties) {
            return new CSteamTV_SubscribeBroadcastChannel_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_SubscribeBroadcastChannel_Response message. Does not implicitly {@link CSteamTV_SubscribeBroadcastChannel_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_SubscribeBroadcastChannel_Response
         * @static
         * @param {ICSteamTV_SubscribeBroadcastChannel_Response} message CSteamTV_SubscribeBroadcastChannel_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_SubscribeBroadcastChannel_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.is_subscribed != null && message.hasOwnProperty("is_subscribed"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.is_subscribed);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_SubscribeBroadcastChannel_Response message, length delimited. Does not implicitly {@link CSteamTV_SubscribeBroadcastChannel_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_SubscribeBroadcastChannel_Response
         * @static
         * @param {ICSteamTV_SubscribeBroadcastChannel_Response} message CSteamTV_SubscribeBroadcastChannel_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_SubscribeBroadcastChannel_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_SubscribeBroadcastChannel_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_SubscribeBroadcastChannel_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_SubscribeBroadcastChannel_Response} CSteamTV_SubscribeBroadcastChannel_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_SubscribeBroadcastChannel_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_SubscribeBroadcastChannel_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.is_subscribed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_SubscribeBroadcastChannel_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_SubscribeBroadcastChannel_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_SubscribeBroadcastChannel_Response} CSteamTV_SubscribeBroadcastChannel_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_SubscribeBroadcastChannel_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_SubscribeBroadcastChannel_Response message.
         * @function verify
         * @memberof CSteamTV_SubscribeBroadcastChannel_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_SubscribeBroadcastChannel_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.is_subscribed != null && message.hasOwnProperty("is_subscribed"))
                if (typeof message.is_subscribed !== "boolean")
                    return "is_subscribed: boolean expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_SubscribeBroadcastChannel_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_SubscribeBroadcastChannel_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_SubscribeBroadcastChannel_Response} CSteamTV_SubscribeBroadcastChannel_Response
         */
        CSteamTV_SubscribeBroadcastChannel_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_SubscribeBroadcastChannel_Response)
                return object;
            var message = new $root.CSteamTV_SubscribeBroadcastChannel_Response();
            if (object.is_subscribed != null)
                message.is_subscribed = Boolean(object.is_subscribed);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_SubscribeBroadcastChannel_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_SubscribeBroadcastChannel_Response
         * @static
         * @param {CSteamTV_SubscribeBroadcastChannel_Response} message CSteamTV_SubscribeBroadcastChannel_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_SubscribeBroadcastChannel_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.is_subscribed = false;
            if (message.is_subscribed != null && message.hasOwnProperty("is_subscribed"))
                object.is_subscribed = message.is_subscribed;
            return object;
        };
    
        /**
         * Converts this CSteamTV_SubscribeBroadcastChannel_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_SubscribeBroadcastChannel_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_SubscribeBroadcastChannel_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_SubscribeBroadcastChannel_Response;
    })();
    
    $root.CSteamTV_ReportBroadcastChannel_Response = (function() {
    
        /**
         * Properties of a CSteamTV_ReportBroadcastChannel_Response.
         * @exports ICSteamTV_ReportBroadcastChannel_Response
         * @interface ICSteamTV_ReportBroadcastChannel_Response
         */
    
        /**
         * Constructs a new CSteamTV_ReportBroadcastChannel_Response.
         * @exports CSteamTV_ReportBroadcastChannel_Response
         * @classdesc Represents a CSteamTV_ReportBroadcastChannel_Response.
         * @implements ICSteamTV_ReportBroadcastChannel_Response
         * @constructor
         * @param {ICSteamTV_ReportBroadcastChannel_Response=} [properties] Properties to set
         */
        function CSteamTV_ReportBroadcastChannel_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CSteamTV_ReportBroadcastChannel_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_ReportBroadcastChannel_Response
         * @static
         * @param {ICSteamTV_ReportBroadcastChannel_Response=} [properties] Properties to set
         * @returns {CSteamTV_ReportBroadcastChannel_Response} CSteamTV_ReportBroadcastChannel_Response instance
         */
        CSteamTV_ReportBroadcastChannel_Response.create = function create(properties) {
            return new CSteamTV_ReportBroadcastChannel_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_ReportBroadcastChannel_Response message. Does not implicitly {@link CSteamTV_ReportBroadcastChannel_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_ReportBroadcastChannel_Response
         * @static
         * @param {ICSteamTV_ReportBroadcastChannel_Response} message CSteamTV_ReportBroadcastChannel_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_ReportBroadcastChannel_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_ReportBroadcastChannel_Response message, length delimited. Does not implicitly {@link CSteamTV_ReportBroadcastChannel_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_ReportBroadcastChannel_Response
         * @static
         * @param {ICSteamTV_ReportBroadcastChannel_Response} message CSteamTV_ReportBroadcastChannel_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_ReportBroadcastChannel_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_ReportBroadcastChannel_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_ReportBroadcastChannel_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_ReportBroadcastChannel_Response} CSteamTV_ReportBroadcastChannel_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_ReportBroadcastChannel_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_ReportBroadcastChannel_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_ReportBroadcastChannel_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_ReportBroadcastChannel_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_ReportBroadcastChannel_Response} CSteamTV_ReportBroadcastChannel_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_ReportBroadcastChannel_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_ReportBroadcastChannel_Response message.
         * @function verify
         * @memberof CSteamTV_ReportBroadcastChannel_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_ReportBroadcastChannel_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_ReportBroadcastChannel_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_ReportBroadcastChannel_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_ReportBroadcastChannel_Response} CSteamTV_ReportBroadcastChannel_Response
         */
        CSteamTV_ReportBroadcastChannel_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_ReportBroadcastChannel_Response)
                return object;
            return new $root.CSteamTV_ReportBroadcastChannel_Response();
        };
    
        /**
         * Creates a plain object from a CSteamTV_ReportBroadcastChannel_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_ReportBroadcastChannel_Response
         * @static
         * @param {CSteamTV_ReportBroadcastChannel_Response} message CSteamTV_ReportBroadcastChannel_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_ReportBroadcastChannel_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CSteamTV_ReportBroadcastChannel_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_ReportBroadcastChannel_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_ReportBroadcastChannel_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_ReportBroadcastChannel_Response;
    })();
    
    $root.CSteamTV_GetBroadcastChannelInteraction_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetBroadcastChannelInteraction_Response.
         * @exports ICSteamTV_GetBroadcastChannelInteraction_Response
         * @interface ICSteamTV_GetBroadcastChannelInteraction_Response
         * @property {boolean|null} [is_followed] CSteamTV_GetBroadcastChannelInteraction_Response is_followed
         * @property {boolean|null} [is_subscribed] CSteamTV_GetBroadcastChannelInteraction_Response is_subscribed
         */
    
        /**
         * Constructs a new CSteamTV_GetBroadcastChannelInteraction_Response.
         * @exports CSteamTV_GetBroadcastChannelInteraction_Response
         * @classdesc Represents a CSteamTV_GetBroadcastChannelInteraction_Response.
         * @implements ICSteamTV_GetBroadcastChannelInteraction_Response
         * @constructor
         * @param {ICSteamTV_GetBroadcastChannelInteraction_Response=} [properties] Properties to set
         */
        function CSteamTV_GetBroadcastChannelInteraction_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetBroadcastChannelInteraction_Response is_followed.
         * @member {boolean} is_followed
         * @memberof CSteamTV_GetBroadcastChannelInteraction_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelInteraction_Response.prototype.is_followed = false;
    
        /**
         * CSteamTV_GetBroadcastChannelInteraction_Response is_subscribed.
         * @member {boolean} is_subscribed
         * @memberof CSteamTV_GetBroadcastChannelInteraction_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelInteraction_Response.prototype.is_subscribed = false;
    
        /**
         * Creates a new CSteamTV_GetBroadcastChannelInteraction_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetBroadcastChannelInteraction_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelInteraction_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetBroadcastChannelInteraction_Response} CSteamTV_GetBroadcastChannelInteraction_Response instance
         */
        CSteamTV_GetBroadcastChannelInteraction_Response.create = function create(properties) {
            return new CSteamTV_GetBroadcastChannelInteraction_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelInteraction_Response message. Does not implicitly {@link CSteamTV_GetBroadcastChannelInteraction_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetBroadcastChannelInteraction_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelInteraction_Response} message CSteamTV_GetBroadcastChannelInteraction_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelInteraction_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.is_followed != null && message.hasOwnProperty("is_followed"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.is_followed);
            if (message.is_subscribed != null && message.hasOwnProperty("is_subscribed"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_subscribed);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelInteraction_Response message, length delimited. Does not implicitly {@link CSteamTV_GetBroadcastChannelInteraction_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelInteraction_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelInteraction_Response} message CSteamTV_GetBroadcastChannelInteraction_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelInteraction_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelInteraction_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetBroadcastChannelInteraction_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetBroadcastChannelInteraction_Response} CSteamTV_GetBroadcastChannelInteraction_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelInteraction_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetBroadcastChannelInteraction_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.is_followed = reader.bool();
                    break;
                case 2:
                    message.is_subscribed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelInteraction_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelInteraction_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetBroadcastChannelInteraction_Response} CSteamTV_GetBroadcastChannelInteraction_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelInteraction_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetBroadcastChannelInteraction_Response message.
         * @function verify
         * @memberof CSteamTV_GetBroadcastChannelInteraction_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetBroadcastChannelInteraction_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.is_followed != null && message.hasOwnProperty("is_followed"))
                if (typeof message.is_followed !== "boolean")
                    return "is_followed: boolean expected";
            if (message.is_subscribed != null && message.hasOwnProperty("is_subscribed"))
                if (typeof message.is_subscribed !== "boolean")
                    return "is_subscribed: boolean expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetBroadcastChannelInteraction_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetBroadcastChannelInteraction_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetBroadcastChannelInteraction_Response} CSteamTV_GetBroadcastChannelInteraction_Response
         */
        CSteamTV_GetBroadcastChannelInteraction_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetBroadcastChannelInteraction_Response)
                return object;
            var message = new $root.CSteamTV_GetBroadcastChannelInteraction_Response();
            if (object.is_followed != null)
                message.is_followed = Boolean(object.is_followed);
            if (object.is_subscribed != null)
                message.is_subscribed = Boolean(object.is_subscribed);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetBroadcastChannelInteraction_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetBroadcastChannelInteraction_Response
         * @static
         * @param {CSteamTV_GetBroadcastChannelInteraction_Response} message CSteamTV_GetBroadcastChannelInteraction_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetBroadcastChannelInteraction_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.is_followed = false;
                object.is_subscribed = false;
            }
            if (message.is_followed != null && message.hasOwnProperty("is_followed"))
                object.is_followed = message.is_followed;
            if (message.is_subscribed != null && message.hasOwnProperty("is_subscribed"))
                object.is_subscribed = message.is_subscribed;
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetBroadcastChannelInteraction_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetBroadcastChannelInteraction_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetBroadcastChannelInteraction_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetBroadcastChannelInteraction_Response;
    })();
    
    $root.CSteamTV_Game = (function() {
    
        /**
         * Properties of a CSteamTV_Game.
         * @exports ICSteamTV_Game
         * @interface ICSteamTV_Game
         * @property {number|null} [appid] CSteamTV_Game appid
         * @property {string|null} [name] CSteamTV_Game name
         * @property {string|null} [image] CSteamTV_Game image
         * @property {number|Long|null} [viewers] CSteamTV_Game viewers
         * @property {Array.<IGetBroadcastChannelEntry>|null} [channels] CSteamTV_Game channels
         * @property {string|null} [release_date] CSteamTV_Game release_date
         * @property {string|null} [developer] CSteamTV_Game developer
         * @property {string|null} [publisher] CSteamTV_Game publisher
         */
    
        /**
         * Constructs a new CSteamTV_Game.
         * @exports CSteamTV_Game
         * @classdesc Represents a CSteamTV_Game.
         * @implements ICSteamTV_Game
         * @constructor
         * @param {ICSteamTV_Game=} [properties] Properties to set
         */
        function CSteamTV_Game(properties) {
            this.channels = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_Game appid.
         * @member {number} appid
         * @memberof CSteamTV_Game
         * @instance
         */
        CSteamTV_Game.prototype.appid = 0;
    
        /**
         * CSteamTV_Game name.
         * @member {string} name
         * @memberof CSteamTV_Game
         * @instance
         */
        CSteamTV_Game.prototype.name = "";
    
        /**
         * CSteamTV_Game image.
         * @member {string} image
         * @memberof CSteamTV_Game
         * @instance
         */
        CSteamTV_Game.prototype.image = "";
    
        /**
         * CSteamTV_Game viewers.
         * @member {number|Long} viewers
         * @memberof CSteamTV_Game
         * @instance
         */
        CSteamTV_Game.prototype.viewers = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CSteamTV_Game channels.
         * @member {Array.<IGetBroadcastChannelEntry>} channels
         * @memberof CSteamTV_Game
         * @instance
         */
        CSteamTV_Game.prototype.channels = $util.emptyArray;
    
        /**
         * CSteamTV_Game release_date.
         * @member {string} release_date
         * @memberof CSteamTV_Game
         * @instance
         */
        CSteamTV_Game.prototype.release_date = "";
    
        /**
         * CSteamTV_Game developer.
         * @member {string} developer
         * @memberof CSteamTV_Game
         * @instance
         */
        CSteamTV_Game.prototype.developer = "";
    
        /**
         * CSteamTV_Game publisher.
         * @member {string} publisher
         * @memberof CSteamTV_Game
         * @instance
         */
        CSteamTV_Game.prototype.publisher = "";
    
        /**
         * Creates a new CSteamTV_Game instance using the specified properties.
         * @function create
         * @memberof CSteamTV_Game
         * @static
         * @param {ICSteamTV_Game=} [properties] Properties to set
         * @returns {CSteamTV_Game} CSteamTV_Game instance
         */
        CSteamTV_Game.create = function create(properties) {
            return new CSteamTV_Game(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_Game message. Does not implicitly {@link CSteamTV_Game.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_Game
         * @static
         * @param {ICSteamTV_Game} message CSteamTV_Game message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_Game.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.image != null && message.hasOwnProperty("image"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.image);
            if (message.viewers != null && message.hasOwnProperty("viewers"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.viewers);
            if (message.channels != null && message.channels.length)
                for (var i = 0; i < message.channels.length; ++i)
                    $root.GetBroadcastChannelEntry.encode(message.channels[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.release_date != null && message.hasOwnProperty("release_date"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.release_date);
            if (message.developer != null && message.hasOwnProperty("developer"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.developer);
            if (message.publisher != null && message.hasOwnProperty("publisher"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.publisher);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_Game message, length delimited. Does not implicitly {@link CSteamTV_Game.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_Game
         * @static
         * @param {ICSteamTV_Game} message CSteamTV_Game message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_Game.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_Game message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_Game
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_Game} CSteamTV_Game
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_Game.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_Game();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.image = reader.string();
                    break;
                case 4:
                    message.viewers = reader.uint64();
                    break;
                case 5:
                    if (!(message.channels && message.channels.length))
                        message.channels = [];
                    message.channels.push($root.GetBroadcastChannelEntry.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.release_date = reader.string();
                    break;
                case 7:
                    message.developer = reader.string();
                    break;
                case 8:
                    message.publisher = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_Game message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_Game
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_Game} CSteamTV_Game
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_Game.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_Game message.
         * @function verify
         * @memberof CSteamTV_Game
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_Game.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.image != null && message.hasOwnProperty("image"))
                if (!$util.isString(message.image))
                    return "image: string expected";
            if (message.viewers != null && message.hasOwnProperty("viewers"))
                if (!$util.isInteger(message.viewers) && !(message.viewers && $util.isInteger(message.viewers.low) && $util.isInteger(message.viewers.high)))
                    return "viewers: integer|Long expected";
            if (message.channels != null && message.hasOwnProperty("channels")) {
                if (!Array.isArray(message.channels))
                    return "channels: array expected";
                for (var i = 0; i < message.channels.length; ++i) {
                    var error = $root.GetBroadcastChannelEntry.verify(message.channels[i]);
                    if (error)
                        return "channels." + error;
                }
            }
            if (message.release_date != null && message.hasOwnProperty("release_date"))
                if (!$util.isString(message.release_date))
                    return "release_date: string expected";
            if (message.developer != null && message.hasOwnProperty("developer"))
                if (!$util.isString(message.developer))
                    return "developer: string expected";
            if (message.publisher != null && message.hasOwnProperty("publisher"))
                if (!$util.isString(message.publisher))
                    return "publisher: string expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_Game message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_Game
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_Game} CSteamTV_Game
         */
        CSteamTV_Game.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_Game)
                return object;
            var message = new $root.CSteamTV_Game();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.image != null)
                message.image = String(object.image);
            if (object.viewers != null)
                if ($util.Long)
                    (message.viewers = $util.Long.fromValue(object.viewers)).unsigned = true;
                else if (typeof object.viewers === "string")
                    message.viewers = parseInt(object.viewers, 10);
                else if (typeof object.viewers === "number")
                    message.viewers = object.viewers;
                else if (typeof object.viewers === "object")
                    message.viewers = new $util.LongBits(object.viewers.low >>> 0, object.viewers.high >>> 0).toNumber(true);
            if (object.channels) {
                if (!Array.isArray(object.channels))
                    throw TypeError(".CSteamTV_Game.channels: array expected");
                message.channels = [];
                for (var i = 0; i < object.channels.length; ++i) {
                    if (typeof object.channels[i] !== "object")
                        throw TypeError(".CSteamTV_Game.channels: object expected");
                    message.channels[i] = $root.GetBroadcastChannelEntry.fromObject(object.channels[i]);
                }
            }
            if (object.release_date != null)
                message.release_date = String(object.release_date);
            if (object.developer != null)
                message.developer = String(object.developer);
            if (object.publisher != null)
                message.publisher = String(object.publisher);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_Game message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_Game
         * @static
         * @param {CSteamTV_Game} message CSteamTV_Game
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_Game.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.channels = [];
            if (options.defaults) {
                object.appid = 0;
                object.name = "";
                object.image = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.viewers = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.viewers = options.longs === String ? "0" : 0;
                object.release_date = "";
                object.developer = "";
                object.publisher = "";
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.image != null && message.hasOwnProperty("image"))
                object.image = message.image;
            if (message.viewers != null && message.hasOwnProperty("viewers"))
                if (typeof message.viewers === "number")
                    object.viewers = options.longs === String ? String(message.viewers) : message.viewers;
                else
                    object.viewers = options.longs === String ? $util.Long.prototype.toString.call(message.viewers) : options.longs === Number ? new $util.LongBits(message.viewers.low >>> 0, message.viewers.high >>> 0).toNumber(true) : message.viewers;
            if (message.channels && message.channels.length) {
                object.channels = [];
                for (var j = 0; j < message.channels.length; ++j)
                    object.channels[j] = $root.GetBroadcastChannelEntry.toObject(message.channels[j], options);
            }
            if (message.release_date != null && message.hasOwnProperty("release_date"))
                object.release_date = message.release_date;
            if (message.developer != null && message.hasOwnProperty("developer"))
                object.developer = message.developer;
            if (message.publisher != null && message.hasOwnProperty("publisher"))
                object.publisher = message.publisher;
            return object;
        };
    
        /**
         * Converts this CSteamTV_Game to JSON.
         * @function toJSON
         * @memberof CSteamTV_Game
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_Game.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_Game;
    })();
    
    $root.CSteamTV_GetGames_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetGames_Response.
         * @exports ICSteamTV_GetGames_Response
         * @interface ICSteamTV_GetGames_Response
         * @property {Array.<ICSteamTV_Game>|null} [results] CSteamTV_GetGames_Response results
         */
    
        /**
         * Constructs a new CSteamTV_GetGames_Response.
         * @exports CSteamTV_GetGames_Response
         * @classdesc Represents a CSteamTV_GetGames_Response.
         * @implements ICSteamTV_GetGames_Response
         * @constructor
         * @param {ICSteamTV_GetGames_Response=} [properties] Properties to set
         */
        function CSteamTV_GetGames_Response(properties) {
            this.results = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetGames_Response results.
         * @member {Array.<ICSteamTV_Game>} results
         * @memberof CSteamTV_GetGames_Response
         * @instance
         */
        CSteamTV_GetGames_Response.prototype.results = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_GetGames_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetGames_Response
         * @static
         * @param {ICSteamTV_GetGames_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetGames_Response} CSteamTV_GetGames_Response instance
         */
        CSteamTV_GetGames_Response.create = function create(properties) {
            return new CSteamTV_GetGames_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetGames_Response message. Does not implicitly {@link CSteamTV_GetGames_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetGames_Response
         * @static
         * @param {ICSteamTV_GetGames_Response} message CSteamTV_GetGames_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetGames_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.results != null && message.results.length)
                for (var i = 0; i < message.results.length; ++i)
                    $root.CSteamTV_Game.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetGames_Response message, length delimited. Does not implicitly {@link CSteamTV_GetGames_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetGames_Response
         * @static
         * @param {ICSteamTV_GetGames_Response} message CSteamTV_GetGames_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetGames_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetGames_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetGames_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetGames_Response} CSteamTV_GetGames_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetGames_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetGames_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.results && message.results.length))
                        message.results = [];
                    message.results.push($root.CSteamTV_Game.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetGames_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetGames_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetGames_Response} CSteamTV_GetGames_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetGames_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetGames_Response message.
         * @function verify
         * @memberof CSteamTV_GetGames_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetGames_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.results != null && message.hasOwnProperty("results")) {
                if (!Array.isArray(message.results))
                    return "results: array expected";
                for (var i = 0; i < message.results.length; ++i) {
                    var error = $root.CSteamTV_Game.verify(message.results[i]);
                    if (error)
                        return "results." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetGames_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetGames_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetGames_Response} CSteamTV_GetGames_Response
         */
        CSteamTV_GetGames_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetGames_Response)
                return object;
            var message = new $root.CSteamTV_GetGames_Response();
            if (object.results) {
                if (!Array.isArray(object.results))
                    throw TypeError(".CSteamTV_GetGames_Response.results: array expected");
                message.results = [];
                for (var i = 0; i < object.results.length; ++i) {
                    if (typeof object.results[i] !== "object")
                        throw TypeError(".CSteamTV_GetGames_Response.results: object expected");
                    message.results[i] = $root.CSteamTV_Game.fromObject(object.results[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetGames_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetGames_Response
         * @static
         * @param {CSteamTV_GetGames_Response} message CSteamTV_GetGames_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetGames_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.results = [];
            if (message.results && message.results.length) {
                object.results = [];
                for (var j = 0; j < message.results.length; ++j)
                    object.results[j] = $root.CSteamTV_Game.toObject(message.results[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetGames_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetGames_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetGames_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetGames_Response;
    })();
    
    $root.CSteamTV_GetChannels_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetChannels_Response.
         * @exports ICSteamTV_GetChannels_Response
         * @interface ICSteamTV_GetChannels_Response
         * @property {Array.<IGetBroadcastChannelEntry>|null} [results] CSteamTV_GetChannels_Response results
         */
    
        /**
         * Constructs a new CSteamTV_GetChannels_Response.
         * @exports CSteamTV_GetChannels_Response
         * @classdesc Represents a CSteamTV_GetChannels_Response.
         * @implements ICSteamTV_GetChannels_Response
         * @constructor
         * @param {ICSteamTV_GetChannels_Response=} [properties] Properties to set
         */
        function CSteamTV_GetChannels_Response(properties) {
            this.results = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetChannels_Response results.
         * @member {Array.<IGetBroadcastChannelEntry>} results
         * @memberof CSteamTV_GetChannels_Response
         * @instance
         */
        CSteamTV_GetChannels_Response.prototype.results = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_GetChannels_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetChannels_Response
         * @static
         * @param {ICSteamTV_GetChannels_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetChannels_Response} CSteamTV_GetChannels_Response instance
         */
        CSteamTV_GetChannels_Response.create = function create(properties) {
            return new CSteamTV_GetChannels_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetChannels_Response message. Does not implicitly {@link CSteamTV_GetChannels_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetChannels_Response
         * @static
         * @param {ICSteamTV_GetChannels_Response} message CSteamTV_GetChannels_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetChannels_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.results != null && message.results.length)
                for (var i = 0; i < message.results.length; ++i)
                    $root.GetBroadcastChannelEntry.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetChannels_Response message, length delimited. Does not implicitly {@link CSteamTV_GetChannels_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetChannels_Response
         * @static
         * @param {ICSteamTV_GetChannels_Response} message CSteamTV_GetChannels_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetChannels_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetChannels_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetChannels_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetChannels_Response} CSteamTV_GetChannels_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetChannels_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetChannels_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.results && message.results.length))
                        message.results = [];
                    message.results.push($root.GetBroadcastChannelEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetChannels_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetChannels_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetChannels_Response} CSteamTV_GetChannels_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetChannels_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetChannels_Response message.
         * @function verify
         * @memberof CSteamTV_GetChannels_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetChannels_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.results != null && message.hasOwnProperty("results")) {
                if (!Array.isArray(message.results))
                    return "results: array expected";
                for (var i = 0; i < message.results.length; ++i) {
                    var error = $root.GetBroadcastChannelEntry.verify(message.results[i]);
                    if (error)
                        return "results." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetChannels_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetChannels_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetChannels_Response} CSteamTV_GetChannels_Response
         */
        CSteamTV_GetChannels_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetChannels_Response)
                return object;
            var message = new $root.CSteamTV_GetChannels_Response();
            if (object.results) {
                if (!Array.isArray(object.results))
                    throw TypeError(".CSteamTV_GetChannels_Response.results: array expected");
                message.results = [];
                for (var i = 0; i < object.results.length; ++i) {
                    if (typeof object.results[i] !== "object")
                        throw TypeError(".CSteamTV_GetChannels_Response.results: object expected");
                    message.results[i] = $root.GetBroadcastChannelEntry.fromObject(object.results[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetChannels_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetChannels_Response
         * @static
         * @param {CSteamTV_GetChannels_Response} message CSteamTV_GetChannels_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetChannels_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.results = [];
            if (message.results && message.results.length) {
                object.results = [];
                for (var j = 0; j < message.results.length; ++j)
                    object.results[j] = $root.GetBroadcastChannelEntry.toObject(message.results[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetChannels_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetChannels_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetChannels_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetChannels_Response;
    })();
    
    $root.CSteamTV_GetBroadcastChannelBroadcasters_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetBroadcastChannelBroadcasters_Response.
         * @exports ICSteamTV_GetBroadcastChannelBroadcasters_Response
         * @interface ICSteamTV_GetBroadcastChannelBroadcasters_Response
         * @property {Array.<ICSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster>|null} [broadcasters] CSteamTV_GetBroadcastChannelBroadcasters_Response broadcasters
         */
    
        /**
         * Constructs a new CSteamTV_GetBroadcastChannelBroadcasters_Response.
         * @exports CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @classdesc Represents a CSteamTV_GetBroadcastChannelBroadcasters_Response.
         * @implements ICSteamTV_GetBroadcastChannelBroadcasters_Response
         * @constructor
         * @param {ICSteamTV_GetBroadcastChannelBroadcasters_Response=} [properties] Properties to set
         */
        function CSteamTV_GetBroadcastChannelBroadcasters_Response(properties) {
            this.broadcasters = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetBroadcastChannelBroadcasters_Response broadcasters.
         * @member {Array.<ICSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster>} broadcasters
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response.prototype.broadcasters = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_GetBroadcastChannelBroadcasters_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelBroadcasters_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetBroadcastChannelBroadcasters_Response} CSteamTV_GetBroadcastChannelBroadcasters_Response instance
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response.create = function create(properties) {
            return new CSteamTV_GetBroadcastChannelBroadcasters_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelBroadcasters_Response message. Does not implicitly {@link CSteamTV_GetBroadcastChannelBroadcasters_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelBroadcasters_Response} message CSteamTV_GetBroadcastChannelBroadcasters_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcasters != null && message.broadcasters.length)
                for (var i = 0; i < message.broadcasters.length; ++i)
                    $root.CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.encode(message.broadcasters[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelBroadcasters_Response message, length delimited. Does not implicitly {@link CSteamTV_GetBroadcastChannelBroadcasters_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelBroadcasters_Response} message CSteamTV_GetBroadcastChannelBroadcasters_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelBroadcasters_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetBroadcastChannelBroadcasters_Response} CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetBroadcastChannelBroadcasters_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.broadcasters && message.broadcasters.length))
                        message.broadcasters = [];
                    message.broadcasters.push($root.CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelBroadcasters_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetBroadcastChannelBroadcasters_Response} CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetBroadcastChannelBroadcasters_Response message.
         * @function verify
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcasters != null && message.hasOwnProperty("broadcasters")) {
                if (!Array.isArray(message.broadcasters))
                    return "broadcasters: array expected";
                for (var i = 0; i < message.broadcasters.length; ++i) {
                    var error = $root.CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.verify(message.broadcasters[i]);
                    if (error)
                        return "broadcasters." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetBroadcastChannelBroadcasters_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetBroadcastChannelBroadcasters_Response} CSteamTV_GetBroadcastChannelBroadcasters_Response
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetBroadcastChannelBroadcasters_Response)
                return object;
            var message = new $root.CSteamTV_GetBroadcastChannelBroadcasters_Response();
            if (object.broadcasters) {
                if (!Array.isArray(object.broadcasters))
                    throw TypeError(".CSteamTV_GetBroadcastChannelBroadcasters_Response.broadcasters: array expected");
                message.broadcasters = [];
                for (var i = 0; i < object.broadcasters.length; ++i) {
                    if (typeof object.broadcasters[i] !== "object")
                        throw TypeError(".CSteamTV_GetBroadcastChannelBroadcasters_Response.broadcasters: object expected");
                    message.broadcasters[i] = $root.CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.fromObject(object.broadcasters[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetBroadcastChannelBroadcasters_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @static
         * @param {CSteamTV_GetBroadcastChannelBroadcasters_Response} message CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.broadcasters = [];
            if (message.broadcasters && message.broadcasters.length) {
                object.broadcasters = [];
                for (var j = 0; j < message.broadcasters.length; ++j)
                    object.broadcasters[j] = $root.CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.toObject(message.broadcasters[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetBroadcastChannelBroadcasters_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetBroadcastChannelBroadcasters_Response;
    })();
    
    $root.CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster = (function() {
    
        /**
         * Properties of a CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.
         * @exports ICSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @interface ICSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @property {number|Long|null} [steamid] CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster steamid
         * @property {string|null} [name] CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster name
         * @property {string|null} [rtmp_token] CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster rtmp_token
         */
    
        /**
         * Constructs a new CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.
         * @exports CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @classdesc Represents a CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.
         * @implements ICSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @constructor
         * @param {ICSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster=} [properties] Properties to set
         */
        function CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster steamid.
         * @member {number|Long} steamid
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @instance
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster name.
         * @member {string} name
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @instance
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.prototype.name = "";
    
        /**
         * CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster rtmp_token.
         * @member {string} rtmp_token
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @instance
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.prototype.rtmp_token = "";
    
        /**
         * Creates a new CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @static
         * @param {ICSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster=} [properties] Properties to set
         * @returns {CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster} CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster instance
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.create = function create(properties) {
            return new CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster message. Does not implicitly {@link CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @static
         * @param {ICSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster} message CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.rtmp_token != null && message.hasOwnProperty("rtmp_token"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.rtmp_token);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster message, length delimited. Does not implicitly {@link CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @static
         * @param {ICSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster} message CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster} CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.rtmp_token = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster} CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster message.
         * @function verify
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.rtmp_token != null && message.hasOwnProperty("rtmp_token"))
                if (!$util.isString(message.rtmp_token))
                    return "rtmp_token: string expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster} CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster)
                return object;
            var message = new $root.CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.name != null)
                message.name = String(object.name);
            if (object.rtmp_token != null)
                message.rtmp_token = String(object.rtmp_token);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @static
         * @param {CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster} message CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.name = "";
                object.rtmp_token = "";
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.rtmp_token != null && message.hasOwnProperty("rtmp_token"))
                object.rtmp_token = message.rtmp_token;
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster;
    })();
    
    $root.CSteamTV_ChatBan = (function() {
    
        /**
         * Properties of a CSteamTV_ChatBan.
         * @exports ICSteamTV_ChatBan
         * @interface ICSteamTV_ChatBan
         * @property {number|Long|null} [issuer_steamid] CSteamTV_ChatBan issuer_steamid
         * @property {number|Long|null} [chatter_steamid] CSteamTV_ChatBan chatter_steamid
         * @property {string|null} [time_expires] CSteamTV_ChatBan time_expires
         * @property {boolean|null} [permanent] CSteamTV_ChatBan permanent
         * @property {string|null} [name] CSteamTV_ChatBan name
         */
    
        /**
         * Constructs a new CSteamTV_ChatBan.
         * @exports CSteamTV_ChatBan
         * @classdesc Represents a CSteamTV_ChatBan.
         * @implements ICSteamTV_ChatBan
         * @constructor
         * @param {ICSteamTV_ChatBan=} [properties] Properties to set
         */
        function CSteamTV_ChatBan(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_ChatBan issuer_steamid.
         * @member {number|Long} issuer_steamid
         * @memberof CSteamTV_ChatBan
         * @instance
         */
        CSteamTV_ChatBan.prototype.issuer_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_ChatBan chatter_steamid.
         * @member {number|Long} chatter_steamid
         * @memberof CSteamTV_ChatBan
         * @instance
         */
        CSteamTV_ChatBan.prototype.chatter_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_ChatBan time_expires.
         * @member {string} time_expires
         * @memberof CSteamTV_ChatBan
         * @instance
         */
        CSteamTV_ChatBan.prototype.time_expires = "";
    
        /**
         * CSteamTV_ChatBan permanent.
         * @member {boolean} permanent
         * @memberof CSteamTV_ChatBan
         * @instance
         */
        CSteamTV_ChatBan.prototype.permanent = false;
    
        /**
         * CSteamTV_ChatBan name.
         * @member {string} name
         * @memberof CSteamTV_ChatBan
         * @instance
         */
        CSteamTV_ChatBan.prototype.name = "";
    
        /**
         * Creates a new CSteamTV_ChatBan instance using the specified properties.
         * @function create
         * @memberof CSteamTV_ChatBan
         * @static
         * @param {ICSteamTV_ChatBan=} [properties] Properties to set
         * @returns {CSteamTV_ChatBan} CSteamTV_ChatBan instance
         */
        CSteamTV_ChatBan.create = function create(properties) {
            return new CSteamTV_ChatBan(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_ChatBan message. Does not implicitly {@link CSteamTV_ChatBan.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_ChatBan
         * @static
         * @param {ICSteamTV_ChatBan} message CSteamTV_ChatBan message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_ChatBan.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.issuer_steamid != null && message.hasOwnProperty("issuer_steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.issuer_steamid);
            if (message.chatter_steamid != null && message.hasOwnProperty("chatter_steamid"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.chatter_steamid);
            if (message.time_expires != null && message.hasOwnProperty("time_expires"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.time_expires);
            if (message.permanent != null && message.hasOwnProperty("permanent"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.permanent);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_ChatBan message, length delimited. Does not implicitly {@link CSteamTV_ChatBan.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_ChatBan
         * @static
         * @param {ICSteamTV_ChatBan} message CSteamTV_ChatBan message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_ChatBan.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_ChatBan message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_ChatBan
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_ChatBan} CSteamTV_ChatBan
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_ChatBan.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_ChatBan();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.issuer_steamid = reader.fixed64();
                    break;
                case 2:
                    message.chatter_steamid = reader.fixed64();
                    break;
                case 3:
                    message.time_expires = reader.string();
                    break;
                case 4:
                    message.permanent = reader.bool();
                    break;
                case 5:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_ChatBan message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_ChatBan
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_ChatBan} CSteamTV_ChatBan
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_ChatBan.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_ChatBan message.
         * @function verify
         * @memberof CSteamTV_ChatBan
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_ChatBan.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.issuer_steamid != null && message.hasOwnProperty("issuer_steamid"))
                if (!$util.isInteger(message.issuer_steamid) && !(message.issuer_steamid && $util.isInteger(message.issuer_steamid.low) && $util.isInteger(message.issuer_steamid.high)))
                    return "issuer_steamid: integer|Long expected";
            if (message.chatter_steamid != null && message.hasOwnProperty("chatter_steamid"))
                if (!$util.isInteger(message.chatter_steamid) && !(message.chatter_steamid && $util.isInteger(message.chatter_steamid.low) && $util.isInteger(message.chatter_steamid.high)))
                    return "chatter_steamid: integer|Long expected";
            if (message.time_expires != null && message.hasOwnProperty("time_expires"))
                if (!$util.isString(message.time_expires))
                    return "time_expires: string expected";
            if (message.permanent != null && message.hasOwnProperty("permanent"))
                if (typeof message.permanent !== "boolean")
                    return "permanent: boolean expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_ChatBan message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_ChatBan
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_ChatBan} CSteamTV_ChatBan
         */
        CSteamTV_ChatBan.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_ChatBan)
                return object;
            var message = new $root.CSteamTV_ChatBan();
            if (object.issuer_steamid != null)
                if ($util.Long)
                    (message.issuer_steamid = $util.Long.fromValue(object.issuer_steamid)).unsigned = false;
                else if (typeof object.issuer_steamid === "string")
                    message.issuer_steamid = parseInt(object.issuer_steamid, 10);
                else if (typeof object.issuer_steamid === "number")
                    message.issuer_steamid = object.issuer_steamid;
                else if (typeof object.issuer_steamid === "object")
                    message.issuer_steamid = new $util.LongBits(object.issuer_steamid.low >>> 0, object.issuer_steamid.high >>> 0).toNumber();
            if (object.chatter_steamid != null)
                if ($util.Long)
                    (message.chatter_steamid = $util.Long.fromValue(object.chatter_steamid)).unsigned = false;
                else if (typeof object.chatter_steamid === "string")
                    message.chatter_steamid = parseInt(object.chatter_steamid, 10);
                else if (typeof object.chatter_steamid === "number")
                    message.chatter_steamid = object.chatter_steamid;
                else if (typeof object.chatter_steamid === "object")
                    message.chatter_steamid = new $util.LongBits(object.chatter_steamid.low >>> 0, object.chatter_steamid.high >>> 0).toNumber();
            if (object.time_expires != null)
                message.time_expires = String(object.time_expires);
            if (object.permanent != null)
                message.permanent = Boolean(object.permanent);
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_ChatBan message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_ChatBan
         * @static
         * @param {CSteamTV_ChatBan} message CSteamTV_ChatBan
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_ChatBan.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.issuer_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.issuer_steamid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.chatter_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.chatter_steamid = options.longs === String ? "0" : 0;
                object.time_expires = "";
                object.permanent = false;
                object.name = "";
            }
            if (message.issuer_steamid != null && message.hasOwnProperty("issuer_steamid"))
                if (typeof message.issuer_steamid === "number")
                    object.issuer_steamid = options.longs === String ? String(message.issuer_steamid) : message.issuer_steamid;
                else
                    object.issuer_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.issuer_steamid) : options.longs === Number ? new $util.LongBits(message.issuer_steamid.low >>> 0, message.issuer_steamid.high >>> 0).toNumber() : message.issuer_steamid;
            if (message.chatter_steamid != null && message.hasOwnProperty("chatter_steamid"))
                if (typeof message.chatter_steamid === "number")
                    object.chatter_steamid = options.longs === String ? String(message.chatter_steamid) : message.chatter_steamid;
                else
                    object.chatter_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.chatter_steamid) : options.longs === Number ? new $util.LongBits(message.chatter_steamid.low >>> 0, message.chatter_steamid.high >>> 0).toNumber() : message.chatter_steamid;
            if (message.time_expires != null && message.hasOwnProperty("time_expires"))
                object.time_expires = message.time_expires;
            if (message.permanent != null && message.hasOwnProperty("permanent"))
                object.permanent = message.permanent;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };
    
        /**
         * Converts this CSteamTV_ChatBan to JSON.
         * @function toJSON
         * @memberof CSteamTV_ChatBan
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_ChatBan.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_ChatBan;
    })();
    
    $root.CSteamTV_AddChatBan_Request = (function() {
    
        /**
         * Properties of a CSteamTV_AddChatBan_Request.
         * @exports ICSteamTV_AddChatBan_Request
         * @interface ICSteamTV_AddChatBan_Request
         * @property {number|Long|null} [broadcast_channel_id] CSteamTV_AddChatBan_Request broadcast_channel_id
         * @property {number|Long|null} [chatter_steamid] CSteamTV_AddChatBan_Request chatter_steamid
         * @property {number|null} [duration] CSteamTV_AddChatBan_Request duration
         * @property {boolean|null} [permanent] CSteamTV_AddChatBan_Request permanent
         * @property {boolean|null} [undo] CSteamTV_AddChatBan_Request undo
         */
    
        /**
         * Constructs a new CSteamTV_AddChatBan_Request.
         * @exports CSteamTV_AddChatBan_Request
         * @classdesc Represents a CSteamTV_AddChatBan_Request.
         * @implements ICSteamTV_AddChatBan_Request
         * @constructor
         * @param {ICSteamTV_AddChatBan_Request=} [properties] Properties to set
         */
        function CSteamTV_AddChatBan_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_AddChatBan_Request broadcast_channel_id.
         * @member {number|Long} broadcast_channel_id
         * @memberof CSteamTV_AddChatBan_Request
         * @instance
         */
        CSteamTV_AddChatBan_Request.prototype.broadcast_channel_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_AddChatBan_Request chatter_steamid.
         * @member {number|Long} chatter_steamid
         * @memberof CSteamTV_AddChatBan_Request
         * @instance
         */
        CSteamTV_AddChatBan_Request.prototype.chatter_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_AddChatBan_Request duration.
         * @member {number} duration
         * @memberof CSteamTV_AddChatBan_Request
         * @instance
         */
        CSteamTV_AddChatBan_Request.prototype.duration = 0;
    
        /**
         * CSteamTV_AddChatBan_Request permanent.
         * @member {boolean} permanent
         * @memberof CSteamTV_AddChatBan_Request
         * @instance
         */
        CSteamTV_AddChatBan_Request.prototype.permanent = false;
    
        /**
         * CSteamTV_AddChatBan_Request undo.
         * @member {boolean} undo
         * @memberof CSteamTV_AddChatBan_Request
         * @instance
         */
        CSteamTV_AddChatBan_Request.prototype.undo = false;
    
        /**
         * Creates a new CSteamTV_AddChatBan_Request instance using the specified properties.
         * @function create
         * @memberof CSteamTV_AddChatBan_Request
         * @static
         * @param {ICSteamTV_AddChatBan_Request=} [properties] Properties to set
         * @returns {CSteamTV_AddChatBan_Request} CSteamTV_AddChatBan_Request instance
         */
        CSteamTV_AddChatBan_Request.create = function create(properties) {
            return new CSteamTV_AddChatBan_Request(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_AddChatBan_Request message. Does not implicitly {@link CSteamTV_AddChatBan_Request.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_AddChatBan_Request
         * @static
         * @param {ICSteamTV_AddChatBan_Request} message CSteamTV_AddChatBan_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_AddChatBan_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.broadcast_channel_id);
            if (message.chatter_steamid != null && message.hasOwnProperty("chatter_steamid"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.chatter_steamid);
            if (message.duration != null && message.hasOwnProperty("duration"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.duration);
            if (message.permanent != null && message.hasOwnProperty("permanent"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.permanent);
            if (message.undo != null && message.hasOwnProperty("undo"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.undo);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_AddChatBan_Request message, length delimited. Does not implicitly {@link CSteamTV_AddChatBan_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_AddChatBan_Request
         * @static
         * @param {ICSteamTV_AddChatBan_Request} message CSteamTV_AddChatBan_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_AddChatBan_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_AddChatBan_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_AddChatBan_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_AddChatBan_Request} CSteamTV_AddChatBan_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_AddChatBan_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_AddChatBan_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.broadcast_channel_id = reader.fixed64();
                    break;
                case 2:
                    message.chatter_steamid = reader.fixed64();
                    break;
                case 3:
                    message.duration = reader.uint32();
                    break;
                case 4:
                    message.permanent = reader.bool();
                    break;
                case 5:
                    message.undo = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_AddChatBan_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_AddChatBan_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_AddChatBan_Request} CSteamTV_AddChatBan_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_AddChatBan_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_AddChatBan_Request message.
         * @function verify
         * @memberof CSteamTV_AddChatBan_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_AddChatBan_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (!$util.isInteger(message.broadcast_channel_id) && !(message.broadcast_channel_id && $util.isInteger(message.broadcast_channel_id.low) && $util.isInteger(message.broadcast_channel_id.high)))
                    return "broadcast_channel_id: integer|Long expected";
            if (message.chatter_steamid != null && message.hasOwnProperty("chatter_steamid"))
                if (!$util.isInteger(message.chatter_steamid) && !(message.chatter_steamid && $util.isInteger(message.chatter_steamid.low) && $util.isInteger(message.chatter_steamid.high)))
                    return "chatter_steamid: integer|Long expected";
            if (message.duration != null && message.hasOwnProperty("duration"))
                if (!$util.isInteger(message.duration))
                    return "duration: integer expected";
            if (message.permanent != null && message.hasOwnProperty("permanent"))
                if (typeof message.permanent !== "boolean")
                    return "permanent: boolean expected";
            if (message.undo != null && message.hasOwnProperty("undo"))
                if (typeof message.undo !== "boolean")
                    return "undo: boolean expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_AddChatBan_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_AddChatBan_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_AddChatBan_Request} CSteamTV_AddChatBan_Request
         */
        CSteamTV_AddChatBan_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_AddChatBan_Request)
                return object;
            var message = new $root.CSteamTV_AddChatBan_Request();
            if (object.broadcast_channel_id != null)
                if ($util.Long)
                    (message.broadcast_channel_id = $util.Long.fromValue(object.broadcast_channel_id)).unsigned = false;
                else if (typeof object.broadcast_channel_id === "string")
                    message.broadcast_channel_id = parseInt(object.broadcast_channel_id, 10);
                else if (typeof object.broadcast_channel_id === "number")
                    message.broadcast_channel_id = object.broadcast_channel_id;
                else if (typeof object.broadcast_channel_id === "object")
                    message.broadcast_channel_id = new $util.LongBits(object.broadcast_channel_id.low >>> 0, object.broadcast_channel_id.high >>> 0).toNumber();
            if (object.chatter_steamid != null)
                if ($util.Long)
                    (message.chatter_steamid = $util.Long.fromValue(object.chatter_steamid)).unsigned = false;
                else if (typeof object.chatter_steamid === "string")
                    message.chatter_steamid = parseInt(object.chatter_steamid, 10);
                else if (typeof object.chatter_steamid === "number")
                    message.chatter_steamid = object.chatter_steamid;
                else if (typeof object.chatter_steamid === "object")
                    message.chatter_steamid = new $util.LongBits(object.chatter_steamid.low >>> 0, object.chatter_steamid.high >>> 0).toNumber();
            if (object.duration != null)
                message.duration = object.duration >>> 0;
            if (object.permanent != null)
                message.permanent = Boolean(object.permanent);
            if (object.undo != null)
                message.undo = Boolean(object.undo);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_AddChatBan_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_AddChatBan_Request
         * @static
         * @param {CSteamTV_AddChatBan_Request} message CSteamTV_AddChatBan_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_AddChatBan_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.broadcast_channel_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.broadcast_channel_id = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.chatter_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.chatter_steamid = options.longs === String ? "0" : 0;
                object.duration = 0;
                object.permanent = false;
                object.undo = false;
            }
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (typeof message.broadcast_channel_id === "number")
                    object.broadcast_channel_id = options.longs === String ? String(message.broadcast_channel_id) : message.broadcast_channel_id;
                else
                    object.broadcast_channel_id = options.longs === String ? $util.Long.prototype.toString.call(message.broadcast_channel_id) : options.longs === Number ? new $util.LongBits(message.broadcast_channel_id.low >>> 0, message.broadcast_channel_id.high >>> 0).toNumber() : message.broadcast_channel_id;
            if (message.chatter_steamid != null && message.hasOwnProperty("chatter_steamid"))
                if (typeof message.chatter_steamid === "number")
                    object.chatter_steamid = options.longs === String ? String(message.chatter_steamid) : message.chatter_steamid;
                else
                    object.chatter_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.chatter_steamid) : options.longs === Number ? new $util.LongBits(message.chatter_steamid.low >>> 0, message.chatter_steamid.high >>> 0).toNumber() : message.chatter_steamid;
            if (message.duration != null && message.hasOwnProperty("duration"))
                object.duration = message.duration;
            if (message.permanent != null && message.hasOwnProperty("permanent"))
                object.permanent = message.permanent;
            if (message.undo != null && message.hasOwnProperty("undo"))
                object.undo = message.undo;
            return object;
        };
    
        /**
         * Converts this CSteamTV_AddChatBan_Request to JSON.
         * @function toJSON
         * @memberof CSteamTV_AddChatBan_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_AddChatBan_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_AddChatBan_Request;
    })();
    
    $root.CSteamTV_AddChatBan_Response = (function() {
    
        /**
         * Properties of a CSteamTV_AddChatBan_Response.
         * @exports ICSteamTV_AddChatBan_Response
         * @interface ICSteamTV_AddChatBan_Response
         */
    
        /**
         * Constructs a new CSteamTV_AddChatBan_Response.
         * @exports CSteamTV_AddChatBan_Response
         * @classdesc Represents a CSteamTV_AddChatBan_Response.
         * @implements ICSteamTV_AddChatBan_Response
         * @constructor
         * @param {ICSteamTV_AddChatBan_Response=} [properties] Properties to set
         */
        function CSteamTV_AddChatBan_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CSteamTV_AddChatBan_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_AddChatBan_Response
         * @static
         * @param {ICSteamTV_AddChatBan_Response=} [properties] Properties to set
         * @returns {CSteamTV_AddChatBan_Response} CSteamTV_AddChatBan_Response instance
         */
        CSteamTV_AddChatBan_Response.create = function create(properties) {
            return new CSteamTV_AddChatBan_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_AddChatBan_Response message. Does not implicitly {@link CSteamTV_AddChatBan_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_AddChatBan_Response
         * @static
         * @param {ICSteamTV_AddChatBan_Response} message CSteamTV_AddChatBan_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_AddChatBan_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_AddChatBan_Response message, length delimited. Does not implicitly {@link CSteamTV_AddChatBan_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_AddChatBan_Response
         * @static
         * @param {ICSteamTV_AddChatBan_Response} message CSteamTV_AddChatBan_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_AddChatBan_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_AddChatBan_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_AddChatBan_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_AddChatBan_Response} CSteamTV_AddChatBan_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_AddChatBan_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_AddChatBan_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_AddChatBan_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_AddChatBan_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_AddChatBan_Response} CSteamTV_AddChatBan_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_AddChatBan_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_AddChatBan_Response message.
         * @function verify
         * @memberof CSteamTV_AddChatBan_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_AddChatBan_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_AddChatBan_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_AddChatBan_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_AddChatBan_Response} CSteamTV_AddChatBan_Response
         */
        CSteamTV_AddChatBan_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_AddChatBan_Response)
                return object;
            return new $root.CSteamTV_AddChatBan_Response();
        };
    
        /**
         * Creates a plain object from a CSteamTV_AddChatBan_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_AddChatBan_Response
         * @static
         * @param {CSteamTV_AddChatBan_Response} message CSteamTV_AddChatBan_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_AddChatBan_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CSteamTV_AddChatBan_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_AddChatBan_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_AddChatBan_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_AddChatBan_Response;
    })();
    
    $root.CSteamTV_GetChatBans_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetChatBans_Response.
         * @exports ICSteamTV_GetChatBans_Response
         * @interface ICSteamTV_GetChatBans_Response
         * @property {Array.<ICSteamTV_ChatBan>|null} [results] CSteamTV_GetChatBans_Response results
         */
    
        /**
         * Constructs a new CSteamTV_GetChatBans_Response.
         * @exports CSteamTV_GetChatBans_Response
         * @classdesc Represents a CSteamTV_GetChatBans_Response.
         * @implements ICSteamTV_GetChatBans_Response
         * @constructor
         * @param {ICSteamTV_GetChatBans_Response=} [properties] Properties to set
         */
        function CSteamTV_GetChatBans_Response(properties) {
            this.results = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetChatBans_Response results.
         * @member {Array.<ICSteamTV_ChatBan>} results
         * @memberof CSteamTV_GetChatBans_Response
         * @instance
         */
        CSteamTV_GetChatBans_Response.prototype.results = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_GetChatBans_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetChatBans_Response
         * @static
         * @param {ICSteamTV_GetChatBans_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetChatBans_Response} CSteamTV_GetChatBans_Response instance
         */
        CSteamTV_GetChatBans_Response.create = function create(properties) {
            return new CSteamTV_GetChatBans_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetChatBans_Response message. Does not implicitly {@link CSteamTV_GetChatBans_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetChatBans_Response
         * @static
         * @param {ICSteamTV_GetChatBans_Response} message CSteamTV_GetChatBans_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetChatBans_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.results != null && message.results.length)
                for (var i = 0; i < message.results.length; ++i)
                    $root.CSteamTV_ChatBan.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetChatBans_Response message, length delimited. Does not implicitly {@link CSteamTV_GetChatBans_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetChatBans_Response
         * @static
         * @param {ICSteamTV_GetChatBans_Response} message CSteamTV_GetChatBans_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetChatBans_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetChatBans_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetChatBans_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetChatBans_Response} CSteamTV_GetChatBans_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetChatBans_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetChatBans_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.results && message.results.length))
                        message.results = [];
                    message.results.push($root.CSteamTV_ChatBan.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetChatBans_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetChatBans_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetChatBans_Response} CSteamTV_GetChatBans_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetChatBans_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetChatBans_Response message.
         * @function verify
         * @memberof CSteamTV_GetChatBans_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetChatBans_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.results != null && message.hasOwnProperty("results")) {
                if (!Array.isArray(message.results))
                    return "results: array expected";
                for (var i = 0; i < message.results.length; ++i) {
                    var error = $root.CSteamTV_ChatBan.verify(message.results[i]);
                    if (error)
                        return "results." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetChatBans_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetChatBans_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetChatBans_Response} CSteamTV_GetChatBans_Response
         */
        CSteamTV_GetChatBans_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetChatBans_Response)
                return object;
            var message = new $root.CSteamTV_GetChatBans_Response();
            if (object.results) {
                if (!Array.isArray(object.results))
                    throw TypeError(".CSteamTV_GetChatBans_Response.results: array expected");
                message.results = [];
                for (var i = 0; i < object.results.length; ++i) {
                    if (typeof object.results[i] !== "object")
                        throw TypeError(".CSteamTV_GetChatBans_Response.results: object expected");
                    message.results[i] = $root.CSteamTV_ChatBan.fromObject(object.results[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetChatBans_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetChatBans_Response
         * @static
         * @param {CSteamTV_GetChatBans_Response} message CSteamTV_GetChatBans_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetChatBans_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.results = [];
            if (message.results && message.results.length) {
                object.results = [];
                for (var j = 0; j < message.results.length; ++j)
                    object.results[j] = $root.CSteamTV_ChatBan.toObject(message.results[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetChatBans_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetChatBans_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetChatBans_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetChatBans_Response;
    })();
    
    $root.CSteamTV_AddChatModerator_Request = (function() {
    
        /**
         * Properties of a CSteamTV_AddChatModerator_Request.
         * @exports ICSteamTV_AddChatModerator_Request
         * @interface ICSteamTV_AddChatModerator_Request
         * @property {number|Long|null} [broadcast_channel_id] CSteamTV_AddChatModerator_Request broadcast_channel_id
         * @property {number|Long|null} [moderator_steamid] CSteamTV_AddChatModerator_Request moderator_steamid
         * @property {boolean|null} [undo] CSteamTV_AddChatModerator_Request undo
         */
    
        /**
         * Constructs a new CSteamTV_AddChatModerator_Request.
         * @exports CSteamTV_AddChatModerator_Request
         * @classdesc Represents a CSteamTV_AddChatModerator_Request.
         * @implements ICSteamTV_AddChatModerator_Request
         * @constructor
         * @param {ICSteamTV_AddChatModerator_Request=} [properties] Properties to set
         */
        function CSteamTV_AddChatModerator_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_AddChatModerator_Request broadcast_channel_id.
         * @member {number|Long} broadcast_channel_id
         * @memberof CSteamTV_AddChatModerator_Request
         * @instance
         */
        CSteamTV_AddChatModerator_Request.prototype.broadcast_channel_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_AddChatModerator_Request moderator_steamid.
         * @member {number|Long} moderator_steamid
         * @memberof CSteamTV_AddChatModerator_Request
         * @instance
         */
        CSteamTV_AddChatModerator_Request.prototype.moderator_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_AddChatModerator_Request undo.
         * @member {boolean} undo
         * @memberof CSteamTV_AddChatModerator_Request
         * @instance
         */
        CSteamTV_AddChatModerator_Request.prototype.undo = false;
    
        /**
         * Creates a new CSteamTV_AddChatModerator_Request instance using the specified properties.
         * @function create
         * @memberof CSteamTV_AddChatModerator_Request
         * @static
         * @param {ICSteamTV_AddChatModerator_Request=} [properties] Properties to set
         * @returns {CSteamTV_AddChatModerator_Request} CSteamTV_AddChatModerator_Request instance
         */
        CSteamTV_AddChatModerator_Request.create = function create(properties) {
            return new CSteamTV_AddChatModerator_Request(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_AddChatModerator_Request message. Does not implicitly {@link CSteamTV_AddChatModerator_Request.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_AddChatModerator_Request
         * @static
         * @param {ICSteamTV_AddChatModerator_Request} message CSteamTV_AddChatModerator_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_AddChatModerator_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.broadcast_channel_id);
            if (message.moderator_steamid != null && message.hasOwnProperty("moderator_steamid"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.moderator_steamid);
            if (message.undo != null && message.hasOwnProperty("undo"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.undo);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_AddChatModerator_Request message, length delimited. Does not implicitly {@link CSteamTV_AddChatModerator_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_AddChatModerator_Request
         * @static
         * @param {ICSteamTV_AddChatModerator_Request} message CSteamTV_AddChatModerator_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_AddChatModerator_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_AddChatModerator_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_AddChatModerator_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_AddChatModerator_Request} CSteamTV_AddChatModerator_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_AddChatModerator_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_AddChatModerator_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.broadcast_channel_id = reader.fixed64();
                    break;
                case 2:
                    message.moderator_steamid = reader.fixed64();
                    break;
                case 3:
                    message.undo = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_AddChatModerator_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_AddChatModerator_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_AddChatModerator_Request} CSteamTV_AddChatModerator_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_AddChatModerator_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_AddChatModerator_Request message.
         * @function verify
         * @memberof CSteamTV_AddChatModerator_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_AddChatModerator_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (!$util.isInteger(message.broadcast_channel_id) && !(message.broadcast_channel_id && $util.isInteger(message.broadcast_channel_id.low) && $util.isInteger(message.broadcast_channel_id.high)))
                    return "broadcast_channel_id: integer|Long expected";
            if (message.moderator_steamid != null && message.hasOwnProperty("moderator_steamid"))
                if (!$util.isInteger(message.moderator_steamid) && !(message.moderator_steamid && $util.isInteger(message.moderator_steamid.low) && $util.isInteger(message.moderator_steamid.high)))
                    return "moderator_steamid: integer|Long expected";
            if (message.undo != null && message.hasOwnProperty("undo"))
                if (typeof message.undo !== "boolean")
                    return "undo: boolean expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_AddChatModerator_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_AddChatModerator_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_AddChatModerator_Request} CSteamTV_AddChatModerator_Request
         */
        CSteamTV_AddChatModerator_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_AddChatModerator_Request)
                return object;
            var message = new $root.CSteamTV_AddChatModerator_Request();
            if (object.broadcast_channel_id != null)
                if ($util.Long)
                    (message.broadcast_channel_id = $util.Long.fromValue(object.broadcast_channel_id)).unsigned = false;
                else if (typeof object.broadcast_channel_id === "string")
                    message.broadcast_channel_id = parseInt(object.broadcast_channel_id, 10);
                else if (typeof object.broadcast_channel_id === "number")
                    message.broadcast_channel_id = object.broadcast_channel_id;
                else if (typeof object.broadcast_channel_id === "object")
                    message.broadcast_channel_id = new $util.LongBits(object.broadcast_channel_id.low >>> 0, object.broadcast_channel_id.high >>> 0).toNumber();
            if (object.moderator_steamid != null)
                if ($util.Long)
                    (message.moderator_steamid = $util.Long.fromValue(object.moderator_steamid)).unsigned = false;
                else if (typeof object.moderator_steamid === "string")
                    message.moderator_steamid = parseInt(object.moderator_steamid, 10);
                else if (typeof object.moderator_steamid === "number")
                    message.moderator_steamid = object.moderator_steamid;
                else if (typeof object.moderator_steamid === "object")
                    message.moderator_steamid = new $util.LongBits(object.moderator_steamid.low >>> 0, object.moderator_steamid.high >>> 0).toNumber();
            if (object.undo != null)
                message.undo = Boolean(object.undo);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_AddChatModerator_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_AddChatModerator_Request
         * @static
         * @param {CSteamTV_AddChatModerator_Request} message CSteamTV_AddChatModerator_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_AddChatModerator_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.broadcast_channel_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.broadcast_channel_id = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.moderator_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.moderator_steamid = options.longs === String ? "0" : 0;
                object.undo = false;
            }
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (typeof message.broadcast_channel_id === "number")
                    object.broadcast_channel_id = options.longs === String ? String(message.broadcast_channel_id) : message.broadcast_channel_id;
                else
                    object.broadcast_channel_id = options.longs === String ? $util.Long.prototype.toString.call(message.broadcast_channel_id) : options.longs === Number ? new $util.LongBits(message.broadcast_channel_id.low >>> 0, message.broadcast_channel_id.high >>> 0).toNumber() : message.broadcast_channel_id;
            if (message.moderator_steamid != null && message.hasOwnProperty("moderator_steamid"))
                if (typeof message.moderator_steamid === "number")
                    object.moderator_steamid = options.longs === String ? String(message.moderator_steamid) : message.moderator_steamid;
                else
                    object.moderator_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.moderator_steamid) : options.longs === Number ? new $util.LongBits(message.moderator_steamid.low >>> 0, message.moderator_steamid.high >>> 0).toNumber() : message.moderator_steamid;
            if (message.undo != null && message.hasOwnProperty("undo"))
                object.undo = message.undo;
            return object;
        };
    
        /**
         * Converts this CSteamTV_AddChatModerator_Request to JSON.
         * @function toJSON
         * @memberof CSteamTV_AddChatModerator_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_AddChatModerator_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_AddChatModerator_Request;
    })();
    
    $root.CSteamTV_AddChatModerator_Response = (function() {
    
        /**
         * Properties of a CSteamTV_AddChatModerator_Response.
         * @exports ICSteamTV_AddChatModerator_Response
         * @interface ICSteamTV_AddChatModerator_Response
         */
    
        /**
         * Constructs a new CSteamTV_AddChatModerator_Response.
         * @exports CSteamTV_AddChatModerator_Response
         * @classdesc Represents a CSteamTV_AddChatModerator_Response.
         * @implements ICSteamTV_AddChatModerator_Response
         * @constructor
         * @param {ICSteamTV_AddChatModerator_Response=} [properties] Properties to set
         */
        function CSteamTV_AddChatModerator_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CSteamTV_AddChatModerator_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_AddChatModerator_Response
         * @static
         * @param {ICSteamTV_AddChatModerator_Response=} [properties] Properties to set
         * @returns {CSteamTV_AddChatModerator_Response} CSteamTV_AddChatModerator_Response instance
         */
        CSteamTV_AddChatModerator_Response.create = function create(properties) {
            return new CSteamTV_AddChatModerator_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_AddChatModerator_Response message. Does not implicitly {@link CSteamTV_AddChatModerator_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_AddChatModerator_Response
         * @static
         * @param {ICSteamTV_AddChatModerator_Response} message CSteamTV_AddChatModerator_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_AddChatModerator_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_AddChatModerator_Response message, length delimited. Does not implicitly {@link CSteamTV_AddChatModerator_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_AddChatModerator_Response
         * @static
         * @param {ICSteamTV_AddChatModerator_Response} message CSteamTV_AddChatModerator_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_AddChatModerator_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_AddChatModerator_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_AddChatModerator_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_AddChatModerator_Response} CSteamTV_AddChatModerator_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_AddChatModerator_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_AddChatModerator_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_AddChatModerator_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_AddChatModerator_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_AddChatModerator_Response} CSteamTV_AddChatModerator_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_AddChatModerator_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_AddChatModerator_Response message.
         * @function verify
         * @memberof CSteamTV_AddChatModerator_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_AddChatModerator_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_AddChatModerator_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_AddChatModerator_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_AddChatModerator_Response} CSteamTV_AddChatModerator_Response
         */
        CSteamTV_AddChatModerator_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_AddChatModerator_Response)
                return object;
            return new $root.CSteamTV_AddChatModerator_Response();
        };
    
        /**
         * Creates a plain object from a CSteamTV_AddChatModerator_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_AddChatModerator_Response
         * @static
         * @param {CSteamTV_AddChatModerator_Response} message CSteamTV_AddChatModerator_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_AddChatModerator_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CSteamTV_AddChatModerator_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_AddChatModerator_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_AddChatModerator_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_AddChatModerator_Response;
    })();
    
    $root.CSteamTV_GetChatModerators_Request = (function() {
    
        /**
         * Properties of a CSteamTV_GetChatModerators_Request.
         * @exports ICSteamTV_GetChatModerators_Request
         * @interface ICSteamTV_GetChatModerators_Request
         * @property {number|Long|null} [broadcast_channel_id] CSteamTV_GetChatModerators_Request broadcast_channel_id
         */
    
        /**
         * Constructs a new CSteamTV_GetChatModerators_Request.
         * @exports CSteamTV_GetChatModerators_Request
         * @classdesc Represents a CSteamTV_GetChatModerators_Request.
         * @implements ICSteamTV_GetChatModerators_Request
         * @constructor
         * @param {ICSteamTV_GetChatModerators_Request=} [properties] Properties to set
         */
        function CSteamTV_GetChatModerators_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetChatModerators_Request broadcast_channel_id.
         * @member {number|Long} broadcast_channel_id
         * @memberof CSteamTV_GetChatModerators_Request
         * @instance
         */
        CSteamTV_GetChatModerators_Request.prototype.broadcast_channel_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CSteamTV_GetChatModerators_Request instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetChatModerators_Request
         * @static
         * @param {ICSteamTV_GetChatModerators_Request=} [properties] Properties to set
         * @returns {CSteamTV_GetChatModerators_Request} CSteamTV_GetChatModerators_Request instance
         */
        CSteamTV_GetChatModerators_Request.create = function create(properties) {
            return new CSteamTV_GetChatModerators_Request(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetChatModerators_Request message. Does not implicitly {@link CSteamTV_GetChatModerators_Request.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetChatModerators_Request
         * @static
         * @param {ICSteamTV_GetChatModerators_Request} message CSteamTV_GetChatModerators_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetChatModerators_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.broadcast_channel_id);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetChatModerators_Request message, length delimited. Does not implicitly {@link CSteamTV_GetChatModerators_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetChatModerators_Request
         * @static
         * @param {ICSteamTV_GetChatModerators_Request} message CSteamTV_GetChatModerators_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetChatModerators_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetChatModerators_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetChatModerators_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetChatModerators_Request} CSteamTV_GetChatModerators_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetChatModerators_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetChatModerators_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.broadcast_channel_id = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetChatModerators_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetChatModerators_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetChatModerators_Request} CSteamTV_GetChatModerators_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetChatModerators_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetChatModerators_Request message.
         * @function verify
         * @memberof CSteamTV_GetChatModerators_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetChatModerators_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (!$util.isInteger(message.broadcast_channel_id) && !(message.broadcast_channel_id && $util.isInteger(message.broadcast_channel_id.low) && $util.isInteger(message.broadcast_channel_id.high)))
                    return "broadcast_channel_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetChatModerators_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetChatModerators_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetChatModerators_Request} CSteamTV_GetChatModerators_Request
         */
        CSteamTV_GetChatModerators_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetChatModerators_Request)
                return object;
            var message = new $root.CSteamTV_GetChatModerators_Request();
            if (object.broadcast_channel_id != null)
                if ($util.Long)
                    (message.broadcast_channel_id = $util.Long.fromValue(object.broadcast_channel_id)).unsigned = false;
                else if (typeof object.broadcast_channel_id === "string")
                    message.broadcast_channel_id = parseInt(object.broadcast_channel_id, 10);
                else if (typeof object.broadcast_channel_id === "number")
                    message.broadcast_channel_id = object.broadcast_channel_id;
                else if (typeof object.broadcast_channel_id === "object")
                    message.broadcast_channel_id = new $util.LongBits(object.broadcast_channel_id.low >>> 0, object.broadcast_channel_id.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetChatModerators_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetChatModerators_Request
         * @static
         * @param {CSteamTV_GetChatModerators_Request} message CSteamTV_GetChatModerators_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetChatModerators_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.broadcast_channel_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.broadcast_channel_id = options.longs === String ? "0" : 0;
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (typeof message.broadcast_channel_id === "number")
                    object.broadcast_channel_id = options.longs === String ? String(message.broadcast_channel_id) : message.broadcast_channel_id;
                else
                    object.broadcast_channel_id = options.longs === String ? $util.Long.prototype.toString.call(message.broadcast_channel_id) : options.longs === Number ? new $util.LongBits(message.broadcast_channel_id.low >>> 0, message.broadcast_channel_id.high >>> 0).toNumber() : message.broadcast_channel_id;
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetChatModerators_Request to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetChatModerators_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetChatModerators_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetChatModerators_Request;
    })();
    
    $root.CSteamTV_ChatModerator = (function() {
    
        /**
         * Properties of a CSteamTV_ChatModerator.
         * @exports ICSteamTV_ChatModerator
         * @interface ICSteamTV_ChatModerator
         * @property {number|Long|null} [steamid] CSteamTV_ChatModerator steamid
         * @property {string|null} [name] CSteamTV_ChatModerator name
         */
    
        /**
         * Constructs a new CSteamTV_ChatModerator.
         * @exports CSteamTV_ChatModerator
         * @classdesc Represents a CSteamTV_ChatModerator.
         * @implements ICSteamTV_ChatModerator
         * @constructor
         * @param {ICSteamTV_ChatModerator=} [properties] Properties to set
         */
        function CSteamTV_ChatModerator(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_ChatModerator steamid.
         * @member {number|Long} steamid
         * @memberof CSteamTV_ChatModerator
         * @instance
         */
        CSteamTV_ChatModerator.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_ChatModerator name.
         * @member {string} name
         * @memberof CSteamTV_ChatModerator
         * @instance
         */
        CSteamTV_ChatModerator.prototype.name = "";
    
        /**
         * Creates a new CSteamTV_ChatModerator instance using the specified properties.
         * @function create
         * @memberof CSteamTV_ChatModerator
         * @static
         * @param {ICSteamTV_ChatModerator=} [properties] Properties to set
         * @returns {CSteamTV_ChatModerator} CSteamTV_ChatModerator instance
         */
        CSteamTV_ChatModerator.create = function create(properties) {
            return new CSteamTV_ChatModerator(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_ChatModerator message. Does not implicitly {@link CSteamTV_ChatModerator.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_ChatModerator
         * @static
         * @param {ICSteamTV_ChatModerator} message CSteamTV_ChatModerator message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_ChatModerator.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_ChatModerator message, length delimited. Does not implicitly {@link CSteamTV_ChatModerator.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_ChatModerator
         * @static
         * @param {ICSteamTV_ChatModerator} message CSteamTV_ChatModerator message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_ChatModerator.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_ChatModerator message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_ChatModerator
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_ChatModerator} CSteamTV_ChatModerator
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_ChatModerator.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_ChatModerator();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_ChatModerator message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_ChatModerator
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_ChatModerator} CSteamTV_ChatModerator
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_ChatModerator.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_ChatModerator message.
         * @function verify
         * @memberof CSteamTV_ChatModerator
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_ChatModerator.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_ChatModerator message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_ChatModerator
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_ChatModerator} CSteamTV_ChatModerator
         */
        CSteamTV_ChatModerator.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_ChatModerator)
                return object;
            var message = new $root.CSteamTV_ChatModerator();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_ChatModerator message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_ChatModerator
         * @static
         * @param {CSteamTV_ChatModerator} message CSteamTV_ChatModerator
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_ChatModerator.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.name = "";
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };
    
        /**
         * Converts this CSteamTV_ChatModerator to JSON.
         * @function toJSON
         * @memberof CSteamTV_ChatModerator
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_ChatModerator.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_ChatModerator;
    })();
    
    $root.CSteamTV_GetChatModerators_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetChatModerators_Response.
         * @exports ICSteamTV_GetChatModerators_Response
         * @interface ICSteamTV_GetChatModerators_Response
         * @property {Array.<ICSteamTV_ChatModerator>|null} [results] CSteamTV_GetChatModerators_Response results
         */
    
        /**
         * Constructs a new CSteamTV_GetChatModerators_Response.
         * @exports CSteamTV_GetChatModerators_Response
         * @classdesc Represents a CSteamTV_GetChatModerators_Response.
         * @implements ICSteamTV_GetChatModerators_Response
         * @constructor
         * @param {ICSteamTV_GetChatModerators_Response=} [properties] Properties to set
         */
        function CSteamTV_GetChatModerators_Response(properties) {
            this.results = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetChatModerators_Response results.
         * @member {Array.<ICSteamTV_ChatModerator>} results
         * @memberof CSteamTV_GetChatModerators_Response
         * @instance
         */
        CSteamTV_GetChatModerators_Response.prototype.results = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_GetChatModerators_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetChatModerators_Response
         * @static
         * @param {ICSteamTV_GetChatModerators_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetChatModerators_Response} CSteamTV_GetChatModerators_Response instance
         */
        CSteamTV_GetChatModerators_Response.create = function create(properties) {
            return new CSteamTV_GetChatModerators_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetChatModerators_Response message. Does not implicitly {@link CSteamTV_GetChatModerators_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetChatModerators_Response
         * @static
         * @param {ICSteamTV_GetChatModerators_Response} message CSteamTV_GetChatModerators_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetChatModerators_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.results != null && message.results.length)
                for (var i = 0; i < message.results.length; ++i)
                    $root.CSteamTV_ChatModerator.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetChatModerators_Response message, length delimited. Does not implicitly {@link CSteamTV_GetChatModerators_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetChatModerators_Response
         * @static
         * @param {ICSteamTV_GetChatModerators_Response} message CSteamTV_GetChatModerators_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetChatModerators_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetChatModerators_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetChatModerators_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetChatModerators_Response} CSteamTV_GetChatModerators_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetChatModerators_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetChatModerators_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.results && message.results.length))
                        message.results = [];
                    message.results.push($root.CSteamTV_ChatModerator.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetChatModerators_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetChatModerators_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetChatModerators_Response} CSteamTV_GetChatModerators_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetChatModerators_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetChatModerators_Response message.
         * @function verify
         * @memberof CSteamTV_GetChatModerators_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetChatModerators_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.results != null && message.hasOwnProperty("results")) {
                if (!Array.isArray(message.results))
                    return "results: array expected";
                for (var i = 0; i < message.results.length; ++i) {
                    var error = $root.CSteamTV_ChatModerator.verify(message.results[i]);
                    if (error)
                        return "results." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetChatModerators_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetChatModerators_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetChatModerators_Response} CSteamTV_GetChatModerators_Response
         */
        CSteamTV_GetChatModerators_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetChatModerators_Response)
                return object;
            var message = new $root.CSteamTV_GetChatModerators_Response();
            if (object.results) {
                if (!Array.isArray(object.results))
                    throw TypeError(".CSteamTV_GetChatModerators_Response.results: array expected");
                message.results = [];
                for (var i = 0; i < object.results.length; ++i) {
                    if (typeof object.results[i] !== "object")
                        throw TypeError(".CSteamTV_GetChatModerators_Response.results: object expected");
                    message.results[i] = $root.CSteamTV_ChatModerator.fromObject(object.results[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetChatModerators_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetChatModerators_Response
         * @static
         * @param {CSteamTV_GetChatModerators_Response} message CSteamTV_GetChatModerators_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetChatModerators_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.results = [];
            if (message.results && message.results.length) {
                object.results = [];
                for (var j = 0; j < message.results.length; ++j)
                    object.results[j] = $root.CSteamTV_ChatModerator.toObject(message.results[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetChatModerators_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetChatModerators_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetChatModerators_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetChatModerators_Response;
    })();
    
    $root.CSteamTV_AddWordBan_Response = (function() {
    
        /**
         * Properties of a CSteamTV_AddWordBan_Response.
         * @exports ICSteamTV_AddWordBan_Response
         * @interface ICSteamTV_AddWordBan_Response
         */
    
        /**
         * Constructs a new CSteamTV_AddWordBan_Response.
         * @exports CSteamTV_AddWordBan_Response
         * @classdesc Represents a CSteamTV_AddWordBan_Response.
         * @implements ICSteamTV_AddWordBan_Response
         * @constructor
         * @param {ICSteamTV_AddWordBan_Response=} [properties] Properties to set
         */
        function CSteamTV_AddWordBan_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CSteamTV_AddWordBan_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_AddWordBan_Response
         * @static
         * @param {ICSteamTV_AddWordBan_Response=} [properties] Properties to set
         * @returns {CSteamTV_AddWordBan_Response} CSteamTV_AddWordBan_Response instance
         */
        CSteamTV_AddWordBan_Response.create = function create(properties) {
            return new CSteamTV_AddWordBan_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_AddWordBan_Response message. Does not implicitly {@link CSteamTV_AddWordBan_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_AddWordBan_Response
         * @static
         * @param {ICSteamTV_AddWordBan_Response} message CSteamTV_AddWordBan_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_AddWordBan_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_AddWordBan_Response message, length delimited. Does not implicitly {@link CSteamTV_AddWordBan_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_AddWordBan_Response
         * @static
         * @param {ICSteamTV_AddWordBan_Response} message CSteamTV_AddWordBan_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_AddWordBan_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_AddWordBan_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_AddWordBan_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_AddWordBan_Response} CSteamTV_AddWordBan_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_AddWordBan_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_AddWordBan_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_AddWordBan_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_AddWordBan_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_AddWordBan_Response} CSteamTV_AddWordBan_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_AddWordBan_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_AddWordBan_Response message.
         * @function verify
         * @memberof CSteamTV_AddWordBan_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_AddWordBan_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_AddWordBan_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_AddWordBan_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_AddWordBan_Response} CSteamTV_AddWordBan_Response
         */
        CSteamTV_AddWordBan_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_AddWordBan_Response)
                return object;
            return new $root.CSteamTV_AddWordBan_Response();
        };
    
        /**
         * Creates a plain object from a CSteamTV_AddWordBan_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_AddWordBan_Response
         * @static
         * @param {CSteamTV_AddWordBan_Response} message CSteamTV_AddWordBan_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_AddWordBan_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CSteamTV_AddWordBan_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_AddWordBan_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_AddWordBan_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_AddWordBan_Response;
    })();
    
    $root.CSteamTV_GetWordBans_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetWordBans_Response.
         * @exports ICSteamTV_GetWordBans_Response
         * @interface ICSteamTV_GetWordBans_Response
         * @property {Array.<string>|null} [results] CSteamTV_GetWordBans_Response results
         */
    
        /**
         * Constructs a new CSteamTV_GetWordBans_Response.
         * @exports CSteamTV_GetWordBans_Response
         * @classdesc Represents a CSteamTV_GetWordBans_Response.
         * @implements ICSteamTV_GetWordBans_Response
         * @constructor
         * @param {ICSteamTV_GetWordBans_Response=} [properties] Properties to set
         */
        function CSteamTV_GetWordBans_Response(properties) {
            this.results = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetWordBans_Response results.
         * @member {Array.<string>} results
         * @memberof CSteamTV_GetWordBans_Response
         * @instance
         */
        CSteamTV_GetWordBans_Response.prototype.results = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_GetWordBans_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetWordBans_Response
         * @static
         * @param {ICSteamTV_GetWordBans_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetWordBans_Response} CSteamTV_GetWordBans_Response instance
         */
        CSteamTV_GetWordBans_Response.create = function create(properties) {
            return new CSteamTV_GetWordBans_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetWordBans_Response message. Does not implicitly {@link CSteamTV_GetWordBans_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetWordBans_Response
         * @static
         * @param {ICSteamTV_GetWordBans_Response} message CSteamTV_GetWordBans_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetWordBans_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.results != null && message.results.length)
                for (var i = 0; i < message.results.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.results[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetWordBans_Response message, length delimited. Does not implicitly {@link CSteamTV_GetWordBans_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetWordBans_Response
         * @static
         * @param {ICSteamTV_GetWordBans_Response} message CSteamTV_GetWordBans_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetWordBans_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetWordBans_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetWordBans_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetWordBans_Response} CSteamTV_GetWordBans_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetWordBans_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetWordBans_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.results && message.results.length))
                        message.results = [];
                    message.results.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetWordBans_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetWordBans_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetWordBans_Response} CSteamTV_GetWordBans_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetWordBans_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetWordBans_Response message.
         * @function verify
         * @memberof CSteamTV_GetWordBans_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetWordBans_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.results != null && message.hasOwnProperty("results")) {
                if (!Array.isArray(message.results))
                    return "results: array expected";
                for (var i = 0; i < message.results.length; ++i)
                    if (!$util.isString(message.results[i]))
                        return "results: string[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetWordBans_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetWordBans_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetWordBans_Response} CSteamTV_GetWordBans_Response
         */
        CSteamTV_GetWordBans_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetWordBans_Response)
                return object;
            var message = new $root.CSteamTV_GetWordBans_Response();
            if (object.results) {
                if (!Array.isArray(object.results))
                    throw TypeError(".CSteamTV_GetWordBans_Response.results: array expected");
                message.results = [];
                for (var i = 0; i < object.results.length; ++i)
                    message.results[i] = String(object.results[i]);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetWordBans_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetWordBans_Response
         * @static
         * @param {CSteamTV_GetWordBans_Response} message CSteamTV_GetWordBans_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetWordBans_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.results = [];
            if (message.results && message.results.length) {
                object.results = [];
                for (var j = 0; j < message.results.length; ++j)
                    object.results[j] = message.results[j];
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetWordBans_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetWordBans_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetWordBans_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetWordBans_Response;
    })();
    
    $root.CSteamTV_JoinChat_Request = (function() {
    
        /**
         * Properties of a CSteamTV_JoinChat_Request.
         * @exports ICSteamTV_JoinChat_Request
         * @interface ICSteamTV_JoinChat_Request
         * @property {number|Long|null} [broadcast_channel_id] CSteamTV_JoinChat_Request broadcast_channel_id
         */
    
        /**
         * Constructs a new CSteamTV_JoinChat_Request.
         * @exports CSteamTV_JoinChat_Request
         * @classdesc Represents a CSteamTV_JoinChat_Request.
         * @implements ICSteamTV_JoinChat_Request
         * @constructor
         * @param {ICSteamTV_JoinChat_Request=} [properties] Properties to set
         */
        function CSteamTV_JoinChat_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_JoinChat_Request broadcast_channel_id.
         * @member {number|Long} broadcast_channel_id
         * @memberof CSteamTV_JoinChat_Request
         * @instance
         */
        CSteamTV_JoinChat_Request.prototype.broadcast_channel_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CSteamTV_JoinChat_Request instance using the specified properties.
         * @function create
         * @memberof CSteamTV_JoinChat_Request
         * @static
         * @param {ICSteamTV_JoinChat_Request=} [properties] Properties to set
         * @returns {CSteamTV_JoinChat_Request} CSteamTV_JoinChat_Request instance
         */
        CSteamTV_JoinChat_Request.create = function create(properties) {
            return new CSteamTV_JoinChat_Request(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_JoinChat_Request message. Does not implicitly {@link CSteamTV_JoinChat_Request.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_JoinChat_Request
         * @static
         * @param {ICSteamTV_JoinChat_Request} message CSteamTV_JoinChat_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_JoinChat_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.broadcast_channel_id);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_JoinChat_Request message, length delimited. Does not implicitly {@link CSteamTV_JoinChat_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_JoinChat_Request
         * @static
         * @param {ICSteamTV_JoinChat_Request} message CSteamTV_JoinChat_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_JoinChat_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_JoinChat_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_JoinChat_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_JoinChat_Request} CSteamTV_JoinChat_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_JoinChat_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_JoinChat_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.broadcast_channel_id = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_JoinChat_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_JoinChat_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_JoinChat_Request} CSteamTV_JoinChat_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_JoinChat_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_JoinChat_Request message.
         * @function verify
         * @memberof CSteamTV_JoinChat_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_JoinChat_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (!$util.isInteger(message.broadcast_channel_id) && !(message.broadcast_channel_id && $util.isInteger(message.broadcast_channel_id.low) && $util.isInteger(message.broadcast_channel_id.high)))
                    return "broadcast_channel_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_JoinChat_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_JoinChat_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_JoinChat_Request} CSteamTV_JoinChat_Request
         */
        CSteamTV_JoinChat_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_JoinChat_Request)
                return object;
            var message = new $root.CSteamTV_JoinChat_Request();
            if (object.broadcast_channel_id != null)
                if ($util.Long)
                    (message.broadcast_channel_id = $util.Long.fromValue(object.broadcast_channel_id)).unsigned = false;
                else if (typeof object.broadcast_channel_id === "string")
                    message.broadcast_channel_id = parseInt(object.broadcast_channel_id, 10);
                else if (typeof object.broadcast_channel_id === "number")
                    message.broadcast_channel_id = object.broadcast_channel_id;
                else if (typeof object.broadcast_channel_id === "object")
                    message.broadcast_channel_id = new $util.LongBits(object.broadcast_channel_id.low >>> 0, object.broadcast_channel_id.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_JoinChat_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_JoinChat_Request
         * @static
         * @param {CSteamTV_JoinChat_Request} message CSteamTV_JoinChat_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_JoinChat_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.broadcast_channel_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.broadcast_channel_id = options.longs === String ? "0" : 0;
            if (message.broadcast_channel_id != null && message.hasOwnProperty("broadcast_channel_id"))
                if (typeof message.broadcast_channel_id === "number")
                    object.broadcast_channel_id = options.longs === String ? String(message.broadcast_channel_id) : message.broadcast_channel_id;
                else
                    object.broadcast_channel_id = options.longs === String ? $util.Long.prototype.toString.call(message.broadcast_channel_id) : options.longs === Number ? new $util.LongBits(message.broadcast_channel_id.low >>> 0, message.broadcast_channel_id.high >>> 0).toNumber() : message.broadcast_channel_id;
            return object;
        };
    
        /**
         * Converts this CSteamTV_JoinChat_Request to JSON.
         * @function toJSON
         * @memberof CSteamTV_JoinChat_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_JoinChat_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_JoinChat_Request;
    })();
    
    $root.CSteamTV_JoinChat_Response = (function() {
    
        /**
         * Properties of a CSteamTV_JoinChat_Response.
         * @exports ICSteamTV_JoinChat_Response
         * @interface ICSteamTV_JoinChat_Response
         * @property {number|Long|null} [chat_id] CSteamTV_JoinChat_Response chat_id
         * @property {string|null} [view_url_template] CSteamTV_JoinChat_Response view_url_template
         * @property {Array.<number|Long>|null} [flair_group_ids] CSteamTV_JoinChat_Response flair_group_ids
         */
    
        /**
         * Constructs a new CSteamTV_JoinChat_Response.
         * @exports CSteamTV_JoinChat_Response
         * @classdesc Represents a CSteamTV_JoinChat_Response.
         * @implements ICSteamTV_JoinChat_Response
         * @constructor
         * @param {ICSteamTV_JoinChat_Response=} [properties] Properties to set
         */
        function CSteamTV_JoinChat_Response(properties) {
            this.flair_group_ids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_JoinChat_Response chat_id.
         * @member {number|Long} chat_id
         * @memberof CSteamTV_JoinChat_Response
         * @instance
         */
        CSteamTV_JoinChat_Response.prototype.chat_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_JoinChat_Response view_url_template.
         * @member {string} view_url_template
         * @memberof CSteamTV_JoinChat_Response
         * @instance
         */
        CSteamTV_JoinChat_Response.prototype.view_url_template = "";
    
        /**
         * CSteamTV_JoinChat_Response flair_group_ids.
         * @member {Array.<number|Long>} flair_group_ids
         * @memberof CSteamTV_JoinChat_Response
         * @instance
         */
        CSteamTV_JoinChat_Response.prototype.flair_group_ids = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_JoinChat_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_JoinChat_Response
         * @static
         * @param {ICSteamTV_JoinChat_Response=} [properties] Properties to set
         * @returns {CSteamTV_JoinChat_Response} CSteamTV_JoinChat_Response instance
         */
        CSteamTV_JoinChat_Response.create = function create(properties) {
            return new CSteamTV_JoinChat_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_JoinChat_Response message. Does not implicitly {@link CSteamTV_JoinChat_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_JoinChat_Response
         * @static
         * @param {ICSteamTV_JoinChat_Response} message CSteamTV_JoinChat_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_JoinChat_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.chat_id != null && message.hasOwnProperty("chat_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.chat_id);
            if (message.view_url_template != null && message.hasOwnProperty("view_url_template"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.view_url_template);
            if (message.flair_group_ids != null && message.flair_group_ids.length)
                for (var i = 0; i < message.flair_group_ids.length; ++i)
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.flair_group_ids[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_JoinChat_Response message, length delimited. Does not implicitly {@link CSteamTV_JoinChat_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_JoinChat_Response
         * @static
         * @param {ICSteamTV_JoinChat_Response} message CSteamTV_JoinChat_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_JoinChat_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_JoinChat_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_JoinChat_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_JoinChat_Response} CSteamTV_JoinChat_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_JoinChat_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_JoinChat_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.chat_id = reader.fixed64();
                    break;
                case 2:
                    message.view_url_template = reader.string();
                    break;
                case 3:
                    if (!(message.flair_group_ids && message.flair_group_ids.length))
                        message.flair_group_ids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.flair_group_ids.push(reader.uint64());
                    } else
                        message.flair_group_ids.push(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_JoinChat_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_JoinChat_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_JoinChat_Response} CSteamTV_JoinChat_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_JoinChat_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_JoinChat_Response message.
         * @function verify
         * @memberof CSteamTV_JoinChat_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_JoinChat_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.chat_id != null && message.hasOwnProperty("chat_id"))
                if (!$util.isInteger(message.chat_id) && !(message.chat_id && $util.isInteger(message.chat_id.low) && $util.isInteger(message.chat_id.high)))
                    return "chat_id: integer|Long expected";
            if (message.view_url_template != null && message.hasOwnProperty("view_url_template"))
                if (!$util.isString(message.view_url_template))
                    return "view_url_template: string expected";
            if (message.flair_group_ids != null && message.hasOwnProperty("flair_group_ids")) {
                if (!Array.isArray(message.flair_group_ids))
                    return "flair_group_ids: array expected";
                for (var i = 0; i < message.flair_group_ids.length; ++i)
                    if (!$util.isInteger(message.flair_group_ids[i]) && !(message.flair_group_ids[i] && $util.isInteger(message.flair_group_ids[i].low) && $util.isInteger(message.flair_group_ids[i].high)))
                        return "flair_group_ids: integer|Long[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_JoinChat_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_JoinChat_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_JoinChat_Response} CSteamTV_JoinChat_Response
         */
        CSteamTV_JoinChat_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_JoinChat_Response)
                return object;
            var message = new $root.CSteamTV_JoinChat_Response();
            if (object.chat_id != null)
                if ($util.Long)
                    (message.chat_id = $util.Long.fromValue(object.chat_id)).unsigned = false;
                else if (typeof object.chat_id === "string")
                    message.chat_id = parseInt(object.chat_id, 10);
                else if (typeof object.chat_id === "number")
                    message.chat_id = object.chat_id;
                else if (typeof object.chat_id === "object")
                    message.chat_id = new $util.LongBits(object.chat_id.low >>> 0, object.chat_id.high >>> 0).toNumber();
            if (object.view_url_template != null)
                message.view_url_template = String(object.view_url_template);
            if (object.flair_group_ids) {
                if (!Array.isArray(object.flair_group_ids))
                    throw TypeError(".CSteamTV_JoinChat_Response.flair_group_ids: array expected");
                message.flair_group_ids = [];
                for (var i = 0; i < object.flair_group_ids.length; ++i)
                    if ($util.Long)
                        (message.flair_group_ids[i] = $util.Long.fromValue(object.flair_group_ids[i])).unsigned = true;
                    else if (typeof object.flair_group_ids[i] === "string")
                        message.flair_group_ids[i] = parseInt(object.flair_group_ids[i], 10);
                    else if (typeof object.flair_group_ids[i] === "number")
                        message.flair_group_ids[i] = object.flair_group_ids[i];
                    else if (typeof object.flair_group_ids[i] === "object")
                        message.flair_group_ids[i] = new $util.LongBits(object.flair_group_ids[i].low >>> 0, object.flair_group_ids[i].high >>> 0).toNumber(true);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_JoinChat_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_JoinChat_Response
         * @static
         * @param {CSteamTV_JoinChat_Response} message CSteamTV_JoinChat_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_JoinChat_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.flair_group_ids = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.chat_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.chat_id = options.longs === String ? "0" : 0;
                object.view_url_template = "";
            }
            if (message.chat_id != null && message.hasOwnProperty("chat_id"))
                if (typeof message.chat_id === "number")
                    object.chat_id = options.longs === String ? String(message.chat_id) : message.chat_id;
                else
                    object.chat_id = options.longs === String ? $util.Long.prototype.toString.call(message.chat_id) : options.longs === Number ? new $util.LongBits(message.chat_id.low >>> 0, message.chat_id.high >>> 0).toNumber() : message.chat_id;
            if (message.view_url_template != null && message.hasOwnProperty("view_url_template"))
                object.view_url_template = message.view_url_template;
            if (message.flair_group_ids && message.flair_group_ids.length) {
                object.flair_group_ids = [];
                for (var j = 0; j < message.flair_group_ids.length; ++j)
                    if (typeof message.flair_group_ids[j] === "number")
                        object.flair_group_ids[j] = options.longs === String ? String(message.flair_group_ids[j]) : message.flair_group_ids[j];
                    else
                        object.flair_group_ids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.flair_group_ids[j]) : options.longs === Number ? new $util.LongBits(message.flair_group_ids[j].low >>> 0, message.flair_group_ids[j].high >>> 0).toNumber(true) : message.flair_group_ids[j];
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_JoinChat_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_JoinChat_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_JoinChat_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_JoinChat_Response;
    })();
    
    $root.CSteamTV_Search_Response = (function() {
    
        /**
         * Properties of a CSteamTV_Search_Response.
         * @exports ICSteamTV_Search_Response
         * @interface ICSteamTV_Search_Response
         * @property {Array.<IGetBroadcastChannelEntry>|null} [results] CSteamTV_Search_Response results
         */
    
        /**
         * Constructs a new CSteamTV_Search_Response.
         * @exports CSteamTV_Search_Response
         * @classdesc Represents a CSteamTV_Search_Response.
         * @implements ICSteamTV_Search_Response
         * @constructor
         * @param {ICSteamTV_Search_Response=} [properties] Properties to set
         */
        function CSteamTV_Search_Response(properties) {
            this.results = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_Search_Response results.
         * @member {Array.<IGetBroadcastChannelEntry>} results
         * @memberof CSteamTV_Search_Response
         * @instance
         */
        CSteamTV_Search_Response.prototype.results = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_Search_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_Search_Response
         * @static
         * @param {ICSteamTV_Search_Response=} [properties] Properties to set
         * @returns {CSteamTV_Search_Response} CSteamTV_Search_Response instance
         */
        CSteamTV_Search_Response.create = function create(properties) {
            return new CSteamTV_Search_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_Search_Response message. Does not implicitly {@link CSteamTV_Search_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_Search_Response
         * @static
         * @param {ICSteamTV_Search_Response} message CSteamTV_Search_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_Search_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.results != null && message.results.length)
                for (var i = 0; i < message.results.length; ++i)
                    $root.GetBroadcastChannelEntry.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_Search_Response message, length delimited. Does not implicitly {@link CSteamTV_Search_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_Search_Response
         * @static
         * @param {ICSteamTV_Search_Response} message CSteamTV_Search_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_Search_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_Search_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_Search_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_Search_Response} CSteamTV_Search_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_Search_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_Search_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.results && message.results.length))
                        message.results = [];
                    message.results.push($root.GetBroadcastChannelEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_Search_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_Search_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_Search_Response} CSteamTV_Search_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_Search_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_Search_Response message.
         * @function verify
         * @memberof CSteamTV_Search_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_Search_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.results != null && message.hasOwnProperty("results")) {
                if (!Array.isArray(message.results))
                    return "results: array expected";
                for (var i = 0; i < message.results.length; ++i) {
                    var error = $root.GetBroadcastChannelEntry.verify(message.results[i]);
                    if (error)
                        return "results." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_Search_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_Search_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_Search_Response} CSteamTV_Search_Response
         */
        CSteamTV_Search_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_Search_Response)
                return object;
            var message = new $root.CSteamTV_Search_Response();
            if (object.results) {
                if (!Array.isArray(object.results))
                    throw TypeError(".CSteamTV_Search_Response.results: array expected");
                message.results = [];
                for (var i = 0; i < object.results.length; ++i) {
                    if (typeof object.results[i] !== "object")
                        throw TypeError(".CSteamTV_Search_Response.results: object expected");
                    message.results[i] = $root.GetBroadcastChannelEntry.fromObject(object.results[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_Search_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_Search_Response
         * @static
         * @param {CSteamTV_Search_Response} message CSteamTV_Search_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_Search_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.results = [];
            if (message.results && message.results.length) {
                object.results = [];
                for (var j = 0; j < message.results.length; ++j)
                    object.results[j] = $root.GetBroadcastChannelEntry.toObject(message.results[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_Search_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_Search_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_Search_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_Search_Response;
    })();
    
    $root.CSteamTV_GetSteamTVUserSettings_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetSteamTVUserSettings_Response.
         * @exports ICSteamTV_GetSteamTVUserSettings_Response
         * @interface ICSteamTV_GetSteamTVUserSettings_Response
         * @property {boolean|null} [stream_live_email] CSteamTV_GetSteamTVUserSettings_Response stream_live_email
         * @property {boolean|null} [stream_live_notification] CSteamTV_GetSteamTVUserSettings_Response stream_live_notification
         */
    
        /**
         * Constructs a new CSteamTV_GetSteamTVUserSettings_Response.
         * @exports CSteamTV_GetSteamTVUserSettings_Response
         * @classdesc Represents a CSteamTV_GetSteamTVUserSettings_Response.
         * @implements ICSteamTV_GetSteamTVUserSettings_Response
         * @constructor
         * @param {ICSteamTV_GetSteamTVUserSettings_Response=} [properties] Properties to set
         */
        function CSteamTV_GetSteamTVUserSettings_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetSteamTVUserSettings_Response stream_live_email.
         * @member {boolean} stream_live_email
         * @memberof CSteamTV_GetSteamTVUserSettings_Response
         * @instance
         */
        CSteamTV_GetSteamTVUserSettings_Response.prototype.stream_live_email = false;
    
        /**
         * CSteamTV_GetSteamTVUserSettings_Response stream_live_notification.
         * @member {boolean} stream_live_notification
         * @memberof CSteamTV_GetSteamTVUserSettings_Response
         * @instance
         */
        CSteamTV_GetSteamTVUserSettings_Response.prototype.stream_live_notification = false;
    
        /**
         * Creates a new CSteamTV_GetSteamTVUserSettings_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetSteamTVUserSettings_Response
         * @static
         * @param {ICSteamTV_GetSteamTVUserSettings_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetSteamTVUserSettings_Response} CSteamTV_GetSteamTVUserSettings_Response instance
         */
        CSteamTV_GetSteamTVUserSettings_Response.create = function create(properties) {
            return new CSteamTV_GetSteamTVUserSettings_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetSteamTVUserSettings_Response message. Does not implicitly {@link CSteamTV_GetSteamTVUserSettings_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetSteamTVUserSettings_Response
         * @static
         * @param {ICSteamTV_GetSteamTVUserSettings_Response} message CSteamTV_GetSteamTVUserSettings_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetSteamTVUserSettings_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.stream_live_email != null && message.hasOwnProperty("stream_live_email"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.stream_live_email);
            if (message.stream_live_notification != null && message.hasOwnProperty("stream_live_notification"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.stream_live_notification);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetSteamTVUserSettings_Response message, length delimited. Does not implicitly {@link CSteamTV_GetSteamTVUserSettings_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetSteamTVUserSettings_Response
         * @static
         * @param {ICSteamTV_GetSteamTVUserSettings_Response} message CSteamTV_GetSteamTVUserSettings_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetSteamTVUserSettings_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetSteamTVUserSettings_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetSteamTVUserSettings_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetSteamTVUserSettings_Response} CSteamTV_GetSteamTVUserSettings_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetSteamTVUserSettings_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetSteamTVUserSettings_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.stream_live_email = reader.bool();
                    break;
                case 2:
                    message.stream_live_notification = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetSteamTVUserSettings_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetSteamTVUserSettings_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetSteamTVUserSettings_Response} CSteamTV_GetSteamTVUserSettings_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetSteamTVUserSettings_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetSteamTVUserSettings_Response message.
         * @function verify
         * @memberof CSteamTV_GetSteamTVUserSettings_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetSteamTVUserSettings_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.stream_live_email != null && message.hasOwnProperty("stream_live_email"))
                if (typeof message.stream_live_email !== "boolean")
                    return "stream_live_email: boolean expected";
            if (message.stream_live_notification != null && message.hasOwnProperty("stream_live_notification"))
                if (typeof message.stream_live_notification !== "boolean")
                    return "stream_live_notification: boolean expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetSteamTVUserSettings_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetSteamTVUserSettings_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetSteamTVUserSettings_Response} CSteamTV_GetSteamTVUserSettings_Response
         */
        CSteamTV_GetSteamTVUserSettings_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetSteamTVUserSettings_Response)
                return object;
            var message = new $root.CSteamTV_GetSteamTVUserSettings_Response();
            if (object.stream_live_email != null)
                message.stream_live_email = Boolean(object.stream_live_email);
            if (object.stream_live_notification != null)
                message.stream_live_notification = Boolean(object.stream_live_notification);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetSteamTVUserSettings_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetSteamTVUserSettings_Response
         * @static
         * @param {CSteamTV_GetSteamTVUserSettings_Response} message CSteamTV_GetSteamTVUserSettings_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetSteamTVUserSettings_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.stream_live_email = false;
                object.stream_live_notification = false;
            }
            if (message.stream_live_email != null && message.hasOwnProperty("stream_live_email"))
                object.stream_live_email = message.stream_live_email;
            if (message.stream_live_notification != null && message.hasOwnProperty("stream_live_notification"))
                object.stream_live_notification = message.stream_live_notification;
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetSteamTVUserSettings_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetSteamTVUserSettings_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetSteamTVUserSettings_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetSteamTVUserSettings_Response;
    })();
    
    $root.CSteamTV_SetSteamTVUserSettings_Response = (function() {
    
        /**
         * Properties of a CSteamTV_SetSteamTVUserSettings_Response.
         * @exports ICSteamTV_SetSteamTVUserSettings_Response
         * @interface ICSteamTV_SetSteamTVUserSettings_Response
         */
    
        /**
         * Constructs a new CSteamTV_SetSteamTVUserSettings_Response.
         * @exports CSteamTV_SetSteamTVUserSettings_Response
         * @classdesc Represents a CSteamTV_SetSteamTVUserSettings_Response.
         * @implements ICSteamTV_SetSteamTVUserSettings_Response
         * @constructor
         * @param {ICSteamTV_SetSteamTVUserSettings_Response=} [properties] Properties to set
         */
        function CSteamTV_SetSteamTVUserSettings_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CSteamTV_SetSteamTVUserSettings_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_SetSteamTVUserSettings_Response
         * @static
         * @param {ICSteamTV_SetSteamTVUserSettings_Response=} [properties] Properties to set
         * @returns {CSteamTV_SetSteamTVUserSettings_Response} CSteamTV_SetSteamTVUserSettings_Response instance
         */
        CSteamTV_SetSteamTVUserSettings_Response.create = function create(properties) {
            return new CSteamTV_SetSteamTVUserSettings_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_SetSteamTVUserSettings_Response message. Does not implicitly {@link CSteamTV_SetSteamTVUserSettings_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_SetSteamTVUserSettings_Response
         * @static
         * @param {ICSteamTV_SetSteamTVUserSettings_Response} message CSteamTV_SetSteamTVUserSettings_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_SetSteamTVUserSettings_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_SetSteamTVUserSettings_Response message, length delimited. Does not implicitly {@link CSteamTV_SetSteamTVUserSettings_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_SetSteamTVUserSettings_Response
         * @static
         * @param {ICSteamTV_SetSteamTVUserSettings_Response} message CSteamTV_SetSteamTVUserSettings_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_SetSteamTVUserSettings_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_SetSteamTVUserSettings_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_SetSteamTVUserSettings_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_SetSteamTVUserSettings_Response} CSteamTV_SetSteamTVUserSettings_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_SetSteamTVUserSettings_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_SetSteamTVUserSettings_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_SetSteamTVUserSettings_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_SetSteamTVUserSettings_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_SetSteamTVUserSettings_Response} CSteamTV_SetSteamTVUserSettings_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_SetSteamTVUserSettings_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_SetSteamTVUserSettings_Response message.
         * @function verify
         * @memberof CSteamTV_SetSteamTVUserSettings_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_SetSteamTVUserSettings_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_SetSteamTVUserSettings_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_SetSteamTVUserSettings_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_SetSteamTVUserSettings_Response} CSteamTV_SetSteamTVUserSettings_Response
         */
        CSteamTV_SetSteamTVUserSettings_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_SetSteamTVUserSettings_Response)
                return object;
            return new $root.CSteamTV_SetSteamTVUserSettings_Response();
        };
    
        /**
         * Creates a plain object from a CSteamTV_SetSteamTVUserSettings_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_SetSteamTVUserSettings_Response
         * @static
         * @param {CSteamTV_SetSteamTVUserSettings_Response} message CSteamTV_SetSteamTVUserSettings_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_SetSteamTVUserSettings_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CSteamTV_SetSteamTVUserSettings_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_SetSteamTVUserSettings_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_SetSteamTVUserSettings_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_SetSteamTVUserSettings_Response;
    })();
    
    $root.CSteamTV_GetMyBroadcastChannels_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetMyBroadcastChannels_Response.
         * @exports ICSteamTV_GetMyBroadcastChannels_Response
         * @interface ICSteamTV_GetMyBroadcastChannels_Response
         * @property {Array.<IGetBroadcastChannelEntry>|null} [results] CSteamTV_GetMyBroadcastChannels_Response results
         */
    
        /**
         * Constructs a new CSteamTV_GetMyBroadcastChannels_Response.
         * @exports CSteamTV_GetMyBroadcastChannels_Response
         * @classdesc Represents a CSteamTV_GetMyBroadcastChannels_Response.
         * @implements ICSteamTV_GetMyBroadcastChannels_Response
         * @constructor
         * @param {ICSteamTV_GetMyBroadcastChannels_Response=} [properties] Properties to set
         */
        function CSteamTV_GetMyBroadcastChannels_Response(properties) {
            this.results = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetMyBroadcastChannels_Response results.
         * @member {Array.<IGetBroadcastChannelEntry>} results
         * @memberof CSteamTV_GetMyBroadcastChannels_Response
         * @instance
         */
        CSteamTV_GetMyBroadcastChannels_Response.prototype.results = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_GetMyBroadcastChannels_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetMyBroadcastChannels_Response
         * @static
         * @param {ICSteamTV_GetMyBroadcastChannels_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetMyBroadcastChannels_Response} CSteamTV_GetMyBroadcastChannels_Response instance
         */
        CSteamTV_GetMyBroadcastChannels_Response.create = function create(properties) {
            return new CSteamTV_GetMyBroadcastChannels_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetMyBroadcastChannels_Response message. Does not implicitly {@link CSteamTV_GetMyBroadcastChannels_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetMyBroadcastChannels_Response
         * @static
         * @param {ICSteamTV_GetMyBroadcastChannels_Response} message CSteamTV_GetMyBroadcastChannels_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetMyBroadcastChannels_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.results != null && message.results.length)
                for (var i = 0; i < message.results.length; ++i)
                    $root.GetBroadcastChannelEntry.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetMyBroadcastChannels_Response message, length delimited. Does not implicitly {@link CSteamTV_GetMyBroadcastChannels_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetMyBroadcastChannels_Response
         * @static
         * @param {ICSteamTV_GetMyBroadcastChannels_Response} message CSteamTV_GetMyBroadcastChannels_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetMyBroadcastChannels_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetMyBroadcastChannels_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetMyBroadcastChannels_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetMyBroadcastChannels_Response} CSteamTV_GetMyBroadcastChannels_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetMyBroadcastChannels_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetMyBroadcastChannels_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.results && message.results.length))
                        message.results = [];
                    message.results.push($root.GetBroadcastChannelEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetMyBroadcastChannels_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetMyBroadcastChannels_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetMyBroadcastChannels_Response} CSteamTV_GetMyBroadcastChannels_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetMyBroadcastChannels_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetMyBroadcastChannels_Response message.
         * @function verify
         * @memberof CSteamTV_GetMyBroadcastChannels_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetMyBroadcastChannels_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.results != null && message.hasOwnProperty("results")) {
                if (!Array.isArray(message.results))
                    return "results: array expected";
                for (var i = 0; i < message.results.length; ++i) {
                    var error = $root.GetBroadcastChannelEntry.verify(message.results[i]);
                    if (error)
                        return "results." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetMyBroadcastChannels_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetMyBroadcastChannels_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetMyBroadcastChannels_Response} CSteamTV_GetMyBroadcastChannels_Response
         */
        CSteamTV_GetMyBroadcastChannels_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetMyBroadcastChannels_Response)
                return object;
            var message = new $root.CSteamTV_GetMyBroadcastChannels_Response();
            if (object.results) {
                if (!Array.isArray(object.results))
                    throw TypeError(".CSteamTV_GetMyBroadcastChannels_Response.results: array expected");
                message.results = [];
                for (var i = 0; i < object.results.length; ++i) {
                    if (typeof object.results[i] !== "object")
                        throw TypeError(".CSteamTV_GetMyBroadcastChannels_Response.results: object expected");
                    message.results[i] = $root.GetBroadcastChannelEntry.fromObject(object.results[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetMyBroadcastChannels_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetMyBroadcastChannels_Response
         * @static
         * @param {CSteamTV_GetMyBroadcastChannels_Response} message CSteamTV_GetMyBroadcastChannels_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetMyBroadcastChannels_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.results = [];
            if (message.results && message.results.length) {
                object.results = [];
                for (var j = 0; j < message.results.length; ++j)
                    object.results[j] = $root.GetBroadcastChannelEntry.toObject(message.results[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetMyBroadcastChannels_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetMyBroadcastChannels_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetMyBroadcastChannels_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetMyBroadcastChannels_Response;
    })();
    
    $root.CSteamTV_HomePageTemplate_Takeover = (function() {
    
        /**
         * Properties of a CSteamTV_HomePageTemplate_Takeover.
         * @exports ICSteamTV_HomePageTemplate_Takeover
         * @interface ICSteamTV_HomePageTemplate_Takeover
         * @property {Array.<IGetBroadcastChannelEntry>|null} [broadcasts] CSteamTV_HomePageTemplate_Takeover broadcasts
         */
    
        /**
         * Constructs a new CSteamTV_HomePageTemplate_Takeover.
         * @exports CSteamTV_HomePageTemplate_Takeover
         * @classdesc Represents a CSteamTV_HomePageTemplate_Takeover.
         * @implements ICSteamTV_HomePageTemplate_Takeover
         * @constructor
         * @param {ICSteamTV_HomePageTemplate_Takeover=} [properties] Properties to set
         */
        function CSteamTV_HomePageTemplate_Takeover(properties) {
            this.broadcasts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_HomePageTemplate_Takeover broadcasts.
         * @member {Array.<IGetBroadcastChannelEntry>} broadcasts
         * @memberof CSteamTV_HomePageTemplate_Takeover
         * @instance
         */
        CSteamTV_HomePageTemplate_Takeover.prototype.broadcasts = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_HomePageTemplate_Takeover instance using the specified properties.
         * @function create
         * @memberof CSteamTV_HomePageTemplate_Takeover
         * @static
         * @param {ICSteamTV_HomePageTemplate_Takeover=} [properties] Properties to set
         * @returns {CSteamTV_HomePageTemplate_Takeover} CSteamTV_HomePageTemplate_Takeover instance
         */
        CSteamTV_HomePageTemplate_Takeover.create = function create(properties) {
            return new CSteamTV_HomePageTemplate_Takeover(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_Takeover message. Does not implicitly {@link CSteamTV_HomePageTemplate_Takeover.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_HomePageTemplate_Takeover
         * @static
         * @param {ICSteamTV_HomePageTemplate_Takeover} message CSteamTV_HomePageTemplate_Takeover message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_Takeover.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcasts != null && message.broadcasts.length)
                for (var i = 0; i < message.broadcasts.length; ++i)
                    $root.GetBroadcastChannelEntry.encode(message.broadcasts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_Takeover message, length delimited. Does not implicitly {@link CSteamTV_HomePageTemplate_Takeover.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_HomePageTemplate_Takeover
         * @static
         * @param {ICSteamTV_HomePageTemplate_Takeover} message CSteamTV_HomePageTemplate_Takeover message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_Takeover.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_Takeover message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_HomePageTemplate_Takeover
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_HomePageTemplate_Takeover} CSteamTV_HomePageTemplate_Takeover
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_Takeover.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_HomePageTemplate_Takeover();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.broadcasts && message.broadcasts.length))
                        message.broadcasts = [];
                    message.broadcasts.push($root.GetBroadcastChannelEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_Takeover message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_HomePageTemplate_Takeover
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_HomePageTemplate_Takeover} CSteamTV_HomePageTemplate_Takeover
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_Takeover.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_HomePageTemplate_Takeover message.
         * @function verify
         * @memberof CSteamTV_HomePageTemplate_Takeover
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_HomePageTemplate_Takeover.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcasts != null && message.hasOwnProperty("broadcasts")) {
                if (!Array.isArray(message.broadcasts))
                    return "broadcasts: array expected";
                for (var i = 0; i < message.broadcasts.length; ++i) {
                    var error = $root.GetBroadcastChannelEntry.verify(message.broadcasts[i]);
                    if (error)
                        return "broadcasts." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_HomePageTemplate_Takeover message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_HomePageTemplate_Takeover
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_HomePageTemplate_Takeover} CSteamTV_HomePageTemplate_Takeover
         */
        CSteamTV_HomePageTemplate_Takeover.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_HomePageTemplate_Takeover)
                return object;
            var message = new $root.CSteamTV_HomePageTemplate_Takeover();
            if (object.broadcasts) {
                if (!Array.isArray(object.broadcasts))
                    throw TypeError(".CSteamTV_HomePageTemplate_Takeover.broadcasts: array expected");
                message.broadcasts = [];
                for (var i = 0; i < object.broadcasts.length; ++i) {
                    if (typeof object.broadcasts[i] !== "object")
                        throw TypeError(".CSteamTV_HomePageTemplate_Takeover.broadcasts: object expected");
                    message.broadcasts[i] = $root.GetBroadcastChannelEntry.fromObject(object.broadcasts[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_HomePageTemplate_Takeover message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_HomePageTemplate_Takeover
         * @static
         * @param {CSteamTV_HomePageTemplate_Takeover} message CSteamTV_HomePageTemplate_Takeover
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_HomePageTemplate_Takeover.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.broadcasts = [];
            if (message.broadcasts && message.broadcasts.length) {
                object.broadcasts = [];
                for (var j = 0; j < message.broadcasts.length; ++j)
                    object.broadcasts[j] = $root.GetBroadcastChannelEntry.toObject(message.broadcasts[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_HomePageTemplate_Takeover to JSON.
         * @function toJSON
         * @memberof CSteamTV_HomePageTemplate_Takeover
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_HomePageTemplate_Takeover.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_HomePageTemplate_Takeover;
    })();
    
    $root.CSteamTV_HomePageTemplate_SingleGame = (function() {
    
        /**
         * Properties of a CSteamTV_HomePageTemplate_SingleGame.
         * @exports ICSteamTV_HomePageTemplate_SingleGame
         * @interface ICSteamTV_HomePageTemplate_SingleGame
         * @property {Array.<IGetBroadcastChannelEntry>|null} [broadcasts] CSteamTV_HomePageTemplate_SingleGame broadcasts
         * @property {number|null} [appid] CSteamTV_HomePageTemplate_SingleGame appid
         * @property {string|null} [title] CSteamTV_HomePageTemplate_SingleGame title
         */
    
        /**
         * Constructs a new CSteamTV_HomePageTemplate_SingleGame.
         * @exports CSteamTV_HomePageTemplate_SingleGame
         * @classdesc Represents a CSteamTV_HomePageTemplate_SingleGame.
         * @implements ICSteamTV_HomePageTemplate_SingleGame
         * @constructor
         * @param {ICSteamTV_HomePageTemplate_SingleGame=} [properties] Properties to set
         */
        function CSteamTV_HomePageTemplate_SingleGame(properties) {
            this.broadcasts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_HomePageTemplate_SingleGame broadcasts.
         * @member {Array.<IGetBroadcastChannelEntry>} broadcasts
         * @memberof CSteamTV_HomePageTemplate_SingleGame
         * @instance
         */
        CSteamTV_HomePageTemplate_SingleGame.prototype.broadcasts = $util.emptyArray;
    
        /**
         * CSteamTV_HomePageTemplate_SingleGame appid.
         * @member {number} appid
         * @memberof CSteamTV_HomePageTemplate_SingleGame
         * @instance
         */
        CSteamTV_HomePageTemplate_SingleGame.prototype.appid = 0;
    
        /**
         * CSteamTV_HomePageTemplate_SingleGame title.
         * @member {string} title
         * @memberof CSteamTV_HomePageTemplate_SingleGame
         * @instance
         */
        CSteamTV_HomePageTemplate_SingleGame.prototype.title = "";
    
        /**
         * Creates a new CSteamTV_HomePageTemplate_SingleGame instance using the specified properties.
         * @function create
         * @memberof CSteamTV_HomePageTemplate_SingleGame
         * @static
         * @param {ICSteamTV_HomePageTemplate_SingleGame=} [properties] Properties to set
         * @returns {CSteamTV_HomePageTemplate_SingleGame} CSteamTV_HomePageTemplate_SingleGame instance
         */
        CSteamTV_HomePageTemplate_SingleGame.create = function create(properties) {
            return new CSteamTV_HomePageTemplate_SingleGame(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_SingleGame message. Does not implicitly {@link CSteamTV_HomePageTemplate_SingleGame.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_HomePageTemplate_SingleGame
         * @static
         * @param {ICSteamTV_HomePageTemplate_SingleGame} message CSteamTV_HomePageTemplate_SingleGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_SingleGame.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcasts != null && message.broadcasts.length)
                for (var i = 0; i < message.broadcasts.length; ++i)
                    $root.GetBroadcastChannelEntry.encode(message.broadcasts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appid);
            if (message.title != null && message.hasOwnProperty("title"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.title);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_SingleGame message, length delimited. Does not implicitly {@link CSteamTV_HomePageTemplate_SingleGame.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_HomePageTemplate_SingleGame
         * @static
         * @param {ICSteamTV_HomePageTemplate_SingleGame} message CSteamTV_HomePageTemplate_SingleGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_SingleGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_SingleGame message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_HomePageTemplate_SingleGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_HomePageTemplate_SingleGame} CSteamTV_HomePageTemplate_SingleGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_SingleGame.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_HomePageTemplate_SingleGame();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.broadcasts && message.broadcasts.length))
                        message.broadcasts = [];
                    message.broadcasts.push($root.GetBroadcastChannelEntry.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.appid = reader.uint32();
                    break;
                case 3:
                    message.title = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_SingleGame message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_HomePageTemplate_SingleGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_HomePageTemplate_SingleGame} CSteamTV_HomePageTemplate_SingleGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_SingleGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_HomePageTemplate_SingleGame message.
         * @function verify
         * @memberof CSteamTV_HomePageTemplate_SingleGame
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_HomePageTemplate_SingleGame.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcasts != null && message.hasOwnProperty("broadcasts")) {
                if (!Array.isArray(message.broadcasts))
                    return "broadcasts: array expected";
                for (var i = 0; i < message.broadcasts.length; ++i) {
                    var error = $root.GetBroadcastChannelEntry.verify(message.broadcasts[i]);
                    if (error)
                        return "broadcasts." + error;
                }
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_HomePageTemplate_SingleGame message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_HomePageTemplate_SingleGame
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_HomePageTemplate_SingleGame} CSteamTV_HomePageTemplate_SingleGame
         */
        CSteamTV_HomePageTemplate_SingleGame.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_HomePageTemplate_SingleGame)
                return object;
            var message = new $root.CSteamTV_HomePageTemplate_SingleGame();
            if (object.broadcasts) {
                if (!Array.isArray(object.broadcasts))
                    throw TypeError(".CSteamTV_HomePageTemplate_SingleGame.broadcasts: array expected");
                message.broadcasts = [];
                for (var i = 0; i < object.broadcasts.length; ++i) {
                    if (typeof object.broadcasts[i] !== "object")
                        throw TypeError(".CSteamTV_HomePageTemplate_SingleGame.broadcasts: object expected");
                    message.broadcasts[i] = $root.GetBroadcastChannelEntry.fromObject(object.broadcasts[i]);
                }
            }
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.title != null)
                message.title = String(object.title);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_HomePageTemplate_SingleGame message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_HomePageTemplate_SingleGame
         * @static
         * @param {CSteamTV_HomePageTemplate_SingleGame} message CSteamTV_HomePageTemplate_SingleGame
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_HomePageTemplate_SingleGame.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.broadcasts = [];
            if (options.defaults) {
                object.appid = 0;
                object.title = "";
            }
            if (message.broadcasts && message.broadcasts.length) {
                object.broadcasts = [];
                for (var j = 0; j < message.broadcasts.length; ++j)
                    object.broadcasts[j] = $root.GetBroadcastChannelEntry.toObject(message.broadcasts[j], options);
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            return object;
        };
    
        /**
         * Converts this CSteamTV_HomePageTemplate_SingleGame to JSON.
         * @function toJSON
         * @memberof CSteamTV_HomePageTemplate_SingleGame
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_HomePageTemplate_SingleGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_HomePageTemplate_SingleGame;
    })();
    
    $root.GameListEntry = (function() {
    
        /**
         * Properties of a GameListEntry.
         * @exports IGameListEntry
         * @interface IGameListEntry
         * @property {number|null} [appid] GameListEntry appid
         * @property {string|null} [game_name] GameListEntry game_name
         * @property {IGetBroadcastChannelEntry|null} [broadcast] GameListEntry broadcast
         */
    
        /**
         * Constructs a new GameListEntry.
         * @exports GameListEntry
         * @classdesc Represents a GameListEntry.
         * @implements IGameListEntry
         * @constructor
         * @param {IGameListEntry=} [properties] Properties to set
         */
        function GameListEntry(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * GameListEntry appid.
         * @member {number} appid
         * @memberof GameListEntry
         * @instance
         */
        GameListEntry.prototype.appid = 0;
    
        /**
         * GameListEntry game_name.
         * @member {string} game_name
         * @memberof GameListEntry
         * @instance
         */
        GameListEntry.prototype.game_name = "";
    
        /**
         * GameListEntry broadcast.
         * @member {IGetBroadcastChannelEntry|null|undefined} broadcast
         * @memberof GameListEntry
         * @instance
         */
        GameListEntry.prototype.broadcast = null;
    
        /**
         * Creates a new GameListEntry instance using the specified properties.
         * @function create
         * @memberof GameListEntry
         * @static
         * @param {IGameListEntry=} [properties] Properties to set
         * @returns {GameListEntry} GameListEntry instance
         */
        GameListEntry.create = function create(properties) {
            return new GameListEntry(properties);
        };
    
        /**
         * Encodes the specified GameListEntry message. Does not implicitly {@link GameListEntry.verify|verify} messages.
         * @function encode
         * @memberof GameListEntry
         * @static
         * @param {IGameListEntry} message GameListEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameListEntry.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.game_name != null && message.hasOwnProperty("game_name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.game_name);
            if (message.broadcast != null && message.hasOwnProperty("broadcast"))
                $root.GetBroadcastChannelEntry.encode(message.broadcast, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified GameListEntry message, length delimited. Does not implicitly {@link GameListEntry.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GameListEntry
         * @static
         * @param {IGameListEntry} message GameListEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameListEntry.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a GameListEntry message from the specified reader or buffer.
         * @function decode
         * @memberof GameListEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {GameListEntry} GameListEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameListEntry.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GameListEntry();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.game_name = reader.string();
                    break;
                case 3:
                    message.broadcast = $root.GetBroadcastChannelEntry.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a GameListEntry message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof GameListEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {GameListEntry} GameListEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameListEntry.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a GameListEntry message.
         * @function verify
         * @memberof GameListEntry
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GameListEntry.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.game_name != null && message.hasOwnProperty("game_name"))
                if (!$util.isString(message.game_name))
                    return "game_name: string expected";
            if (message.broadcast != null && message.hasOwnProperty("broadcast")) {
                var error = $root.GetBroadcastChannelEntry.verify(message.broadcast);
                if (error)
                    return "broadcast." + error;
            }
            return null;
        };
    
        /**
         * Creates a GameListEntry message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof GameListEntry
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {GameListEntry} GameListEntry
         */
        GameListEntry.fromObject = function fromObject(object) {
            if (object instanceof $root.GameListEntry)
                return object;
            var message = new $root.GameListEntry();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.game_name != null)
                message.game_name = String(object.game_name);
            if (object.broadcast != null) {
                if (typeof object.broadcast !== "object")
                    throw TypeError(".GameListEntry.broadcast: object expected");
                message.broadcast = $root.GetBroadcastChannelEntry.fromObject(object.broadcast);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a GameListEntry message. Also converts values to other types if specified.
         * @function toObject
         * @memberof GameListEntry
         * @static
         * @param {GameListEntry} message GameListEntry
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GameListEntry.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                object.game_name = "";
                object.broadcast = null;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.game_name != null && message.hasOwnProperty("game_name"))
                object.game_name = message.game_name;
            if (message.broadcast != null && message.hasOwnProperty("broadcast"))
                object.broadcast = $root.GetBroadcastChannelEntry.toObject(message.broadcast, options);
            return object;
        };
    
        /**
         * Converts this GameListEntry to JSON.
         * @function toJSON
         * @memberof GameListEntry
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GameListEntry.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return GameListEntry;
    })();
    
    $root.CSteamTV_HomePageTemplate_GameList = (function() {
    
        /**
         * Properties of a CSteamTV_HomePageTemplate_GameList.
         * @exports ICSteamTV_HomePageTemplate_GameList
         * @interface ICSteamTV_HomePageTemplate_GameList
         * @property {Array.<IGameListEntry>|null} [entries] CSteamTV_HomePageTemplate_GameList entries
         * @property {string|null} [title] CSteamTV_HomePageTemplate_GameList title
         */
    
        /**
         * Constructs a new CSteamTV_HomePageTemplate_GameList.
         * @exports CSteamTV_HomePageTemplate_GameList
         * @classdesc Represents a CSteamTV_HomePageTemplate_GameList.
         * @implements ICSteamTV_HomePageTemplate_GameList
         * @constructor
         * @param {ICSteamTV_HomePageTemplate_GameList=} [properties] Properties to set
         */
        function CSteamTV_HomePageTemplate_GameList(properties) {
            this.entries = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_HomePageTemplate_GameList entries.
         * @member {Array.<IGameListEntry>} entries
         * @memberof CSteamTV_HomePageTemplate_GameList
         * @instance
         */
        CSteamTV_HomePageTemplate_GameList.prototype.entries = $util.emptyArray;
    
        /**
         * CSteamTV_HomePageTemplate_GameList title.
         * @member {string} title
         * @memberof CSteamTV_HomePageTemplate_GameList
         * @instance
         */
        CSteamTV_HomePageTemplate_GameList.prototype.title = "";
    
        /**
         * Creates a new CSteamTV_HomePageTemplate_GameList instance using the specified properties.
         * @function create
         * @memberof CSteamTV_HomePageTemplate_GameList
         * @static
         * @param {ICSteamTV_HomePageTemplate_GameList=} [properties] Properties to set
         * @returns {CSteamTV_HomePageTemplate_GameList} CSteamTV_HomePageTemplate_GameList instance
         */
        CSteamTV_HomePageTemplate_GameList.create = function create(properties) {
            return new CSteamTV_HomePageTemplate_GameList(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_GameList message. Does not implicitly {@link CSteamTV_HomePageTemplate_GameList.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_HomePageTemplate_GameList
         * @static
         * @param {ICSteamTV_HomePageTemplate_GameList} message CSteamTV_HomePageTemplate_GameList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_GameList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entries != null && message.entries.length)
                for (var i = 0; i < message.entries.length; ++i)
                    $root.GameListEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.title != null && message.hasOwnProperty("title"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_GameList message, length delimited. Does not implicitly {@link CSteamTV_HomePageTemplate_GameList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_HomePageTemplate_GameList
         * @static
         * @param {ICSteamTV_HomePageTemplate_GameList} message CSteamTV_HomePageTemplate_GameList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_GameList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_GameList message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_HomePageTemplate_GameList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_HomePageTemplate_GameList} CSteamTV_HomePageTemplate_GameList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_GameList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_HomePageTemplate_GameList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.entries && message.entries.length))
                        message.entries = [];
                    message.entries.push($root.GameListEntry.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_GameList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_HomePageTemplate_GameList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_HomePageTemplate_GameList} CSteamTV_HomePageTemplate_GameList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_GameList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_HomePageTemplate_GameList message.
         * @function verify
         * @memberof CSteamTV_HomePageTemplate_GameList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_HomePageTemplate_GameList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entries != null && message.hasOwnProperty("entries")) {
                if (!Array.isArray(message.entries))
                    return "entries: array expected";
                for (var i = 0; i < message.entries.length; ++i) {
                    var error = $root.GameListEntry.verify(message.entries[i]);
                    if (error)
                        return "entries." + error;
                }
            }
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_HomePageTemplate_GameList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_HomePageTemplate_GameList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_HomePageTemplate_GameList} CSteamTV_HomePageTemplate_GameList
         */
        CSteamTV_HomePageTemplate_GameList.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_HomePageTemplate_GameList)
                return object;
            var message = new $root.CSteamTV_HomePageTemplate_GameList();
            if (object.entries) {
                if (!Array.isArray(object.entries))
                    throw TypeError(".CSteamTV_HomePageTemplate_GameList.entries: array expected");
                message.entries = [];
                for (var i = 0; i < object.entries.length; ++i) {
                    if (typeof object.entries[i] !== "object")
                        throw TypeError(".CSteamTV_HomePageTemplate_GameList.entries: object expected");
                    message.entries[i] = $root.GameListEntry.fromObject(object.entries[i]);
                }
            }
            if (object.title != null)
                message.title = String(object.title);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_HomePageTemplate_GameList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_HomePageTemplate_GameList
         * @static
         * @param {CSteamTV_HomePageTemplate_GameList} message CSteamTV_HomePageTemplate_GameList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_HomePageTemplate_GameList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.entries = [];
            if (options.defaults)
                object.title = "";
            if (message.entries && message.entries.length) {
                object.entries = [];
                for (var j = 0; j < message.entries.length; ++j)
                    object.entries[j] = $root.GameListEntry.toObject(message.entries[j], options);
            }
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            return object;
        };
    
        /**
         * Converts this CSteamTV_HomePageTemplate_GameList to JSON.
         * @function toJSON
         * @memberof CSteamTV_HomePageTemplate_GameList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_HomePageTemplate_GameList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_HomePageTemplate_GameList;
    })();
    
    $root.CSteamTV_HomePageTemplate_QuickExplore = (function() {
    
        /**
         * Properties of a CSteamTV_HomePageTemplate_QuickExplore.
         * @exports ICSteamTV_HomePageTemplate_QuickExplore
         * @interface ICSteamTV_HomePageTemplate_QuickExplore
         * @property {Array.<IGetBroadcastChannelEntry>|null} [broadcasts] CSteamTV_HomePageTemplate_QuickExplore broadcasts
         * @property {string|null} [title] CSteamTV_HomePageTemplate_QuickExplore title
         */
    
        /**
         * Constructs a new CSteamTV_HomePageTemplate_QuickExplore.
         * @exports CSteamTV_HomePageTemplate_QuickExplore
         * @classdesc Represents a CSteamTV_HomePageTemplate_QuickExplore.
         * @implements ICSteamTV_HomePageTemplate_QuickExplore
         * @constructor
         * @param {ICSteamTV_HomePageTemplate_QuickExplore=} [properties] Properties to set
         */
        function CSteamTV_HomePageTemplate_QuickExplore(properties) {
            this.broadcasts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_HomePageTemplate_QuickExplore broadcasts.
         * @member {Array.<IGetBroadcastChannelEntry>} broadcasts
         * @memberof CSteamTV_HomePageTemplate_QuickExplore
         * @instance
         */
        CSteamTV_HomePageTemplate_QuickExplore.prototype.broadcasts = $util.emptyArray;
    
        /**
         * CSteamTV_HomePageTemplate_QuickExplore title.
         * @member {string} title
         * @memberof CSteamTV_HomePageTemplate_QuickExplore
         * @instance
         */
        CSteamTV_HomePageTemplate_QuickExplore.prototype.title = "";
    
        /**
         * Creates a new CSteamTV_HomePageTemplate_QuickExplore instance using the specified properties.
         * @function create
         * @memberof CSteamTV_HomePageTemplate_QuickExplore
         * @static
         * @param {ICSteamTV_HomePageTemplate_QuickExplore=} [properties] Properties to set
         * @returns {CSteamTV_HomePageTemplate_QuickExplore} CSteamTV_HomePageTemplate_QuickExplore instance
         */
        CSteamTV_HomePageTemplate_QuickExplore.create = function create(properties) {
            return new CSteamTV_HomePageTemplate_QuickExplore(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_QuickExplore message. Does not implicitly {@link CSteamTV_HomePageTemplate_QuickExplore.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_HomePageTemplate_QuickExplore
         * @static
         * @param {ICSteamTV_HomePageTemplate_QuickExplore} message CSteamTV_HomePageTemplate_QuickExplore message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_QuickExplore.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcasts != null && message.broadcasts.length)
                for (var i = 0; i < message.broadcasts.length; ++i)
                    $root.GetBroadcastChannelEntry.encode(message.broadcasts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.title != null && message.hasOwnProperty("title"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_QuickExplore message, length delimited. Does not implicitly {@link CSteamTV_HomePageTemplate_QuickExplore.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_HomePageTemplate_QuickExplore
         * @static
         * @param {ICSteamTV_HomePageTemplate_QuickExplore} message CSteamTV_HomePageTemplate_QuickExplore message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_QuickExplore.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_QuickExplore message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_HomePageTemplate_QuickExplore
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_HomePageTemplate_QuickExplore} CSteamTV_HomePageTemplate_QuickExplore
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_QuickExplore.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_HomePageTemplate_QuickExplore();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.broadcasts && message.broadcasts.length))
                        message.broadcasts = [];
                    message.broadcasts.push($root.GetBroadcastChannelEntry.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_QuickExplore message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_HomePageTemplate_QuickExplore
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_HomePageTemplate_QuickExplore} CSteamTV_HomePageTemplate_QuickExplore
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_QuickExplore.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_HomePageTemplate_QuickExplore message.
         * @function verify
         * @memberof CSteamTV_HomePageTemplate_QuickExplore
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_HomePageTemplate_QuickExplore.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcasts != null && message.hasOwnProperty("broadcasts")) {
                if (!Array.isArray(message.broadcasts))
                    return "broadcasts: array expected";
                for (var i = 0; i < message.broadcasts.length; ++i) {
                    var error = $root.GetBroadcastChannelEntry.verify(message.broadcasts[i]);
                    if (error)
                        return "broadcasts." + error;
                }
            }
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_HomePageTemplate_QuickExplore message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_HomePageTemplate_QuickExplore
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_HomePageTemplate_QuickExplore} CSteamTV_HomePageTemplate_QuickExplore
         */
        CSteamTV_HomePageTemplate_QuickExplore.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_HomePageTemplate_QuickExplore)
                return object;
            var message = new $root.CSteamTV_HomePageTemplate_QuickExplore();
            if (object.broadcasts) {
                if (!Array.isArray(object.broadcasts))
                    throw TypeError(".CSteamTV_HomePageTemplate_QuickExplore.broadcasts: array expected");
                message.broadcasts = [];
                for (var i = 0; i < object.broadcasts.length; ++i) {
                    if (typeof object.broadcasts[i] !== "object")
                        throw TypeError(".CSteamTV_HomePageTemplate_QuickExplore.broadcasts: object expected");
                    message.broadcasts[i] = $root.GetBroadcastChannelEntry.fromObject(object.broadcasts[i]);
                }
            }
            if (object.title != null)
                message.title = String(object.title);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_HomePageTemplate_QuickExplore message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_HomePageTemplate_QuickExplore
         * @static
         * @param {CSteamTV_HomePageTemplate_QuickExplore} message CSteamTV_HomePageTemplate_QuickExplore
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_HomePageTemplate_QuickExplore.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.broadcasts = [];
            if (options.defaults)
                object.title = "";
            if (message.broadcasts && message.broadcasts.length) {
                object.broadcasts = [];
                for (var j = 0; j < message.broadcasts.length; ++j)
                    object.broadcasts[j] = $root.GetBroadcastChannelEntry.toObject(message.broadcasts[j], options);
            }
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            return object;
        };
    
        /**
         * Converts this CSteamTV_HomePageTemplate_QuickExplore to JSON.
         * @function toJSON
         * @memberof CSteamTV_HomePageTemplate_QuickExplore
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_HomePageTemplate_QuickExplore.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_HomePageTemplate_QuickExplore;
    })();
    
    $root.CSteamTV_HomePageTemplate_ConveyorBelt = (function() {
    
        /**
         * Properties of a CSteamTV_HomePageTemplate_ConveyorBelt.
         * @exports ICSteamTV_HomePageTemplate_ConveyorBelt
         * @interface ICSteamTV_HomePageTemplate_ConveyorBelt
         * @property {Array.<IGetBroadcastChannelEntry>|null} [broadcasts] CSteamTV_HomePageTemplate_ConveyorBelt broadcasts
         * @property {string|null} [title] CSteamTV_HomePageTemplate_ConveyorBelt title
         */
    
        /**
         * Constructs a new CSteamTV_HomePageTemplate_ConveyorBelt.
         * @exports CSteamTV_HomePageTemplate_ConveyorBelt
         * @classdesc Represents a CSteamTV_HomePageTemplate_ConveyorBelt.
         * @implements ICSteamTV_HomePageTemplate_ConveyorBelt
         * @constructor
         * @param {ICSteamTV_HomePageTemplate_ConveyorBelt=} [properties] Properties to set
         */
        function CSteamTV_HomePageTemplate_ConveyorBelt(properties) {
            this.broadcasts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_HomePageTemplate_ConveyorBelt broadcasts.
         * @member {Array.<IGetBroadcastChannelEntry>} broadcasts
         * @memberof CSteamTV_HomePageTemplate_ConveyorBelt
         * @instance
         */
        CSteamTV_HomePageTemplate_ConveyorBelt.prototype.broadcasts = $util.emptyArray;
    
        /**
         * CSteamTV_HomePageTemplate_ConveyorBelt title.
         * @member {string} title
         * @memberof CSteamTV_HomePageTemplate_ConveyorBelt
         * @instance
         */
        CSteamTV_HomePageTemplate_ConveyorBelt.prototype.title = "";
    
        /**
         * Creates a new CSteamTV_HomePageTemplate_ConveyorBelt instance using the specified properties.
         * @function create
         * @memberof CSteamTV_HomePageTemplate_ConveyorBelt
         * @static
         * @param {ICSteamTV_HomePageTemplate_ConveyorBelt=} [properties] Properties to set
         * @returns {CSteamTV_HomePageTemplate_ConveyorBelt} CSteamTV_HomePageTemplate_ConveyorBelt instance
         */
        CSteamTV_HomePageTemplate_ConveyorBelt.create = function create(properties) {
            return new CSteamTV_HomePageTemplate_ConveyorBelt(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_ConveyorBelt message. Does not implicitly {@link CSteamTV_HomePageTemplate_ConveyorBelt.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_HomePageTemplate_ConveyorBelt
         * @static
         * @param {ICSteamTV_HomePageTemplate_ConveyorBelt} message CSteamTV_HomePageTemplate_ConveyorBelt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_ConveyorBelt.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcasts != null && message.broadcasts.length)
                for (var i = 0; i < message.broadcasts.length; ++i)
                    $root.GetBroadcastChannelEntry.encode(message.broadcasts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.title != null && message.hasOwnProperty("title"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_ConveyorBelt message, length delimited. Does not implicitly {@link CSteamTV_HomePageTemplate_ConveyorBelt.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_HomePageTemplate_ConveyorBelt
         * @static
         * @param {ICSteamTV_HomePageTemplate_ConveyorBelt} message CSteamTV_HomePageTemplate_ConveyorBelt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_ConveyorBelt.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_ConveyorBelt message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_HomePageTemplate_ConveyorBelt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_HomePageTemplate_ConveyorBelt} CSteamTV_HomePageTemplate_ConveyorBelt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_ConveyorBelt.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_HomePageTemplate_ConveyorBelt();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.broadcasts && message.broadcasts.length))
                        message.broadcasts = [];
                    message.broadcasts.push($root.GetBroadcastChannelEntry.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_ConveyorBelt message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_HomePageTemplate_ConveyorBelt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_HomePageTemplate_ConveyorBelt} CSteamTV_HomePageTemplate_ConveyorBelt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_ConveyorBelt.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_HomePageTemplate_ConveyorBelt message.
         * @function verify
         * @memberof CSteamTV_HomePageTemplate_ConveyorBelt
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_HomePageTemplate_ConveyorBelt.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcasts != null && message.hasOwnProperty("broadcasts")) {
                if (!Array.isArray(message.broadcasts))
                    return "broadcasts: array expected";
                for (var i = 0; i < message.broadcasts.length; ++i) {
                    var error = $root.GetBroadcastChannelEntry.verify(message.broadcasts[i]);
                    if (error)
                        return "broadcasts." + error;
                }
            }
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_HomePageTemplate_ConveyorBelt message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_HomePageTemplate_ConveyorBelt
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_HomePageTemplate_ConveyorBelt} CSteamTV_HomePageTemplate_ConveyorBelt
         */
        CSteamTV_HomePageTemplate_ConveyorBelt.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_HomePageTemplate_ConveyorBelt)
                return object;
            var message = new $root.CSteamTV_HomePageTemplate_ConveyorBelt();
            if (object.broadcasts) {
                if (!Array.isArray(object.broadcasts))
                    throw TypeError(".CSteamTV_HomePageTemplate_ConveyorBelt.broadcasts: array expected");
                message.broadcasts = [];
                for (var i = 0; i < object.broadcasts.length; ++i) {
                    if (typeof object.broadcasts[i] !== "object")
                        throw TypeError(".CSteamTV_HomePageTemplate_ConveyorBelt.broadcasts: object expected");
                    message.broadcasts[i] = $root.GetBroadcastChannelEntry.fromObject(object.broadcasts[i]);
                }
            }
            if (object.title != null)
                message.title = String(object.title);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_HomePageTemplate_ConveyorBelt message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_HomePageTemplate_ConveyorBelt
         * @static
         * @param {CSteamTV_HomePageTemplate_ConveyorBelt} message CSteamTV_HomePageTemplate_ConveyorBelt
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_HomePageTemplate_ConveyorBelt.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.broadcasts = [];
            if (options.defaults)
                object.title = "";
            if (message.broadcasts && message.broadcasts.length) {
                object.broadcasts = [];
                for (var j = 0; j < message.broadcasts.length; ++j)
                    object.broadcasts[j] = $root.GetBroadcastChannelEntry.toObject(message.broadcasts[j], options);
            }
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            return object;
        };
    
        /**
         * Converts this CSteamTV_HomePageTemplate_ConveyorBelt to JSON.
         * @function toJSON
         * @memberof CSteamTV_HomePageTemplate_ConveyorBelt
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_HomePageTemplate_ConveyorBelt.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_HomePageTemplate_ConveyorBelt;
    })();
    
    $root.CSteamTV_HomePageTemplate_WatchParty = (function() {
    
        /**
         * Properties of a CSteamTV_HomePageTemplate_WatchParty.
         * @exports ICSteamTV_HomePageTemplate_WatchParty
         * @interface ICSteamTV_HomePageTemplate_WatchParty
         * @property {IGetBroadcastChannelEntry|null} [broadcast] CSteamTV_HomePageTemplate_WatchParty broadcast
         * @property {string|null} [title] CSteamTV_HomePageTemplate_WatchParty title
         * @property {number|Long|null} [chat_group_id] CSteamTV_HomePageTemplate_WatchParty chat_group_id
         */
    
        /**
         * Constructs a new CSteamTV_HomePageTemplate_WatchParty.
         * @exports CSteamTV_HomePageTemplate_WatchParty
         * @classdesc Represents a CSteamTV_HomePageTemplate_WatchParty.
         * @implements ICSteamTV_HomePageTemplate_WatchParty
         * @constructor
         * @param {ICSteamTV_HomePageTemplate_WatchParty=} [properties] Properties to set
         */
        function CSteamTV_HomePageTemplate_WatchParty(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_HomePageTemplate_WatchParty broadcast.
         * @member {IGetBroadcastChannelEntry|null|undefined} broadcast
         * @memberof CSteamTV_HomePageTemplate_WatchParty
         * @instance
         */
        CSteamTV_HomePageTemplate_WatchParty.prototype.broadcast = null;
    
        /**
         * CSteamTV_HomePageTemplate_WatchParty title.
         * @member {string} title
         * @memberof CSteamTV_HomePageTemplate_WatchParty
         * @instance
         */
        CSteamTV_HomePageTemplate_WatchParty.prototype.title = "";
    
        /**
         * CSteamTV_HomePageTemplate_WatchParty chat_group_id.
         * @member {number|Long} chat_group_id
         * @memberof CSteamTV_HomePageTemplate_WatchParty
         * @instance
         */
        CSteamTV_HomePageTemplate_WatchParty.prototype.chat_group_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CSteamTV_HomePageTemplate_WatchParty instance using the specified properties.
         * @function create
         * @memberof CSteamTV_HomePageTemplate_WatchParty
         * @static
         * @param {ICSteamTV_HomePageTemplate_WatchParty=} [properties] Properties to set
         * @returns {CSteamTV_HomePageTemplate_WatchParty} CSteamTV_HomePageTemplate_WatchParty instance
         */
        CSteamTV_HomePageTemplate_WatchParty.create = function create(properties) {
            return new CSteamTV_HomePageTemplate_WatchParty(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_WatchParty message. Does not implicitly {@link CSteamTV_HomePageTemplate_WatchParty.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_HomePageTemplate_WatchParty
         * @static
         * @param {ICSteamTV_HomePageTemplate_WatchParty} message CSteamTV_HomePageTemplate_WatchParty message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_WatchParty.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcast != null && message.hasOwnProperty("broadcast"))
                $root.GetBroadcastChannelEntry.encode(message.broadcast, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.title != null && message.hasOwnProperty("title"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.chat_group_id);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_WatchParty message, length delimited. Does not implicitly {@link CSteamTV_HomePageTemplate_WatchParty.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_HomePageTemplate_WatchParty
         * @static
         * @param {ICSteamTV_HomePageTemplate_WatchParty} message CSteamTV_HomePageTemplate_WatchParty message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_WatchParty.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_WatchParty message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_HomePageTemplate_WatchParty
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_HomePageTemplate_WatchParty} CSteamTV_HomePageTemplate_WatchParty
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_WatchParty.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_HomePageTemplate_WatchParty();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.broadcast = $root.GetBroadcastChannelEntry.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                case 3:
                    message.chat_group_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_WatchParty message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_HomePageTemplate_WatchParty
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_HomePageTemplate_WatchParty} CSteamTV_HomePageTemplate_WatchParty
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_WatchParty.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_HomePageTemplate_WatchParty message.
         * @function verify
         * @memberof CSteamTV_HomePageTemplate_WatchParty
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_HomePageTemplate_WatchParty.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcast != null && message.hasOwnProperty("broadcast")) {
                var error = $root.GetBroadcastChannelEntry.verify(message.broadcast);
                if (error)
                    return "broadcast." + error;
            }
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                if (!$util.isInteger(message.chat_group_id) && !(message.chat_group_id && $util.isInteger(message.chat_group_id.low) && $util.isInteger(message.chat_group_id.high)))
                    return "chat_group_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_HomePageTemplate_WatchParty message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_HomePageTemplate_WatchParty
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_HomePageTemplate_WatchParty} CSteamTV_HomePageTemplate_WatchParty
         */
        CSteamTV_HomePageTemplate_WatchParty.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_HomePageTemplate_WatchParty)
                return object;
            var message = new $root.CSteamTV_HomePageTemplate_WatchParty();
            if (object.broadcast != null) {
                if (typeof object.broadcast !== "object")
                    throw TypeError(".CSteamTV_HomePageTemplate_WatchParty.broadcast: object expected");
                message.broadcast = $root.GetBroadcastChannelEntry.fromObject(object.broadcast);
            }
            if (object.title != null)
                message.title = String(object.title);
            if (object.chat_group_id != null)
                if ($util.Long)
                    (message.chat_group_id = $util.Long.fromValue(object.chat_group_id)).unsigned = true;
                else if (typeof object.chat_group_id === "string")
                    message.chat_group_id = parseInt(object.chat_group_id, 10);
                else if (typeof object.chat_group_id === "number")
                    message.chat_group_id = object.chat_group_id;
                else if (typeof object.chat_group_id === "object")
                    message.chat_group_id = new $util.LongBits(object.chat_group_id.low >>> 0, object.chat_group_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_HomePageTemplate_WatchParty message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_HomePageTemplate_WatchParty
         * @static
         * @param {CSteamTV_HomePageTemplate_WatchParty} message CSteamTV_HomePageTemplate_WatchParty
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_HomePageTemplate_WatchParty.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.broadcast = null;
                object.title = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.chat_group_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.chat_group_id = options.longs === String ? "0" : 0;
            }
            if (message.broadcast != null && message.hasOwnProperty("broadcast"))
                object.broadcast = $root.GetBroadcastChannelEntry.toObject(message.broadcast, options);
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                if (typeof message.chat_group_id === "number")
                    object.chat_group_id = options.longs === String ? String(message.chat_group_id) : message.chat_group_id;
                else
                    object.chat_group_id = options.longs === String ? $util.Long.prototype.toString.call(message.chat_group_id) : options.longs === Number ? new $util.LongBits(message.chat_group_id.low >>> 0, message.chat_group_id.high >>> 0).toNumber(true) : message.chat_group_id;
            return object;
        };
    
        /**
         * Converts this CSteamTV_HomePageTemplate_WatchParty to JSON.
         * @function toJSON
         * @memberof CSteamTV_HomePageTemplate_WatchParty
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_HomePageTemplate_WatchParty.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_HomePageTemplate_WatchParty;
    })();
    
    $root.CSteamTV_HomePageTemplate_Developer = (function() {
    
        /**
         * Properties of a CSteamTV_HomePageTemplate_Developer.
         * @exports ICSteamTV_HomePageTemplate_Developer
         * @interface ICSteamTV_HomePageTemplate_Developer
         * @property {IGetBroadcastChannelEntry|null} [broadcast] CSteamTV_HomePageTemplate_Developer broadcast
         * @property {string|null} [title] CSteamTV_HomePageTemplate_Developer title
         */
    
        /**
         * Constructs a new CSteamTV_HomePageTemplate_Developer.
         * @exports CSteamTV_HomePageTemplate_Developer
         * @classdesc Represents a CSteamTV_HomePageTemplate_Developer.
         * @implements ICSteamTV_HomePageTemplate_Developer
         * @constructor
         * @param {ICSteamTV_HomePageTemplate_Developer=} [properties] Properties to set
         */
        function CSteamTV_HomePageTemplate_Developer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_HomePageTemplate_Developer broadcast.
         * @member {IGetBroadcastChannelEntry|null|undefined} broadcast
         * @memberof CSteamTV_HomePageTemplate_Developer
         * @instance
         */
        CSteamTV_HomePageTemplate_Developer.prototype.broadcast = null;
    
        /**
         * CSteamTV_HomePageTemplate_Developer title.
         * @member {string} title
         * @memberof CSteamTV_HomePageTemplate_Developer
         * @instance
         */
        CSteamTV_HomePageTemplate_Developer.prototype.title = "";
    
        /**
         * Creates a new CSteamTV_HomePageTemplate_Developer instance using the specified properties.
         * @function create
         * @memberof CSteamTV_HomePageTemplate_Developer
         * @static
         * @param {ICSteamTV_HomePageTemplate_Developer=} [properties] Properties to set
         * @returns {CSteamTV_HomePageTemplate_Developer} CSteamTV_HomePageTemplate_Developer instance
         */
        CSteamTV_HomePageTemplate_Developer.create = function create(properties) {
            return new CSteamTV_HomePageTemplate_Developer(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_Developer message. Does not implicitly {@link CSteamTV_HomePageTemplate_Developer.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_HomePageTemplate_Developer
         * @static
         * @param {ICSteamTV_HomePageTemplate_Developer} message CSteamTV_HomePageTemplate_Developer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_Developer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcast != null && message.hasOwnProperty("broadcast"))
                $root.GetBroadcastChannelEntry.encode(message.broadcast, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.title != null && message.hasOwnProperty("title"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageTemplate_Developer message, length delimited. Does not implicitly {@link CSteamTV_HomePageTemplate_Developer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_HomePageTemplate_Developer
         * @static
         * @param {ICSteamTV_HomePageTemplate_Developer} message CSteamTV_HomePageTemplate_Developer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageTemplate_Developer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_Developer message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_HomePageTemplate_Developer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_HomePageTemplate_Developer} CSteamTV_HomePageTemplate_Developer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_Developer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_HomePageTemplate_Developer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.broadcast = $root.GetBroadcastChannelEntry.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_HomePageTemplate_Developer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_HomePageTemplate_Developer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_HomePageTemplate_Developer} CSteamTV_HomePageTemplate_Developer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageTemplate_Developer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_HomePageTemplate_Developer message.
         * @function verify
         * @memberof CSteamTV_HomePageTemplate_Developer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_HomePageTemplate_Developer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcast != null && message.hasOwnProperty("broadcast")) {
                var error = $root.GetBroadcastChannelEntry.verify(message.broadcast);
                if (error)
                    return "broadcast." + error;
            }
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_HomePageTemplate_Developer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_HomePageTemplate_Developer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_HomePageTemplate_Developer} CSteamTV_HomePageTemplate_Developer
         */
        CSteamTV_HomePageTemplate_Developer.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_HomePageTemplate_Developer)
                return object;
            var message = new $root.CSteamTV_HomePageTemplate_Developer();
            if (object.broadcast != null) {
                if (typeof object.broadcast !== "object")
                    throw TypeError(".CSteamTV_HomePageTemplate_Developer.broadcast: object expected");
                message.broadcast = $root.GetBroadcastChannelEntry.fromObject(object.broadcast);
            }
            if (object.title != null)
                message.title = String(object.title);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_HomePageTemplate_Developer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_HomePageTemplate_Developer
         * @static
         * @param {CSteamTV_HomePageTemplate_Developer} message CSteamTV_HomePageTemplate_Developer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_HomePageTemplate_Developer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.broadcast = null;
                object.title = "";
            }
            if (message.broadcast != null && message.hasOwnProperty("broadcast"))
                object.broadcast = $root.GetBroadcastChannelEntry.toObject(message.broadcast, options);
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            return object;
        };
    
        /**
         * Converts this CSteamTV_HomePageTemplate_Developer to JSON.
         * @function toJSON
         * @memberof CSteamTV_HomePageTemplate_Developer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_HomePageTemplate_Developer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_HomePageTemplate_Developer;
    })();
    
    $root.CSteamTV_HomePageContentRow = (function() {
    
        /**
         * Properties of a CSteamTV_HomePageContentRow.
         * @exports ICSteamTV_HomePageContentRow
         * @interface ICSteamTV_HomePageContentRow
         * @property {number|null} [template_type] CSteamTV_HomePageContentRow template_type
         * @property {ICSteamTV_HomePageTemplate_Takeover|null} [takeover] CSteamTV_HomePageContentRow takeover
         * @property {ICSteamTV_HomePageTemplate_SingleGame|null} [single_game] CSteamTV_HomePageContentRow single_game
         * @property {ICSteamTV_HomePageTemplate_GameList|null} [game_list] CSteamTV_HomePageContentRow game_list
         * @property {ICSteamTV_HomePageTemplate_QuickExplore|null} [quick_explore] CSteamTV_HomePageContentRow quick_explore
         * @property {ICSteamTV_HomePageTemplate_ConveyorBelt|null} [conveyor_belt] CSteamTV_HomePageContentRow conveyor_belt
         * @property {ICSteamTV_HomePageTemplate_WatchParty|null} [watch_party] CSteamTV_HomePageContentRow watch_party
         * @property {ICSteamTV_HomePageTemplate_Developer|null} [developer] CSteamTV_HomePageContentRow developer
         */
    
        /**
         * Constructs a new CSteamTV_HomePageContentRow.
         * @exports CSteamTV_HomePageContentRow
         * @classdesc Represents a CSteamTV_HomePageContentRow.
         * @implements ICSteamTV_HomePageContentRow
         * @constructor
         * @param {ICSteamTV_HomePageContentRow=} [properties] Properties to set
         */
        function CSteamTV_HomePageContentRow(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_HomePageContentRow template_type.
         * @member {number} template_type
         * @memberof CSteamTV_HomePageContentRow
         * @instance
         */
        CSteamTV_HomePageContentRow.prototype.template_type = 0;
    
        /**
         * CSteamTV_HomePageContentRow takeover.
         * @member {ICSteamTV_HomePageTemplate_Takeover|null|undefined} takeover
         * @memberof CSteamTV_HomePageContentRow
         * @instance
         */
        CSteamTV_HomePageContentRow.prototype.takeover = null;
    
        /**
         * CSteamTV_HomePageContentRow single_game.
         * @member {ICSteamTV_HomePageTemplate_SingleGame|null|undefined} single_game
         * @memberof CSteamTV_HomePageContentRow
         * @instance
         */
        CSteamTV_HomePageContentRow.prototype.single_game = null;
    
        /**
         * CSteamTV_HomePageContentRow game_list.
         * @member {ICSteamTV_HomePageTemplate_GameList|null|undefined} game_list
         * @memberof CSteamTV_HomePageContentRow
         * @instance
         */
        CSteamTV_HomePageContentRow.prototype.game_list = null;
    
        /**
         * CSteamTV_HomePageContentRow quick_explore.
         * @member {ICSteamTV_HomePageTemplate_QuickExplore|null|undefined} quick_explore
         * @memberof CSteamTV_HomePageContentRow
         * @instance
         */
        CSteamTV_HomePageContentRow.prototype.quick_explore = null;
    
        /**
         * CSteamTV_HomePageContentRow conveyor_belt.
         * @member {ICSteamTV_HomePageTemplate_ConveyorBelt|null|undefined} conveyor_belt
         * @memberof CSteamTV_HomePageContentRow
         * @instance
         */
        CSteamTV_HomePageContentRow.prototype.conveyor_belt = null;
    
        /**
         * CSteamTV_HomePageContentRow watch_party.
         * @member {ICSteamTV_HomePageTemplate_WatchParty|null|undefined} watch_party
         * @memberof CSteamTV_HomePageContentRow
         * @instance
         */
        CSteamTV_HomePageContentRow.prototype.watch_party = null;
    
        /**
         * CSteamTV_HomePageContentRow developer.
         * @member {ICSteamTV_HomePageTemplate_Developer|null|undefined} developer
         * @memberof CSteamTV_HomePageContentRow
         * @instance
         */
        CSteamTV_HomePageContentRow.prototype.developer = null;
    
        /**
         * Creates a new CSteamTV_HomePageContentRow instance using the specified properties.
         * @function create
         * @memberof CSteamTV_HomePageContentRow
         * @static
         * @param {ICSteamTV_HomePageContentRow=} [properties] Properties to set
         * @returns {CSteamTV_HomePageContentRow} CSteamTV_HomePageContentRow instance
         */
        CSteamTV_HomePageContentRow.create = function create(properties) {
            return new CSteamTV_HomePageContentRow(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageContentRow message. Does not implicitly {@link CSteamTV_HomePageContentRow.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_HomePageContentRow
         * @static
         * @param {ICSteamTV_HomePageContentRow} message CSteamTV_HomePageContentRow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageContentRow.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.template_type != null && message.hasOwnProperty("template_type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.template_type);
            if (message.takeover != null && message.hasOwnProperty("takeover"))
                $root.CSteamTV_HomePageTemplate_Takeover.encode(message.takeover, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.single_game != null && message.hasOwnProperty("single_game"))
                $root.CSteamTV_HomePageTemplate_SingleGame.encode(message.single_game, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.game_list != null && message.hasOwnProperty("game_list"))
                $root.CSteamTV_HomePageTemplate_GameList.encode(message.game_list, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.quick_explore != null && message.hasOwnProperty("quick_explore"))
                $root.CSteamTV_HomePageTemplate_QuickExplore.encode(message.quick_explore, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.conveyor_belt != null && message.hasOwnProperty("conveyor_belt"))
                $root.CSteamTV_HomePageTemplate_ConveyorBelt.encode(message.conveyor_belt, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.watch_party != null && message.hasOwnProperty("watch_party"))
                $root.CSteamTV_HomePageTemplate_WatchParty.encode(message.watch_party, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.developer != null && message.hasOwnProperty("developer"))
                $root.CSteamTV_HomePageTemplate_Developer.encode(message.developer, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_HomePageContentRow message, length delimited. Does not implicitly {@link CSteamTV_HomePageContentRow.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_HomePageContentRow
         * @static
         * @param {ICSteamTV_HomePageContentRow} message CSteamTV_HomePageContentRow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_HomePageContentRow.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_HomePageContentRow message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_HomePageContentRow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_HomePageContentRow} CSteamTV_HomePageContentRow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageContentRow.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_HomePageContentRow();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.template_type = reader.int32();
                    break;
                case 2:
                    message.takeover = $root.CSteamTV_HomePageTemplate_Takeover.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.single_game = $root.CSteamTV_HomePageTemplate_SingleGame.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.game_list = $root.CSteamTV_HomePageTemplate_GameList.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.quick_explore = $root.CSteamTV_HomePageTemplate_QuickExplore.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.conveyor_belt = $root.CSteamTV_HomePageTemplate_ConveyorBelt.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.watch_party = $root.CSteamTV_HomePageTemplate_WatchParty.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.developer = $root.CSteamTV_HomePageTemplate_Developer.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_HomePageContentRow message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_HomePageContentRow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_HomePageContentRow} CSteamTV_HomePageContentRow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_HomePageContentRow.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_HomePageContentRow message.
         * @function verify
         * @memberof CSteamTV_HomePageContentRow
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_HomePageContentRow.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.template_type != null && message.hasOwnProperty("template_type"))
                if (!$util.isInteger(message.template_type))
                    return "template_type: integer expected";
            if (message.takeover != null && message.hasOwnProperty("takeover")) {
                var error = $root.CSteamTV_HomePageTemplate_Takeover.verify(message.takeover);
                if (error)
                    return "takeover." + error;
            }
            if (message.single_game != null && message.hasOwnProperty("single_game")) {
                var error = $root.CSteamTV_HomePageTemplate_SingleGame.verify(message.single_game);
                if (error)
                    return "single_game." + error;
            }
            if (message.game_list != null && message.hasOwnProperty("game_list")) {
                var error = $root.CSteamTV_HomePageTemplate_GameList.verify(message.game_list);
                if (error)
                    return "game_list." + error;
            }
            if (message.quick_explore != null && message.hasOwnProperty("quick_explore")) {
                var error = $root.CSteamTV_HomePageTemplate_QuickExplore.verify(message.quick_explore);
                if (error)
                    return "quick_explore." + error;
            }
            if (message.conveyor_belt != null && message.hasOwnProperty("conveyor_belt")) {
                var error = $root.CSteamTV_HomePageTemplate_ConveyorBelt.verify(message.conveyor_belt);
                if (error)
                    return "conveyor_belt." + error;
            }
            if (message.watch_party != null && message.hasOwnProperty("watch_party")) {
                var error = $root.CSteamTV_HomePageTemplate_WatchParty.verify(message.watch_party);
                if (error)
                    return "watch_party." + error;
            }
            if (message.developer != null && message.hasOwnProperty("developer")) {
                var error = $root.CSteamTV_HomePageTemplate_Developer.verify(message.developer);
                if (error)
                    return "developer." + error;
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_HomePageContentRow message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_HomePageContentRow
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_HomePageContentRow} CSteamTV_HomePageContentRow
         */
        CSteamTV_HomePageContentRow.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_HomePageContentRow)
                return object;
            var message = new $root.CSteamTV_HomePageContentRow();
            if (object.template_type != null)
                message.template_type = object.template_type | 0;
            if (object.takeover != null) {
                if (typeof object.takeover !== "object")
                    throw TypeError(".CSteamTV_HomePageContentRow.takeover: object expected");
                message.takeover = $root.CSteamTV_HomePageTemplate_Takeover.fromObject(object.takeover);
            }
            if (object.single_game != null) {
                if (typeof object.single_game !== "object")
                    throw TypeError(".CSteamTV_HomePageContentRow.single_game: object expected");
                message.single_game = $root.CSteamTV_HomePageTemplate_SingleGame.fromObject(object.single_game);
            }
            if (object.game_list != null) {
                if (typeof object.game_list !== "object")
                    throw TypeError(".CSteamTV_HomePageContentRow.game_list: object expected");
                message.game_list = $root.CSteamTV_HomePageTemplate_GameList.fromObject(object.game_list);
            }
            if (object.quick_explore != null) {
                if (typeof object.quick_explore !== "object")
                    throw TypeError(".CSteamTV_HomePageContentRow.quick_explore: object expected");
                message.quick_explore = $root.CSteamTV_HomePageTemplate_QuickExplore.fromObject(object.quick_explore);
            }
            if (object.conveyor_belt != null) {
                if (typeof object.conveyor_belt !== "object")
                    throw TypeError(".CSteamTV_HomePageContentRow.conveyor_belt: object expected");
                message.conveyor_belt = $root.CSteamTV_HomePageTemplate_ConveyorBelt.fromObject(object.conveyor_belt);
            }
            if (object.watch_party != null) {
                if (typeof object.watch_party !== "object")
                    throw TypeError(".CSteamTV_HomePageContentRow.watch_party: object expected");
                message.watch_party = $root.CSteamTV_HomePageTemplate_WatchParty.fromObject(object.watch_party);
            }
            if (object.developer != null) {
                if (typeof object.developer !== "object")
                    throw TypeError(".CSteamTV_HomePageContentRow.developer: object expected");
                message.developer = $root.CSteamTV_HomePageTemplate_Developer.fromObject(object.developer);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_HomePageContentRow message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_HomePageContentRow
         * @static
         * @param {CSteamTV_HomePageContentRow} message CSteamTV_HomePageContentRow
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_HomePageContentRow.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.template_type = 0;
                object.takeover = null;
                object.single_game = null;
                object.game_list = null;
                object.quick_explore = null;
                object.conveyor_belt = null;
                object.watch_party = null;
                object.developer = null;
            }
            if (message.template_type != null && message.hasOwnProperty("template_type"))
                object.template_type = message.template_type;
            if (message.takeover != null && message.hasOwnProperty("takeover"))
                object.takeover = $root.CSteamTV_HomePageTemplate_Takeover.toObject(message.takeover, options);
            if (message.single_game != null && message.hasOwnProperty("single_game"))
                object.single_game = $root.CSteamTV_HomePageTemplate_SingleGame.toObject(message.single_game, options);
            if (message.game_list != null && message.hasOwnProperty("game_list"))
                object.game_list = $root.CSteamTV_HomePageTemplate_GameList.toObject(message.game_list, options);
            if (message.quick_explore != null && message.hasOwnProperty("quick_explore"))
                object.quick_explore = $root.CSteamTV_HomePageTemplate_QuickExplore.toObject(message.quick_explore, options);
            if (message.conveyor_belt != null && message.hasOwnProperty("conveyor_belt"))
                object.conveyor_belt = $root.CSteamTV_HomePageTemplate_ConveyorBelt.toObject(message.conveyor_belt, options);
            if (message.watch_party != null && message.hasOwnProperty("watch_party"))
                object.watch_party = $root.CSteamTV_HomePageTemplate_WatchParty.toObject(message.watch_party, options);
            if (message.developer != null && message.hasOwnProperty("developer"))
                object.developer = $root.CSteamTV_HomePageTemplate_Developer.toObject(message.developer, options);
            return object;
        };
    
        /**
         * Converts this CSteamTV_HomePageContentRow to JSON.
         * @function toJSON
         * @memberof CSteamTV_HomePageContentRow
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_HomePageContentRow.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_HomePageContentRow;
    })();
    
    $root.CSteamTV_GetHomePageContents_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetHomePageContents_Response.
         * @exports ICSteamTV_GetHomePageContents_Response
         * @interface ICSteamTV_GetHomePageContents_Response
         * @property {Array.<ICSteamTV_HomePageContentRow>|null} [rows] CSteamTV_GetHomePageContents_Response rows
         */
    
        /**
         * Constructs a new CSteamTV_GetHomePageContents_Response.
         * @exports CSteamTV_GetHomePageContents_Response
         * @classdesc Represents a CSteamTV_GetHomePageContents_Response.
         * @implements ICSteamTV_GetHomePageContents_Response
         * @constructor
         * @param {ICSteamTV_GetHomePageContents_Response=} [properties] Properties to set
         */
        function CSteamTV_GetHomePageContents_Response(properties) {
            this.rows = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetHomePageContents_Response rows.
         * @member {Array.<ICSteamTV_HomePageContentRow>} rows
         * @memberof CSteamTV_GetHomePageContents_Response
         * @instance
         */
        CSteamTV_GetHomePageContents_Response.prototype.rows = $util.emptyArray;
    
        /**
         * Creates a new CSteamTV_GetHomePageContents_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetHomePageContents_Response
         * @static
         * @param {ICSteamTV_GetHomePageContents_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetHomePageContents_Response} CSteamTV_GetHomePageContents_Response instance
         */
        CSteamTV_GetHomePageContents_Response.create = function create(properties) {
            return new CSteamTV_GetHomePageContents_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetHomePageContents_Response message. Does not implicitly {@link CSteamTV_GetHomePageContents_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetHomePageContents_Response
         * @static
         * @param {ICSteamTV_GetHomePageContents_Response} message CSteamTV_GetHomePageContents_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetHomePageContents_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rows != null && message.rows.length)
                for (var i = 0; i < message.rows.length; ++i)
                    $root.CSteamTV_HomePageContentRow.encode(message.rows[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetHomePageContents_Response message, length delimited. Does not implicitly {@link CSteamTV_GetHomePageContents_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetHomePageContents_Response
         * @static
         * @param {ICSteamTV_GetHomePageContents_Response} message CSteamTV_GetHomePageContents_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetHomePageContents_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetHomePageContents_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetHomePageContents_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetHomePageContents_Response} CSteamTV_GetHomePageContents_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetHomePageContents_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetHomePageContents_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.rows && message.rows.length))
                        message.rows = [];
                    message.rows.push($root.CSteamTV_HomePageContentRow.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetHomePageContents_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetHomePageContents_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetHomePageContents_Response} CSteamTV_GetHomePageContents_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetHomePageContents_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetHomePageContents_Response message.
         * @function verify
         * @memberof CSteamTV_GetHomePageContents_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetHomePageContents_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rows != null && message.hasOwnProperty("rows")) {
                if (!Array.isArray(message.rows))
                    return "rows: array expected";
                for (var i = 0; i < message.rows.length; ++i) {
                    var error = $root.CSteamTV_HomePageContentRow.verify(message.rows[i]);
                    if (error)
                        return "rows." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetHomePageContents_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetHomePageContents_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetHomePageContents_Response} CSteamTV_GetHomePageContents_Response
         */
        CSteamTV_GetHomePageContents_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetHomePageContents_Response)
                return object;
            var message = new $root.CSteamTV_GetHomePageContents_Response();
            if (object.rows) {
                if (!Array.isArray(object.rows))
                    throw TypeError(".CSteamTV_GetHomePageContents_Response.rows: array expected");
                message.rows = [];
                for (var i = 0; i < object.rows.length; ++i) {
                    if (typeof object.rows[i] !== "object")
                        throw TypeError(".CSteamTV_GetHomePageContents_Response.rows: object expected");
                    message.rows[i] = $root.CSteamTV_HomePageContentRow.fromObject(object.rows[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetHomePageContents_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetHomePageContents_Response
         * @static
         * @param {CSteamTV_GetHomePageContents_Response} message CSteamTV_GetHomePageContents_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetHomePageContents_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.rows = [];
            if (message.rows && message.rows.length) {
                object.rows = [];
                for (var j = 0; j < message.rows.length; ++j)
                    object.rows[j] = $root.CSteamTV_HomePageContentRow.toObject(message.rows[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetHomePageContents_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetHomePageContents_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetHomePageContents_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetHomePageContents_Response;
    })();
    
    $root.CSteamTV_BroadcastClipInfo = (function() {
    
        /**
         * Properties of a CSteamTV_BroadcastClipInfo.
         * @exports ICSteamTV_BroadcastClipInfo
         * @interface ICSteamTV_BroadcastClipInfo
         * @property {number|Long|null} [broadcast_clip_id] CSteamTV_BroadcastClipInfo broadcast_clip_id
         * @property {number|Long|null} [channel_id] CSteamTV_BroadcastClipInfo channel_id
         * @property {number|null} [app_id] CSteamTV_BroadcastClipInfo app_id
         * @property {number|Long|null} [broadcaster_steamid] CSteamTV_BroadcastClipInfo broadcaster_steamid
         * @property {number|Long|null} [creator_steamid] CSteamTV_BroadcastClipInfo creator_steamid
         * @property {string|null} [video_description] CSteamTV_BroadcastClipInfo video_description
         * @property {number|null} [live_time] CSteamTV_BroadcastClipInfo live_time
         * @property {number|null} [length_ms] CSteamTV_BroadcastClipInfo length_ms
         * @property {string|null} [thumbnail_path] CSteamTV_BroadcastClipInfo thumbnail_path
         */
    
        /**
         * Constructs a new CSteamTV_BroadcastClipInfo.
         * @exports CSteamTV_BroadcastClipInfo
         * @classdesc Represents a CSteamTV_BroadcastClipInfo.
         * @implements ICSteamTV_BroadcastClipInfo
         * @constructor
         * @param {ICSteamTV_BroadcastClipInfo=} [properties] Properties to set
         */
        function CSteamTV_BroadcastClipInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_BroadcastClipInfo broadcast_clip_id.
         * @member {number|Long} broadcast_clip_id
         * @memberof CSteamTV_BroadcastClipInfo
         * @instance
         */
        CSteamTV_BroadcastClipInfo.prototype.broadcast_clip_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CSteamTV_BroadcastClipInfo channel_id.
         * @member {number|Long} channel_id
         * @memberof CSteamTV_BroadcastClipInfo
         * @instance
         */
        CSteamTV_BroadcastClipInfo.prototype.channel_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CSteamTV_BroadcastClipInfo app_id.
         * @member {number} app_id
         * @memberof CSteamTV_BroadcastClipInfo
         * @instance
         */
        CSteamTV_BroadcastClipInfo.prototype.app_id = 0;
    
        /**
         * CSteamTV_BroadcastClipInfo broadcaster_steamid.
         * @member {number|Long} broadcaster_steamid
         * @memberof CSteamTV_BroadcastClipInfo
         * @instance
         */
        CSteamTV_BroadcastClipInfo.prototype.broadcaster_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_BroadcastClipInfo creator_steamid.
         * @member {number|Long} creator_steamid
         * @memberof CSteamTV_BroadcastClipInfo
         * @instance
         */
        CSteamTV_BroadcastClipInfo.prototype.creator_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CSteamTV_BroadcastClipInfo video_description.
         * @member {string} video_description
         * @memberof CSteamTV_BroadcastClipInfo
         * @instance
         */
        CSteamTV_BroadcastClipInfo.prototype.video_description = "";
    
        /**
         * CSteamTV_BroadcastClipInfo live_time.
         * @member {number} live_time
         * @memberof CSteamTV_BroadcastClipInfo
         * @instance
         */
        CSteamTV_BroadcastClipInfo.prototype.live_time = 0;
    
        /**
         * CSteamTV_BroadcastClipInfo length_ms.
         * @member {number} length_ms
         * @memberof CSteamTV_BroadcastClipInfo
         * @instance
         */
        CSteamTV_BroadcastClipInfo.prototype.length_ms = 0;
    
        /**
         * CSteamTV_BroadcastClipInfo thumbnail_path.
         * @member {string} thumbnail_path
         * @memberof CSteamTV_BroadcastClipInfo
         * @instance
         */
        CSteamTV_BroadcastClipInfo.prototype.thumbnail_path = "";
    
        /**
         * Creates a new CSteamTV_BroadcastClipInfo instance using the specified properties.
         * @function create
         * @memberof CSteamTV_BroadcastClipInfo
         * @static
         * @param {ICSteamTV_BroadcastClipInfo=} [properties] Properties to set
         * @returns {CSteamTV_BroadcastClipInfo} CSteamTV_BroadcastClipInfo instance
         */
        CSteamTV_BroadcastClipInfo.create = function create(properties) {
            return new CSteamTV_BroadcastClipInfo(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_BroadcastClipInfo message. Does not implicitly {@link CSteamTV_BroadcastClipInfo.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_BroadcastClipInfo
         * @static
         * @param {ICSteamTV_BroadcastClipInfo} message CSteamTV_BroadcastClipInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_BroadcastClipInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.broadcast_clip_id != null && message.hasOwnProperty("broadcast_clip_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.broadcast_clip_id);
            if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.channel_id);
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.app_id);
            if (message.broadcaster_steamid != null && message.hasOwnProperty("broadcaster_steamid"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.broadcaster_steamid);
            if (message.creator_steamid != null && message.hasOwnProperty("creator_steamid"))
                writer.uint32(/* id 5, wireType 1 =*/41).fixed64(message.creator_steamid);
            if (message.video_description != null && message.hasOwnProperty("video_description"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.video_description);
            if (message.live_time != null && message.hasOwnProperty("live_time"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.live_time);
            if (message.length_ms != null && message.hasOwnProperty("length_ms"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.length_ms);
            if (message.thumbnail_path != null && message.hasOwnProperty("thumbnail_path"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.thumbnail_path);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_BroadcastClipInfo message, length delimited. Does not implicitly {@link CSteamTV_BroadcastClipInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_BroadcastClipInfo
         * @static
         * @param {ICSteamTV_BroadcastClipInfo} message CSteamTV_BroadcastClipInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_BroadcastClipInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_BroadcastClipInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_BroadcastClipInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_BroadcastClipInfo} CSteamTV_BroadcastClipInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_BroadcastClipInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_BroadcastClipInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.broadcast_clip_id = reader.uint64();
                    break;
                case 2:
                    message.channel_id = reader.uint64();
                    break;
                case 3:
                    message.app_id = reader.uint32();
                    break;
                case 4:
                    message.broadcaster_steamid = reader.fixed64();
                    break;
                case 5:
                    message.creator_steamid = reader.fixed64();
                    break;
                case 6:
                    message.video_description = reader.string();
                    break;
                case 7:
                    message.live_time = reader.uint32();
                    break;
                case 8:
                    message.length_ms = reader.uint32();
                    break;
                case 9:
                    message.thumbnail_path = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_BroadcastClipInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_BroadcastClipInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_BroadcastClipInfo} CSteamTV_BroadcastClipInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_BroadcastClipInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_BroadcastClipInfo message.
         * @function verify
         * @memberof CSteamTV_BroadcastClipInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_BroadcastClipInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.broadcast_clip_id != null && message.hasOwnProperty("broadcast_clip_id"))
                if (!$util.isInteger(message.broadcast_clip_id) && !(message.broadcast_clip_id && $util.isInteger(message.broadcast_clip_id.low) && $util.isInteger(message.broadcast_clip_id.high)))
                    return "broadcast_clip_id: integer|Long expected";
            if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                if (!$util.isInteger(message.channel_id) && !(message.channel_id && $util.isInteger(message.channel_id.low) && $util.isInteger(message.channel_id.high)))
                    return "channel_id: integer|Long expected";
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                if (!$util.isInteger(message.app_id))
                    return "app_id: integer expected";
            if (message.broadcaster_steamid != null && message.hasOwnProperty("broadcaster_steamid"))
                if (!$util.isInteger(message.broadcaster_steamid) && !(message.broadcaster_steamid && $util.isInteger(message.broadcaster_steamid.low) && $util.isInteger(message.broadcaster_steamid.high)))
                    return "broadcaster_steamid: integer|Long expected";
            if (message.creator_steamid != null && message.hasOwnProperty("creator_steamid"))
                if (!$util.isInteger(message.creator_steamid) && !(message.creator_steamid && $util.isInteger(message.creator_steamid.low) && $util.isInteger(message.creator_steamid.high)))
                    return "creator_steamid: integer|Long expected";
            if (message.video_description != null && message.hasOwnProperty("video_description"))
                if (!$util.isString(message.video_description))
                    return "video_description: string expected";
            if (message.live_time != null && message.hasOwnProperty("live_time"))
                if (!$util.isInteger(message.live_time))
                    return "live_time: integer expected";
            if (message.length_ms != null && message.hasOwnProperty("length_ms"))
                if (!$util.isInteger(message.length_ms))
                    return "length_ms: integer expected";
            if (message.thumbnail_path != null && message.hasOwnProperty("thumbnail_path"))
                if (!$util.isString(message.thumbnail_path))
                    return "thumbnail_path: string expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_BroadcastClipInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_BroadcastClipInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_BroadcastClipInfo} CSteamTV_BroadcastClipInfo
         */
        CSteamTV_BroadcastClipInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_BroadcastClipInfo)
                return object;
            var message = new $root.CSteamTV_BroadcastClipInfo();
            if (object.broadcast_clip_id != null)
                if ($util.Long)
                    (message.broadcast_clip_id = $util.Long.fromValue(object.broadcast_clip_id)).unsigned = true;
                else if (typeof object.broadcast_clip_id === "string")
                    message.broadcast_clip_id = parseInt(object.broadcast_clip_id, 10);
                else if (typeof object.broadcast_clip_id === "number")
                    message.broadcast_clip_id = object.broadcast_clip_id;
                else if (typeof object.broadcast_clip_id === "object")
                    message.broadcast_clip_id = new $util.LongBits(object.broadcast_clip_id.low >>> 0, object.broadcast_clip_id.high >>> 0).toNumber(true);
            if (object.channel_id != null)
                if ($util.Long)
                    (message.channel_id = $util.Long.fromValue(object.channel_id)).unsigned = true;
                else if (typeof object.channel_id === "string")
                    message.channel_id = parseInt(object.channel_id, 10);
                else if (typeof object.channel_id === "number")
                    message.channel_id = object.channel_id;
                else if (typeof object.channel_id === "object")
                    message.channel_id = new $util.LongBits(object.channel_id.low >>> 0, object.channel_id.high >>> 0).toNumber(true);
            if (object.app_id != null)
                message.app_id = object.app_id >>> 0;
            if (object.broadcaster_steamid != null)
                if ($util.Long)
                    (message.broadcaster_steamid = $util.Long.fromValue(object.broadcaster_steamid)).unsigned = false;
                else if (typeof object.broadcaster_steamid === "string")
                    message.broadcaster_steamid = parseInt(object.broadcaster_steamid, 10);
                else if (typeof object.broadcaster_steamid === "number")
                    message.broadcaster_steamid = object.broadcaster_steamid;
                else if (typeof object.broadcaster_steamid === "object")
                    message.broadcaster_steamid = new $util.LongBits(object.broadcaster_steamid.low >>> 0, object.broadcaster_steamid.high >>> 0).toNumber();
            if (object.creator_steamid != null)
                if ($util.Long)
                    (message.creator_steamid = $util.Long.fromValue(object.creator_steamid)).unsigned = false;
                else if (typeof object.creator_steamid === "string")
                    message.creator_steamid = parseInt(object.creator_steamid, 10);
                else if (typeof object.creator_steamid === "number")
                    message.creator_steamid = object.creator_steamid;
                else if (typeof object.creator_steamid === "object")
                    message.creator_steamid = new $util.LongBits(object.creator_steamid.low >>> 0, object.creator_steamid.high >>> 0).toNumber();
            if (object.video_description != null)
                message.video_description = String(object.video_description);
            if (object.live_time != null)
                message.live_time = object.live_time >>> 0;
            if (object.length_ms != null)
                message.length_ms = object.length_ms >>> 0;
            if (object.thumbnail_path != null)
                message.thumbnail_path = String(object.thumbnail_path);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_BroadcastClipInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_BroadcastClipInfo
         * @static
         * @param {CSteamTV_BroadcastClipInfo} message CSteamTV_BroadcastClipInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_BroadcastClipInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.broadcast_clip_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.broadcast_clip_id = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.channel_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.channel_id = options.longs === String ? "0" : 0;
                object.app_id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.broadcaster_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.broadcaster_steamid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.creator_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.creator_steamid = options.longs === String ? "0" : 0;
                object.video_description = "";
                object.live_time = 0;
                object.length_ms = 0;
                object.thumbnail_path = "";
            }
            if (message.broadcast_clip_id != null && message.hasOwnProperty("broadcast_clip_id"))
                if (typeof message.broadcast_clip_id === "number")
                    object.broadcast_clip_id = options.longs === String ? String(message.broadcast_clip_id) : message.broadcast_clip_id;
                else
                    object.broadcast_clip_id = options.longs === String ? $util.Long.prototype.toString.call(message.broadcast_clip_id) : options.longs === Number ? new $util.LongBits(message.broadcast_clip_id.low >>> 0, message.broadcast_clip_id.high >>> 0).toNumber(true) : message.broadcast_clip_id;
            if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                if (typeof message.channel_id === "number")
                    object.channel_id = options.longs === String ? String(message.channel_id) : message.channel_id;
                else
                    object.channel_id = options.longs === String ? $util.Long.prototype.toString.call(message.channel_id) : options.longs === Number ? new $util.LongBits(message.channel_id.low >>> 0, message.channel_id.high >>> 0).toNumber(true) : message.channel_id;
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                object.app_id = message.app_id;
            if (message.broadcaster_steamid != null && message.hasOwnProperty("broadcaster_steamid"))
                if (typeof message.broadcaster_steamid === "number")
                    object.broadcaster_steamid = options.longs === String ? String(message.broadcaster_steamid) : message.broadcaster_steamid;
                else
                    object.broadcaster_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.broadcaster_steamid) : options.longs === Number ? new $util.LongBits(message.broadcaster_steamid.low >>> 0, message.broadcaster_steamid.high >>> 0).toNumber() : message.broadcaster_steamid;
            if (message.creator_steamid != null && message.hasOwnProperty("creator_steamid"))
                if (typeof message.creator_steamid === "number")
                    object.creator_steamid = options.longs === String ? String(message.creator_steamid) : message.creator_steamid;
                else
                    object.creator_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.creator_steamid) : options.longs === Number ? new $util.LongBits(message.creator_steamid.low >>> 0, message.creator_steamid.high >>> 0).toNumber() : message.creator_steamid;
            if (message.video_description != null && message.hasOwnProperty("video_description"))
                object.video_description = message.video_description;
            if (message.live_time != null && message.hasOwnProperty("live_time"))
                object.live_time = message.live_time;
            if (message.length_ms != null && message.hasOwnProperty("length_ms"))
                object.length_ms = message.length_ms;
            if (message.thumbnail_path != null && message.hasOwnProperty("thumbnail_path"))
                object.thumbnail_path = message.thumbnail_path;
            return object;
        };
    
        /**
         * Converts this CSteamTV_BroadcastClipInfo to JSON.
         * @function toJSON
         * @memberof CSteamTV_BroadcastClipInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_BroadcastClipInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_BroadcastClipInfo;
    })();
    
    $root.CSteamTV_GetBroadcastChannelClips_Response = (function() {
    
        /**
         * Properties of a CSteamTV_GetBroadcastChannelClips_Response.
         * @exports ICSteamTV_GetBroadcastChannelClips_Response
         * @interface ICSteamTV_GetBroadcastChannelClips_Response
         * @property {Array.<ICSteamTV_BroadcastClipInfo>|null} [clips] CSteamTV_GetBroadcastChannelClips_Response clips
         * @property {string|null} [thumbnail_host] CSteamTV_GetBroadcastChannelClips_Response thumbnail_host
         */
    
        /**
         * Constructs a new CSteamTV_GetBroadcastChannelClips_Response.
         * @exports CSteamTV_GetBroadcastChannelClips_Response
         * @classdesc Represents a CSteamTV_GetBroadcastChannelClips_Response.
         * @implements ICSteamTV_GetBroadcastChannelClips_Response
         * @constructor
         * @param {ICSteamTV_GetBroadcastChannelClips_Response=} [properties] Properties to set
         */
        function CSteamTV_GetBroadcastChannelClips_Response(properties) {
            this.clips = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSteamTV_GetBroadcastChannelClips_Response clips.
         * @member {Array.<ICSteamTV_BroadcastClipInfo>} clips
         * @memberof CSteamTV_GetBroadcastChannelClips_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelClips_Response.prototype.clips = $util.emptyArray;
    
        /**
         * CSteamTV_GetBroadcastChannelClips_Response thumbnail_host.
         * @member {string} thumbnail_host
         * @memberof CSteamTV_GetBroadcastChannelClips_Response
         * @instance
         */
        CSteamTV_GetBroadcastChannelClips_Response.prototype.thumbnail_host = "";
    
        /**
         * Creates a new CSteamTV_GetBroadcastChannelClips_Response instance using the specified properties.
         * @function create
         * @memberof CSteamTV_GetBroadcastChannelClips_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelClips_Response=} [properties] Properties to set
         * @returns {CSteamTV_GetBroadcastChannelClips_Response} CSteamTV_GetBroadcastChannelClips_Response instance
         */
        CSteamTV_GetBroadcastChannelClips_Response.create = function create(properties) {
            return new CSteamTV_GetBroadcastChannelClips_Response(properties);
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelClips_Response message. Does not implicitly {@link CSteamTV_GetBroadcastChannelClips_Response.verify|verify} messages.
         * @function encode
         * @memberof CSteamTV_GetBroadcastChannelClips_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelClips_Response} message CSteamTV_GetBroadcastChannelClips_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelClips_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.clips != null && message.clips.length)
                for (var i = 0; i < message.clips.length; ++i)
                    $root.CSteamTV_BroadcastClipInfo.encode(message.clips[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.thumbnail_host != null && message.hasOwnProperty("thumbnail_host"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.thumbnail_host);
            return writer;
        };
    
        /**
         * Encodes the specified CSteamTV_GetBroadcastChannelClips_Response message, length delimited. Does not implicitly {@link CSteamTV_GetBroadcastChannelClips_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelClips_Response
         * @static
         * @param {ICSteamTV_GetBroadcastChannelClips_Response} message CSteamTV_GetBroadcastChannelClips_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSteamTV_GetBroadcastChannelClips_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelClips_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CSteamTV_GetBroadcastChannelClips_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSteamTV_GetBroadcastChannelClips_Response} CSteamTV_GetBroadcastChannelClips_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelClips_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSteamTV_GetBroadcastChannelClips_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.clips && message.clips.length))
                        message.clips = [];
                    message.clips.push($root.CSteamTV_BroadcastClipInfo.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.thumbnail_host = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSteamTV_GetBroadcastChannelClips_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSteamTV_GetBroadcastChannelClips_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSteamTV_GetBroadcastChannelClips_Response} CSteamTV_GetBroadcastChannelClips_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSteamTV_GetBroadcastChannelClips_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSteamTV_GetBroadcastChannelClips_Response message.
         * @function verify
         * @memberof CSteamTV_GetBroadcastChannelClips_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSteamTV_GetBroadcastChannelClips_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.clips != null && message.hasOwnProperty("clips")) {
                if (!Array.isArray(message.clips))
                    return "clips: array expected";
                for (var i = 0; i < message.clips.length; ++i) {
                    var error = $root.CSteamTV_BroadcastClipInfo.verify(message.clips[i]);
                    if (error)
                        return "clips." + error;
                }
            }
            if (message.thumbnail_host != null && message.hasOwnProperty("thumbnail_host"))
                if (!$util.isString(message.thumbnail_host))
                    return "thumbnail_host: string expected";
            return null;
        };
    
        /**
         * Creates a CSteamTV_GetBroadcastChannelClips_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSteamTV_GetBroadcastChannelClips_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSteamTV_GetBroadcastChannelClips_Response} CSteamTV_GetBroadcastChannelClips_Response
         */
        CSteamTV_GetBroadcastChannelClips_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CSteamTV_GetBroadcastChannelClips_Response)
                return object;
            var message = new $root.CSteamTV_GetBroadcastChannelClips_Response();
            if (object.clips) {
                if (!Array.isArray(object.clips))
                    throw TypeError(".CSteamTV_GetBroadcastChannelClips_Response.clips: array expected");
                message.clips = [];
                for (var i = 0; i < object.clips.length; ++i) {
                    if (typeof object.clips[i] !== "object")
                        throw TypeError(".CSteamTV_GetBroadcastChannelClips_Response.clips: object expected");
                    message.clips[i] = $root.CSteamTV_BroadcastClipInfo.fromObject(object.clips[i]);
                }
            }
            if (object.thumbnail_host != null)
                message.thumbnail_host = String(object.thumbnail_host);
            return message;
        };
    
        /**
         * Creates a plain object from a CSteamTV_GetBroadcastChannelClips_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSteamTV_GetBroadcastChannelClips_Response
         * @static
         * @param {CSteamTV_GetBroadcastChannelClips_Response} message CSteamTV_GetBroadcastChannelClips_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSteamTV_GetBroadcastChannelClips_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.clips = [];
            if (options.defaults)
                object.thumbnail_host = "";
            if (message.clips && message.clips.length) {
                object.clips = [];
                for (var j = 0; j < message.clips.length; ++j)
                    object.clips[j] = $root.CSteamTV_BroadcastClipInfo.toObject(message.clips[j], options);
            }
            if (message.thumbnail_host != null && message.hasOwnProperty("thumbnail_host"))
                object.thumbnail_host = message.thumbnail_host;
            return object;
        };
    
        /**
         * Converts this CSteamTV_GetBroadcastChannelClips_Response to JSON.
         * @function toJSON
         * @memberof CSteamTV_GetBroadcastChannelClips_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSteamTV_GetBroadcastChannelClips_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSteamTV_GetBroadcastChannelClips_Response;
    })();
    
    $root.CFriendsListCategory = (function() {
    
        /**
         * Properties of a CFriendsListCategory.
         * @exports ICFriendsListCategory
         * @interface ICFriendsListCategory
         * @property {number|null} [groupid] CFriendsListCategory groupid
         * @property {string|null} [name] CFriendsListCategory name
         * @property {Array.<number>|null} [accountid_members] CFriendsListCategory accountid_members
         */
    
        /**
         * Constructs a new CFriendsListCategory.
         * @exports CFriendsListCategory
         * @classdesc Represents a CFriendsListCategory.
         * @implements ICFriendsListCategory
         * @constructor
         * @param {ICFriendsListCategory=} [properties] Properties to set
         */
        function CFriendsListCategory(properties) {
            this.accountid_members = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CFriendsListCategory groupid.
         * @member {number} groupid
         * @memberof CFriendsListCategory
         * @instance
         */
        CFriendsListCategory.prototype.groupid = 0;
    
        /**
         * CFriendsListCategory name.
         * @member {string} name
         * @memberof CFriendsListCategory
         * @instance
         */
        CFriendsListCategory.prototype.name = "";
    
        /**
         * CFriendsListCategory accountid_members.
         * @member {Array.<number>} accountid_members
         * @memberof CFriendsListCategory
         * @instance
         */
        CFriendsListCategory.prototype.accountid_members = $util.emptyArray;
    
        /**
         * Creates a new CFriendsListCategory instance using the specified properties.
         * @function create
         * @memberof CFriendsListCategory
         * @static
         * @param {ICFriendsListCategory=} [properties] Properties to set
         * @returns {CFriendsListCategory} CFriendsListCategory instance
         */
        CFriendsListCategory.create = function create(properties) {
            return new CFriendsListCategory(properties);
        };
    
        /**
         * Encodes the specified CFriendsListCategory message. Does not implicitly {@link CFriendsListCategory.verify|verify} messages.
         * @function encode
         * @memberof CFriendsListCategory
         * @static
         * @param {ICFriendsListCategory} message CFriendsListCategory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsListCategory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.groupid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.accountid_members != null && message.accountid_members.length)
                for (var i = 0; i < message.accountid_members.length; ++i)
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.accountid_members[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CFriendsListCategory message, length delimited. Does not implicitly {@link CFriendsListCategory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CFriendsListCategory
         * @static
         * @param {ICFriendsListCategory} message CFriendsListCategory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsListCategory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CFriendsListCategory message from the specified reader or buffer.
         * @function decode
         * @memberof CFriendsListCategory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CFriendsListCategory} CFriendsListCategory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsListCategory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CFriendsListCategory();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupid = reader.uint32();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    if (!(message.accountid_members && message.accountid_members.length))
                        message.accountid_members = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.accountid_members.push(reader.uint32());
                    } else
                        message.accountid_members.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CFriendsListCategory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CFriendsListCategory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CFriendsListCategory} CFriendsListCategory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsListCategory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CFriendsListCategory message.
         * @function verify
         * @memberof CFriendsListCategory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CFriendsListCategory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                if (!$util.isInteger(message.groupid))
                    return "groupid: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.accountid_members != null && message.hasOwnProperty("accountid_members")) {
                if (!Array.isArray(message.accountid_members))
                    return "accountid_members: array expected";
                for (var i = 0; i < message.accountid_members.length; ++i)
                    if (!$util.isInteger(message.accountid_members[i]))
                        return "accountid_members: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CFriendsListCategory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CFriendsListCategory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CFriendsListCategory} CFriendsListCategory
         */
        CFriendsListCategory.fromObject = function fromObject(object) {
            if (object instanceof $root.CFriendsListCategory)
                return object;
            var message = new $root.CFriendsListCategory();
            if (object.groupid != null)
                message.groupid = object.groupid >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.accountid_members) {
                if (!Array.isArray(object.accountid_members))
                    throw TypeError(".CFriendsListCategory.accountid_members: array expected");
                message.accountid_members = [];
                for (var i = 0; i < object.accountid_members.length; ++i)
                    message.accountid_members[i] = object.accountid_members[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CFriendsListCategory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CFriendsListCategory
         * @static
         * @param {CFriendsListCategory} message CFriendsListCategory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CFriendsListCategory.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.accountid_members = [];
            if (options.defaults) {
                object.groupid = 0;
                object.name = "";
            }
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                object.groupid = message.groupid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.accountid_members && message.accountid_members.length) {
                object.accountid_members = [];
                for (var j = 0; j < message.accountid_members.length; ++j)
                    object.accountid_members[j] = message.accountid_members[j];
            }
            return object;
        };
    
        /**
         * Converts this CFriendsListCategory to JSON.
         * @function toJSON
         * @memberof CFriendsListCategory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CFriendsListCategory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CFriendsListCategory;
    })();
    
    $root.CFriendsList_GetCategories_Request = (function() {
    
        /**
         * Properties of a CFriendsList_GetCategories_Request.
         * @exports ICFriendsList_GetCategories_Request
         * @interface ICFriendsList_GetCategories_Request
         */
    
        /**
         * Constructs a new CFriendsList_GetCategories_Request.
         * @exports CFriendsList_GetCategories_Request
         * @classdesc Represents a CFriendsList_GetCategories_Request.
         * @implements ICFriendsList_GetCategories_Request
         * @constructor
         * @param {ICFriendsList_GetCategories_Request=} [properties] Properties to set
         */
        function CFriendsList_GetCategories_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CFriendsList_GetCategories_Request instance using the specified properties.
         * @function create
         * @memberof CFriendsList_GetCategories_Request
         * @static
         * @param {ICFriendsList_GetCategories_Request=} [properties] Properties to set
         * @returns {CFriendsList_GetCategories_Request} CFriendsList_GetCategories_Request instance
         */
        CFriendsList_GetCategories_Request.create = function create(properties) {
            return new CFriendsList_GetCategories_Request(properties);
        };
    
        /**
         * Encodes the specified CFriendsList_GetCategories_Request message. Does not implicitly {@link CFriendsList_GetCategories_Request.verify|verify} messages.
         * @function encode
         * @memberof CFriendsList_GetCategories_Request
         * @static
         * @param {ICFriendsList_GetCategories_Request} message CFriendsList_GetCategories_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_GetCategories_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CFriendsList_GetCategories_Request message, length delimited. Does not implicitly {@link CFriendsList_GetCategories_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CFriendsList_GetCategories_Request
         * @static
         * @param {ICFriendsList_GetCategories_Request} message CFriendsList_GetCategories_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_GetCategories_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CFriendsList_GetCategories_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CFriendsList_GetCategories_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CFriendsList_GetCategories_Request} CFriendsList_GetCategories_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_GetCategories_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CFriendsList_GetCategories_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CFriendsList_GetCategories_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CFriendsList_GetCategories_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CFriendsList_GetCategories_Request} CFriendsList_GetCategories_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_GetCategories_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CFriendsList_GetCategories_Request message.
         * @function verify
         * @memberof CFriendsList_GetCategories_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CFriendsList_GetCategories_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CFriendsList_GetCategories_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CFriendsList_GetCategories_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CFriendsList_GetCategories_Request} CFriendsList_GetCategories_Request
         */
        CFriendsList_GetCategories_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CFriendsList_GetCategories_Request)
                return object;
            return new $root.CFriendsList_GetCategories_Request();
        };
    
        /**
         * Creates a plain object from a CFriendsList_GetCategories_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CFriendsList_GetCategories_Request
         * @static
         * @param {CFriendsList_GetCategories_Request} message CFriendsList_GetCategories_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CFriendsList_GetCategories_Request.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CFriendsList_GetCategories_Request to JSON.
         * @function toJSON
         * @memberof CFriendsList_GetCategories_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CFriendsList_GetCategories_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CFriendsList_GetCategories_Request;
    })();
    
    $root.CFriendsList_GetCategories_Response = (function() {
    
        /**
         * Properties of a CFriendsList_GetCategories_Response.
         * @exports ICFriendsList_GetCategories_Response
         * @interface ICFriendsList_GetCategories_Response
         * @property {Array.<ICFriendsListCategory>|null} [categories] CFriendsList_GetCategories_Response categories
         */
    
        /**
         * Constructs a new CFriendsList_GetCategories_Response.
         * @exports CFriendsList_GetCategories_Response
         * @classdesc Represents a CFriendsList_GetCategories_Response.
         * @implements ICFriendsList_GetCategories_Response
         * @constructor
         * @param {ICFriendsList_GetCategories_Response=} [properties] Properties to set
         */
        function CFriendsList_GetCategories_Response(properties) {
            this.categories = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CFriendsList_GetCategories_Response categories.
         * @member {Array.<ICFriendsListCategory>} categories
         * @memberof CFriendsList_GetCategories_Response
         * @instance
         */
        CFriendsList_GetCategories_Response.prototype.categories = $util.emptyArray;
    
        /**
         * Creates a new CFriendsList_GetCategories_Response instance using the specified properties.
         * @function create
         * @memberof CFriendsList_GetCategories_Response
         * @static
         * @param {ICFriendsList_GetCategories_Response=} [properties] Properties to set
         * @returns {CFriendsList_GetCategories_Response} CFriendsList_GetCategories_Response instance
         */
        CFriendsList_GetCategories_Response.create = function create(properties) {
            return new CFriendsList_GetCategories_Response(properties);
        };
    
        /**
         * Encodes the specified CFriendsList_GetCategories_Response message. Does not implicitly {@link CFriendsList_GetCategories_Response.verify|verify} messages.
         * @function encode
         * @memberof CFriendsList_GetCategories_Response
         * @static
         * @param {ICFriendsList_GetCategories_Response} message CFriendsList_GetCategories_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_GetCategories_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.categories != null && message.categories.length)
                for (var i = 0; i < message.categories.length; ++i)
                    $root.CFriendsListCategory.encode(message.categories[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CFriendsList_GetCategories_Response message, length delimited. Does not implicitly {@link CFriendsList_GetCategories_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CFriendsList_GetCategories_Response
         * @static
         * @param {ICFriendsList_GetCategories_Response} message CFriendsList_GetCategories_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_GetCategories_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CFriendsList_GetCategories_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CFriendsList_GetCategories_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CFriendsList_GetCategories_Response} CFriendsList_GetCategories_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_GetCategories_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CFriendsList_GetCategories_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.categories && message.categories.length))
                        message.categories = [];
                    message.categories.push($root.CFriendsListCategory.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CFriendsList_GetCategories_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CFriendsList_GetCategories_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CFriendsList_GetCategories_Response} CFriendsList_GetCategories_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_GetCategories_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CFriendsList_GetCategories_Response message.
         * @function verify
         * @memberof CFriendsList_GetCategories_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CFriendsList_GetCategories_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.categories != null && message.hasOwnProperty("categories")) {
                if (!Array.isArray(message.categories))
                    return "categories: array expected";
                for (var i = 0; i < message.categories.length; ++i) {
                    var error = $root.CFriendsListCategory.verify(message.categories[i]);
                    if (error)
                        return "categories." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CFriendsList_GetCategories_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CFriendsList_GetCategories_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CFriendsList_GetCategories_Response} CFriendsList_GetCategories_Response
         */
        CFriendsList_GetCategories_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CFriendsList_GetCategories_Response)
                return object;
            var message = new $root.CFriendsList_GetCategories_Response();
            if (object.categories) {
                if (!Array.isArray(object.categories))
                    throw TypeError(".CFriendsList_GetCategories_Response.categories: array expected");
                message.categories = [];
                for (var i = 0; i < object.categories.length; ++i) {
                    if (typeof object.categories[i] !== "object")
                        throw TypeError(".CFriendsList_GetCategories_Response.categories: object expected");
                    message.categories[i] = $root.CFriendsListCategory.fromObject(object.categories[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CFriendsList_GetCategories_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CFriendsList_GetCategories_Response
         * @static
         * @param {CFriendsList_GetCategories_Response} message CFriendsList_GetCategories_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CFriendsList_GetCategories_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.categories = [];
            if (message.categories && message.categories.length) {
                object.categories = [];
                for (var j = 0; j < message.categories.length; ++j)
                    object.categories[j] = $root.CFriendsListCategory.toObject(message.categories[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CFriendsList_GetCategories_Response to JSON.
         * @function toJSON
         * @memberof CFriendsList_GetCategories_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CFriendsList_GetCategories_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CFriendsList_GetCategories_Response;
    })();
    
    $root.CFriendsListFavoriteEntry = (function() {
    
        /**
         * Properties of a CFriendsListFavoriteEntry.
         * @exports ICFriendsListFavoriteEntry
         * @interface ICFriendsListFavoriteEntry
         * @property {number|null} [accountid] CFriendsListFavoriteEntry accountid
         * @property {number|null} [clanid] CFriendsListFavoriteEntry clanid
         * @property {number|Long|null} [chat_group_id] CFriendsListFavoriteEntry chat_group_id
         */
    
        /**
         * Constructs a new CFriendsListFavoriteEntry.
         * @exports CFriendsListFavoriteEntry
         * @classdesc Represents a CFriendsListFavoriteEntry.
         * @implements ICFriendsListFavoriteEntry
         * @constructor
         * @param {ICFriendsListFavoriteEntry=} [properties] Properties to set
         */
        function CFriendsListFavoriteEntry(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CFriendsListFavoriteEntry accountid.
         * @member {number} accountid
         * @memberof CFriendsListFavoriteEntry
         * @instance
         */
        CFriendsListFavoriteEntry.prototype.accountid = 0;
    
        /**
         * CFriendsListFavoriteEntry clanid.
         * @member {number} clanid
         * @memberof CFriendsListFavoriteEntry
         * @instance
         */
        CFriendsListFavoriteEntry.prototype.clanid = 0;
    
        /**
         * CFriendsListFavoriteEntry chat_group_id.
         * @member {number|Long} chat_group_id
         * @memberof CFriendsListFavoriteEntry
         * @instance
         */
        CFriendsListFavoriteEntry.prototype.chat_group_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CFriendsListFavoriteEntry instance using the specified properties.
         * @function create
         * @memberof CFriendsListFavoriteEntry
         * @static
         * @param {ICFriendsListFavoriteEntry=} [properties] Properties to set
         * @returns {CFriendsListFavoriteEntry} CFriendsListFavoriteEntry instance
         */
        CFriendsListFavoriteEntry.create = function create(properties) {
            return new CFriendsListFavoriteEntry(properties);
        };
    
        /**
         * Encodes the specified CFriendsListFavoriteEntry message. Does not implicitly {@link CFriendsListFavoriteEntry.verify|verify} messages.
         * @function encode
         * @memberof CFriendsListFavoriteEntry
         * @static
         * @param {ICFriendsListFavoriteEntry} message CFriendsListFavoriteEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsListFavoriteEntry.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.clanid);
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.chat_group_id);
            return writer;
        };
    
        /**
         * Encodes the specified CFriendsListFavoriteEntry message, length delimited. Does not implicitly {@link CFriendsListFavoriteEntry.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CFriendsListFavoriteEntry
         * @static
         * @param {ICFriendsListFavoriteEntry} message CFriendsListFavoriteEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsListFavoriteEntry.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CFriendsListFavoriteEntry message from the specified reader or buffer.
         * @function decode
         * @memberof CFriendsListFavoriteEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CFriendsListFavoriteEntry} CFriendsListFavoriteEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsListFavoriteEntry.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CFriendsListFavoriteEntry();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.uint32();
                    break;
                case 2:
                    message.clanid = reader.uint32();
                    break;
                case 3:
                    message.chat_group_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CFriendsListFavoriteEntry message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CFriendsListFavoriteEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CFriendsListFavoriteEntry} CFriendsListFavoriteEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsListFavoriteEntry.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CFriendsListFavoriteEntry message.
         * @function verify
         * @memberof CFriendsListFavoriteEntry
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CFriendsListFavoriteEntry.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                if (!$util.isInteger(message.clanid))
                    return "clanid: integer expected";
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                if (!$util.isInteger(message.chat_group_id) && !(message.chat_group_id && $util.isInteger(message.chat_group_id.low) && $util.isInteger(message.chat_group_id.high)))
                    return "chat_group_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CFriendsListFavoriteEntry message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CFriendsListFavoriteEntry
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CFriendsListFavoriteEntry} CFriendsListFavoriteEntry
         */
        CFriendsListFavoriteEntry.fromObject = function fromObject(object) {
            if (object instanceof $root.CFriendsListFavoriteEntry)
                return object;
            var message = new $root.CFriendsListFavoriteEntry();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.clanid != null)
                message.clanid = object.clanid >>> 0;
            if (object.chat_group_id != null)
                if ($util.Long)
                    (message.chat_group_id = $util.Long.fromValue(object.chat_group_id)).unsigned = true;
                else if (typeof object.chat_group_id === "string")
                    message.chat_group_id = parseInt(object.chat_group_id, 10);
                else if (typeof object.chat_group_id === "number")
                    message.chat_group_id = object.chat_group_id;
                else if (typeof object.chat_group_id === "object")
                    message.chat_group_id = new $util.LongBits(object.chat_group_id.low >>> 0, object.chat_group_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CFriendsListFavoriteEntry message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CFriendsListFavoriteEntry
         * @static
         * @param {CFriendsListFavoriteEntry} message CFriendsListFavoriteEntry
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CFriendsListFavoriteEntry.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.accountid = 0;
                object.clanid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.chat_group_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.chat_group_id = options.longs === String ? "0" : 0;
            }
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                object.clanid = message.clanid;
            if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                if (typeof message.chat_group_id === "number")
                    object.chat_group_id = options.longs === String ? String(message.chat_group_id) : message.chat_group_id;
                else
                    object.chat_group_id = options.longs === String ? $util.Long.prototype.toString.call(message.chat_group_id) : options.longs === Number ? new $util.LongBits(message.chat_group_id.low >>> 0, message.chat_group_id.high >>> 0).toNumber(true) : message.chat_group_id;
            return object;
        };
    
        /**
         * Converts this CFriendsListFavoriteEntry to JSON.
         * @function toJSON
         * @memberof CFriendsListFavoriteEntry
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CFriendsListFavoriteEntry.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CFriendsListFavoriteEntry;
    })();
    
    $root.CFriendsList_GetFavorites_Request = (function() {
    
        /**
         * Properties of a CFriendsList_GetFavorites_Request.
         * @exports ICFriendsList_GetFavorites_Request
         * @interface ICFriendsList_GetFavorites_Request
         */
    
        /**
         * Constructs a new CFriendsList_GetFavorites_Request.
         * @exports CFriendsList_GetFavorites_Request
         * @classdesc Represents a CFriendsList_GetFavorites_Request.
         * @implements ICFriendsList_GetFavorites_Request
         * @constructor
         * @param {ICFriendsList_GetFavorites_Request=} [properties] Properties to set
         */
        function CFriendsList_GetFavorites_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CFriendsList_GetFavorites_Request instance using the specified properties.
         * @function create
         * @memberof CFriendsList_GetFavorites_Request
         * @static
         * @param {ICFriendsList_GetFavorites_Request=} [properties] Properties to set
         * @returns {CFriendsList_GetFavorites_Request} CFriendsList_GetFavorites_Request instance
         */
        CFriendsList_GetFavorites_Request.create = function create(properties) {
            return new CFriendsList_GetFavorites_Request(properties);
        };
    
        /**
         * Encodes the specified CFriendsList_GetFavorites_Request message. Does not implicitly {@link CFriendsList_GetFavorites_Request.verify|verify} messages.
         * @function encode
         * @memberof CFriendsList_GetFavorites_Request
         * @static
         * @param {ICFriendsList_GetFavorites_Request} message CFriendsList_GetFavorites_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_GetFavorites_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CFriendsList_GetFavorites_Request message, length delimited. Does not implicitly {@link CFriendsList_GetFavorites_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CFriendsList_GetFavorites_Request
         * @static
         * @param {ICFriendsList_GetFavorites_Request} message CFriendsList_GetFavorites_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_GetFavorites_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CFriendsList_GetFavorites_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CFriendsList_GetFavorites_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CFriendsList_GetFavorites_Request} CFriendsList_GetFavorites_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_GetFavorites_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CFriendsList_GetFavorites_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CFriendsList_GetFavorites_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CFriendsList_GetFavorites_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CFriendsList_GetFavorites_Request} CFriendsList_GetFavorites_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_GetFavorites_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CFriendsList_GetFavorites_Request message.
         * @function verify
         * @memberof CFriendsList_GetFavorites_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CFriendsList_GetFavorites_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CFriendsList_GetFavorites_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CFriendsList_GetFavorites_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CFriendsList_GetFavorites_Request} CFriendsList_GetFavorites_Request
         */
        CFriendsList_GetFavorites_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CFriendsList_GetFavorites_Request)
                return object;
            return new $root.CFriendsList_GetFavorites_Request();
        };
    
        /**
         * Creates a plain object from a CFriendsList_GetFavorites_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CFriendsList_GetFavorites_Request
         * @static
         * @param {CFriendsList_GetFavorites_Request} message CFriendsList_GetFavorites_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CFriendsList_GetFavorites_Request.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CFriendsList_GetFavorites_Request to JSON.
         * @function toJSON
         * @memberof CFriendsList_GetFavorites_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CFriendsList_GetFavorites_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CFriendsList_GetFavorites_Request;
    })();
    
    $root.CFriendsList_GetFavorites_Response = (function() {
    
        /**
         * Properties of a CFriendsList_GetFavorites_Response.
         * @exports ICFriendsList_GetFavorites_Response
         * @interface ICFriendsList_GetFavorites_Response
         * @property {Array.<ICFriendsListFavoriteEntry>|null} [favorites] CFriendsList_GetFavorites_Response favorites
         */
    
        /**
         * Constructs a new CFriendsList_GetFavorites_Response.
         * @exports CFriendsList_GetFavorites_Response
         * @classdesc Represents a CFriendsList_GetFavorites_Response.
         * @implements ICFriendsList_GetFavorites_Response
         * @constructor
         * @param {ICFriendsList_GetFavorites_Response=} [properties] Properties to set
         */
        function CFriendsList_GetFavorites_Response(properties) {
            this.favorites = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CFriendsList_GetFavorites_Response favorites.
         * @member {Array.<ICFriendsListFavoriteEntry>} favorites
         * @memberof CFriendsList_GetFavorites_Response
         * @instance
         */
        CFriendsList_GetFavorites_Response.prototype.favorites = $util.emptyArray;
    
        /**
         * Creates a new CFriendsList_GetFavorites_Response instance using the specified properties.
         * @function create
         * @memberof CFriendsList_GetFavorites_Response
         * @static
         * @param {ICFriendsList_GetFavorites_Response=} [properties] Properties to set
         * @returns {CFriendsList_GetFavorites_Response} CFriendsList_GetFavorites_Response instance
         */
        CFriendsList_GetFavorites_Response.create = function create(properties) {
            return new CFriendsList_GetFavorites_Response(properties);
        };
    
        /**
         * Encodes the specified CFriendsList_GetFavorites_Response message. Does not implicitly {@link CFriendsList_GetFavorites_Response.verify|verify} messages.
         * @function encode
         * @memberof CFriendsList_GetFavorites_Response
         * @static
         * @param {ICFriendsList_GetFavorites_Response} message CFriendsList_GetFavorites_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_GetFavorites_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.favorites != null && message.favorites.length)
                for (var i = 0; i < message.favorites.length; ++i)
                    $root.CFriendsListFavoriteEntry.encode(message.favorites[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CFriendsList_GetFavorites_Response message, length delimited. Does not implicitly {@link CFriendsList_GetFavorites_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CFriendsList_GetFavorites_Response
         * @static
         * @param {ICFriendsList_GetFavorites_Response} message CFriendsList_GetFavorites_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_GetFavorites_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CFriendsList_GetFavorites_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CFriendsList_GetFavorites_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CFriendsList_GetFavorites_Response} CFriendsList_GetFavorites_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_GetFavorites_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CFriendsList_GetFavorites_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.favorites && message.favorites.length))
                        message.favorites = [];
                    message.favorites.push($root.CFriendsListFavoriteEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CFriendsList_GetFavorites_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CFriendsList_GetFavorites_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CFriendsList_GetFavorites_Response} CFriendsList_GetFavorites_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_GetFavorites_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CFriendsList_GetFavorites_Response message.
         * @function verify
         * @memberof CFriendsList_GetFavorites_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CFriendsList_GetFavorites_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.favorites != null && message.hasOwnProperty("favorites")) {
                if (!Array.isArray(message.favorites))
                    return "favorites: array expected";
                for (var i = 0; i < message.favorites.length; ++i) {
                    var error = $root.CFriendsListFavoriteEntry.verify(message.favorites[i]);
                    if (error)
                        return "favorites." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CFriendsList_GetFavorites_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CFriendsList_GetFavorites_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CFriendsList_GetFavorites_Response} CFriendsList_GetFavorites_Response
         */
        CFriendsList_GetFavorites_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CFriendsList_GetFavorites_Response)
                return object;
            var message = new $root.CFriendsList_GetFavorites_Response();
            if (object.favorites) {
                if (!Array.isArray(object.favorites))
                    throw TypeError(".CFriendsList_GetFavorites_Response.favorites: array expected");
                message.favorites = [];
                for (var i = 0; i < object.favorites.length; ++i) {
                    if (typeof object.favorites[i] !== "object")
                        throw TypeError(".CFriendsList_GetFavorites_Response.favorites: object expected");
                    message.favorites[i] = $root.CFriendsListFavoriteEntry.fromObject(object.favorites[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CFriendsList_GetFavorites_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CFriendsList_GetFavorites_Response
         * @static
         * @param {CFriendsList_GetFavorites_Response} message CFriendsList_GetFavorites_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CFriendsList_GetFavorites_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.favorites = [];
            if (message.favorites && message.favorites.length) {
                object.favorites = [];
                for (var j = 0; j < message.favorites.length; ++j)
                    object.favorites[j] = $root.CFriendsListFavoriteEntry.toObject(message.favorites[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CFriendsList_GetFavorites_Response to JSON.
         * @function toJSON
         * @memberof CFriendsList_GetFavorites_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CFriendsList_GetFavorites_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CFriendsList_GetFavorites_Response;
    })();
    
    $root.CFriendsList_SetFavorites_Request = (function() {
    
        /**
         * Properties of a CFriendsList_SetFavorites_Request.
         * @exports ICFriendsList_SetFavorites_Request
         * @interface ICFriendsList_SetFavorites_Request
         * @property {Array.<ICFriendsListFavoriteEntry>|null} [favorites] CFriendsList_SetFavorites_Request favorites
         */
    
        /**
         * Constructs a new CFriendsList_SetFavorites_Request.
         * @exports CFriendsList_SetFavorites_Request
         * @classdesc Represents a CFriendsList_SetFavorites_Request.
         * @implements ICFriendsList_SetFavorites_Request
         * @constructor
         * @param {ICFriendsList_SetFavorites_Request=} [properties] Properties to set
         */
        function CFriendsList_SetFavorites_Request(properties) {
            this.favorites = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CFriendsList_SetFavorites_Request favorites.
         * @member {Array.<ICFriendsListFavoriteEntry>} favorites
         * @memberof CFriendsList_SetFavorites_Request
         * @instance
         */
        CFriendsList_SetFavorites_Request.prototype.favorites = $util.emptyArray;
    
        /**
         * Creates a new CFriendsList_SetFavorites_Request instance using the specified properties.
         * @function create
         * @memberof CFriendsList_SetFavorites_Request
         * @static
         * @param {ICFriendsList_SetFavorites_Request=} [properties] Properties to set
         * @returns {CFriendsList_SetFavorites_Request} CFriendsList_SetFavorites_Request instance
         */
        CFriendsList_SetFavorites_Request.create = function create(properties) {
            return new CFriendsList_SetFavorites_Request(properties);
        };
    
        /**
         * Encodes the specified CFriendsList_SetFavorites_Request message. Does not implicitly {@link CFriendsList_SetFavorites_Request.verify|verify} messages.
         * @function encode
         * @memberof CFriendsList_SetFavorites_Request
         * @static
         * @param {ICFriendsList_SetFavorites_Request} message CFriendsList_SetFavorites_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_SetFavorites_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.favorites != null && message.favorites.length)
                for (var i = 0; i < message.favorites.length; ++i)
                    $root.CFriendsListFavoriteEntry.encode(message.favorites[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CFriendsList_SetFavorites_Request message, length delimited. Does not implicitly {@link CFriendsList_SetFavorites_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CFriendsList_SetFavorites_Request
         * @static
         * @param {ICFriendsList_SetFavorites_Request} message CFriendsList_SetFavorites_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_SetFavorites_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CFriendsList_SetFavorites_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CFriendsList_SetFavorites_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CFriendsList_SetFavorites_Request} CFriendsList_SetFavorites_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_SetFavorites_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CFriendsList_SetFavorites_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.favorites && message.favorites.length))
                        message.favorites = [];
                    message.favorites.push($root.CFriendsListFavoriteEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CFriendsList_SetFavorites_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CFriendsList_SetFavorites_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CFriendsList_SetFavorites_Request} CFriendsList_SetFavorites_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_SetFavorites_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CFriendsList_SetFavorites_Request message.
         * @function verify
         * @memberof CFriendsList_SetFavorites_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CFriendsList_SetFavorites_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.favorites != null && message.hasOwnProperty("favorites")) {
                if (!Array.isArray(message.favorites))
                    return "favorites: array expected";
                for (var i = 0; i < message.favorites.length; ++i) {
                    var error = $root.CFriendsListFavoriteEntry.verify(message.favorites[i]);
                    if (error)
                        return "favorites." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CFriendsList_SetFavorites_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CFriendsList_SetFavorites_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CFriendsList_SetFavorites_Request} CFriendsList_SetFavorites_Request
         */
        CFriendsList_SetFavorites_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CFriendsList_SetFavorites_Request)
                return object;
            var message = new $root.CFriendsList_SetFavorites_Request();
            if (object.favorites) {
                if (!Array.isArray(object.favorites))
                    throw TypeError(".CFriendsList_SetFavorites_Request.favorites: array expected");
                message.favorites = [];
                for (var i = 0; i < object.favorites.length; ++i) {
                    if (typeof object.favorites[i] !== "object")
                        throw TypeError(".CFriendsList_SetFavorites_Request.favorites: object expected");
                    message.favorites[i] = $root.CFriendsListFavoriteEntry.fromObject(object.favorites[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CFriendsList_SetFavorites_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CFriendsList_SetFavorites_Request
         * @static
         * @param {CFriendsList_SetFavorites_Request} message CFriendsList_SetFavorites_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CFriendsList_SetFavorites_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.favorites = [];
            if (message.favorites && message.favorites.length) {
                object.favorites = [];
                for (var j = 0; j < message.favorites.length; ++j)
                    object.favorites[j] = $root.CFriendsListFavoriteEntry.toObject(message.favorites[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CFriendsList_SetFavorites_Request to JSON.
         * @function toJSON
         * @memberof CFriendsList_SetFavorites_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CFriendsList_SetFavorites_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CFriendsList_SetFavorites_Request;
    })();
    
    $root.CFriendsList_SetFavorites_Response = (function() {
    
        /**
         * Properties of a CFriendsList_SetFavorites_Response.
         * @exports ICFriendsList_SetFavorites_Response
         * @interface ICFriendsList_SetFavorites_Response
         */
    
        /**
         * Constructs a new CFriendsList_SetFavorites_Response.
         * @exports CFriendsList_SetFavorites_Response
         * @classdesc Represents a CFriendsList_SetFavorites_Response.
         * @implements ICFriendsList_SetFavorites_Response
         * @constructor
         * @param {ICFriendsList_SetFavorites_Response=} [properties] Properties to set
         */
        function CFriendsList_SetFavorites_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CFriendsList_SetFavorites_Response instance using the specified properties.
         * @function create
         * @memberof CFriendsList_SetFavorites_Response
         * @static
         * @param {ICFriendsList_SetFavorites_Response=} [properties] Properties to set
         * @returns {CFriendsList_SetFavorites_Response} CFriendsList_SetFavorites_Response instance
         */
        CFriendsList_SetFavorites_Response.create = function create(properties) {
            return new CFriendsList_SetFavorites_Response(properties);
        };
    
        /**
         * Encodes the specified CFriendsList_SetFavorites_Response message. Does not implicitly {@link CFriendsList_SetFavorites_Response.verify|verify} messages.
         * @function encode
         * @memberof CFriendsList_SetFavorites_Response
         * @static
         * @param {ICFriendsList_SetFavorites_Response} message CFriendsList_SetFavorites_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_SetFavorites_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CFriendsList_SetFavorites_Response message, length delimited. Does not implicitly {@link CFriendsList_SetFavorites_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CFriendsList_SetFavorites_Response
         * @static
         * @param {ICFriendsList_SetFavorites_Response} message CFriendsList_SetFavorites_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_SetFavorites_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CFriendsList_SetFavorites_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CFriendsList_SetFavorites_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CFriendsList_SetFavorites_Response} CFriendsList_SetFavorites_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_SetFavorites_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CFriendsList_SetFavorites_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CFriendsList_SetFavorites_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CFriendsList_SetFavorites_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CFriendsList_SetFavorites_Response} CFriendsList_SetFavorites_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_SetFavorites_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CFriendsList_SetFavorites_Response message.
         * @function verify
         * @memberof CFriendsList_SetFavorites_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CFriendsList_SetFavorites_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CFriendsList_SetFavorites_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CFriendsList_SetFavorites_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CFriendsList_SetFavorites_Response} CFriendsList_SetFavorites_Response
         */
        CFriendsList_SetFavorites_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CFriendsList_SetFavorites_Response)
                return object;
            return new $root.CFriendsList_SetFavorites_Response();
        };
    
        /**
         * Creates a plain object from a CFriendsList_SetFavorites_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CFriendsList_SetFavorites_Response
         * @static
         * @param {CFriendsList_SetFavorites_Response} message CFriendsList_SetFavorites_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CFriendsList_SetFavorites_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CFriendsList_SetFavorites_Response to JSON.
         * @function toJSON
         * @memberof CFriendsList_SetFavorites_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CFriendsList_SetFavorites_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CFriendsList_SetFavorites_Response;
    })();
    
    $root.CFriendsList_FavoritesChanged_Notification = (function() {
    
        /**
         * Properties of a CFriendsList_FavoritesChanged_Notification.
         * @exports ICFriendsList_FavoritesChanged_Notification
         * @interface ICFriendsList_FavoritesChanged_Notification
         * @property {Array.<ICFriendsListFavoriteEntry>|null} [favorites] CFriendsList_FavoritesChanged_Notification favorites
         */
    
        /**
         * Constructs a new CFriendsList_FavoritesChanged_Notification.
         * @exports CFriendsList_FavoritesChanged_Notification
         * @classdesc Represents a CFriendsList_FavoritesChanged_Notification.
         * @implements ICFriendsList_FavoritesChanged_Notification
         * @constructor
         * @param {ICFriendsList_FavoritesChanged_Notification=} [properties] Properties to set
         */
        function CFriendsList_FavoritesChanged_Notification(properties) {
            this.favorites = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CFriendsList_FavoritesChanged_Notification favorites.
         * @member {Array.<ICFriendsListFavoriteEntry>} favorites
         * @memberof CFriendsList_FavoritesChanged_Notification
         * @instance
         */
        CFriendsList_FavoritesChanged_Notification.prototype.favorites = $util.emptyArray;
    
        /**
         * Creates a new CFriendsList_FavoritesChanged_Notification instance using the specified properties.
         * @function create
         * @memberof CFriendsList_FavoritesChanged_Notification
         * @static
         * @param {ICFriendsList_FavoritesChanged_Notification=} [properties] Properties to set
         * @returns {CFriendsList_FavoritesChanged_Notification} CFriendsList_FavoritesChanged_Notification instance
         */
        CFriendsList_FavoritesChanged_Notification.create = function create(properties) {
            return new CFriendsList_FavoritesChanged_Notification(properties);
        };
    
        /**
         * Encodes the specified CFriendsList_FavoritesChanged_Notification message. Does not implicitly {@link CFriendsList_FavoritesChanged_Notification.verify|verify} messages.
         * @function encode
         * @memberof CFriendsList_FavoritesChanged_Notification
         * @static
         * @param {ICFriendsList_FavoritesChanged_Notification} message CFriendsList_FavoritesChanged_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_FavoritesChanged_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.favorites != null && message.favorites.length)
                for (var i = 0; i < message.favorites.length; ++i)
                    $root.CFriendsListFavoriteEntry.encode(message.favorites[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CFriendsList_FavoritesChanged_Notification message, length delimited. Does not implicitly {@link CFriendsList_FavoritesChanged_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CFriendsList_FavoritesChanged_Notification
         * @static
         * @param {ICFriendsList_FavoritesChanged_Notification} message CFriendsList_FavoritesChanged_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_FavoritesChanged_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CFriendsList_FavoritesChanged_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CFriendsList_FavoritesChanged_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CFriendsList_FavoritesChanged_Notification} CFriendsList_FavoritesChanged_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_FavoritesChanged_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CFriendsList_FavoritesChanged_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.favorites && message.favorites.length))
                        message.favorites = [];
                    message.favorites.push($root.CFriendsListFavoriteEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CFriendsList_FavoritesChanged_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CFriendsList_FavoritesChanged_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CFriendsList_FavoritesChanged_Notification} CFriendsList_FavoritesChanged_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_FavoritesChanged_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CFriendsList_FavoritesChanged_Notification message.
         * @function verify
         * @memberof CFriendsList_FavoritesChanged_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CFriendsList_FavoritesChanged_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.favorites != null && message.hasOwnProperty("favorites")) {
                if (!Array.isArray(message.favorites))
                    return "favorites: array expected";
                for (var i = 0; i < message.favorites.length; ++i) {
                    var error = $root.CFriendsListFavoriteEntry.verify(message.favorites[i]);
                    if (error)
                        return "favorites." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CFriendsList_FavoritesChanged_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CFriendsList_FavoritesChanged_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CFriendsList_FavoritesChanged_Notification} CFriendsList_FavoritesChanged_Notification
         */
        CFriendsList_FavoritesChanged_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CFriendsList_FavoritesChanged_Notification)
                return object;
            var message = new $root.CFriendsList_FavoritesChanged_Notification();
            if (object.favorites) {
                if (!Array.isArray(object.favorites))
                    throw TypeError(".CFriendsList_FavoritesChanged_Notification.favorites: array expected");
                message.favorites = [];
                for (var i = 0; i < object.favorites.length; ++i) {
                    if (typeof object.favorites[i] !== "object")
                        throw TypeError(".CFriendsList_FavoritesChanged_Notification.favorites: object expected");
                    message.favorites[i] = $root.CFriendsListFavoriteEntry.fromObject(object.favorites[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CFriendsList_FavoritesChanged_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CFriendsList_FavoritesChanged_Notification
         * @static
         * @param {CFriendsList_FavoritesChanged_Notification} message CFriendsList_FavoritesChanged_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CFriendsList_FavoritesChanged_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.favorites = [];
            if (message.favorites && message.favorites.length) {
                object.favorites = [];
                for (var j = 0; j < message.favorites.length; ++j)
                    object.favorites[j] = $root.CFriendsListFavoriteEntry.toObject(message.favorites[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CFriendsList_FavoritesChanged_Notification to JSON.
         * @function toJSON
         * @memberof CFriendsList_FavoritesChanged_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CFriendsList_FavoritesChanged_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CFriendsList_FavoritesChanged_Notification;
    })();
    
    $root.CFriendsList_GetFriendsList_Request = (function() {
    
        /**
         * Properties of a CFriendsList_GetFriendsList_Request.
         * @exports ICFriendsList_GetFriendsList_Request
         * @interface ICFriendsList_GetFriendsList_Request
         */
    
        /**
         * Constructs a new CFriendsList_GetFriendsList_Request.
         * @exports CFriendsList_GetFriendsList_Request
         * @classdesc Represents a CFriendsList_GetFriendsList_Request.
         * @implements ICFriendsList_GetFriendsList_Request
         * @constructor
         * @param {ICFriendsList_GetFriendsList_Request=} [properties] Properties to set
         */
        function CFriendsList_GetFriendsList_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CFriendsList_GetFriendsList_Request instance using the specified properties.
         * @function create
         * @memberof CFriendsList_GetFriendsList_Request
         * @static
         * @param {ICFriendsList_GetFriendsList_Request=} [properties] Properties to set
         * @returns {CFriendsList_GetFriendsList_Request} CFriendsList_GetFriendsList_Request instance
         */
        CFriendsList_GetFriendsList_Request.create = function create(properties) {
            return new CFriendsList_GetFriendsList_Request(properties);
        };
    
        /**
         * Encodes the specified CFriendsList_GetFriendsList_Request message. Does not implicitly {@link CFriendsList_GetFriendsList_Request.verify|verify} messages.
         * @function encode
         * @memberof CFriendsList_GetFriendsList_Request
         * @static
         * @param {ICFriendsList_GetFriendsList_Request} message CFriendsList_GetFriendsList_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_GetFriendsList_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CFriendsList_GetFriendsList_Request message, length delimited. Does not implicitly {@link CFriendsList_GetFriendsList_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CFriendsList_GetFriendsList_Request
         * @static
         * @param {ICFriendsList_GetFriendsList_Request} message CFriendsList_GetFriendsList_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_GetFriendsList_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CFriendsList_GetFriendsList_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CFriendsList_GetFriendsList_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CFriendsList_GetFriendsList_Request} CFriendsList_GetFriendsList_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_GetFriendsList_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CFriendsList_GetFriendsList_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CFriendsList_GetFriendsList_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CFriendsList_GetFriendsList_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CFriendsList_GetFriendsList_Request} CFriendsList_GetFriendsList_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_GetFriendsList_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CFriendsList_GetFriendsList_Request message.
         * @function verify
         * @memberof CFriendsList_GetFriendsList_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CFriendsList_GetFriendsList_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CFriendsList_GetFriendsList_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CFriendsList_GetFriendsList_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CFriendsList_GetFriendsList_Request} CFriendsList_GetFriendsList_Request
         */
        CFriendsList_GetFriendsList_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CFriendsList_GetFriendsList_Request)
                return object;
            return new $root.CFriendsList_GetFriendsList_Request();
        };
    
        /**
         * Creates a plain object from a CFriendsList_GetFriendsList_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CFriendsList_GetFriendsList_Request
         * @static
         * @param {CFriendsList_GetFriendsList_Request} message CFriendsList_GetFriendsList_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CFriendsList_GetFriendsList_Request.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CFriendsList_GetFriendsList_Request to JSON.
         * @function toJSON
         * @memberof CFriendsList_GetFriendsList_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CFriendsList_GetFriendsList_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CFriendsList_GetFriendsList_Request;
    })();
    
    $root.CFriendsList_GetFriendsList_Response = (function() {
    
        /**
         * Properties of a CFriendsList_GetFriendsList_Response.
         * @exports ICFriendsList_GetFriendsList_Response
         * @interface ICFriendsList_GetFriendsList_Response
         * @property {ICMsgClientFriendsList|null} [friendslist] CFriendsList_GetFriendsList_Response friendslist
         */
    
        /**
         * Constructs a new CFriendsList_GetFriendsList_Response.
         * @exports CFriendsList_GetFriendsList_Response
         * @classdesc Represents a CFriendsList_GetFriendsList_Response.
         * @implements ICFriendsList_GetFriendsList_Response
         * @constructor
         * @param {ICFriendsList_GetFriendsList_Response=} [properties] Properties to set
         */
        function CFriendsList_GetFriendsList_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CFriendsList_GetFriendsList_Response friendslist.
         * @member {ICMsgClientFriendsList|null|undefined} friendslist
         * @memberof CFriendsList_GetFriendsList_Response
         * @instance
         */
        CFriendsList_GetFriendsList_Response.prototype.friendslist = null;
    
        /**
         * Creates a new CFriendsList_GetFriendsList_Response instance using the specified properties.
         * @function create
         * @memberof CFriendsList_GetFriendsList_Response
         * @static
         * @param {ICFriendsList_GetFriendsList_Response=} [properties] Properties to set
         * @returns {CFriendsList_GetFriendsList_Response} CFriendsList_GetFriendsList_Response instance
         */
        CFriendsList_GetFriendsList_Response.create = function create(properties) {
            return new CFriendsList_GetFriendsList_Response(properties);
        };
    
        /**
         * Encodes the specified CFriendsList_GetFriendsList_Response message. Does not implicitly {@link CFriendsList_GetFriendsList_Response.verify|verify} messages.
         * @function encode
         * @memberof CFriendsList_GetFriendsList_Response
         * @static
         * @param {ICFriendsList_GetFriendsList_Response} message CFriendsList_GetFriendsList_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_GetFriendsList_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.friendslist != null && message.hasOwnProperty("friendslist"))
                $root.CMsgClientFriendsList.encode(message.friendslist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CFriendsList_GetFriendsList_Response message, length delimited. Does not implicitly {@link CFriendsList_GetFriendsList_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CFriendsList_GetFriendsList_Response
         * @static
         * @param {ICFriendsList_GetFriendsList_Response} message CFriendsList_GetFriendsList_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CFriendsList_GetFriendsList_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CFriendsList_GetFriendsList_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CFriendsList_GetFriendsList_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CFriendsList_GetFriendsList_Response} CFriendsList_GetFriendsList_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_GetFriendsList_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CFriendsList_GetFriendsList_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.friendslist = $root.CMsgClientFriendsList.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CFriendsList_GetFriendsList_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CFriendsList_GetFriendsList_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CFriendsList_GetFriendsList_Response} CFriendsList_GetFriendsList_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CFriendsList_GetFriendsList_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CFriendsList_GetFriendsList_Response message.
         * @function verify
         * @memberof CFriendsList_GetFriendsList_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CFriendsList_GetFriendsList_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.friendslist != null && message.hasOwnProperty("friendslist")) {
                var error = $root.CMsgClientFriendsList.verify(message.friendslist);
                if (error)
                    return "friendslist." + error;
            }
            return null;
        };
    
        /**
         * Creates a CFriendsList_GetFriendsList_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CFriendsList_GetFriendsList_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CFriendsList_GetFriendsList_Response} CFriendsList_GetFriendsList_Response
         */
        CFriendsList_GetFriendsList_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CFriendsList_GetFriendsList_Response)
                return object;
            var message = new $root.CFriendsList_GetFriendsList_Response();
            if (object.friendslist != null) {
                if (typeof object.friendslist !== "object")
                    throw TypeError(".CFriendsList_GetFriendsList_Response.friendslist: object expected");
                message.friendslist = $root.CMsgClientFriendsList.fromObject(object.friendslist);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CFriendsList_GetFriendsList_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CFriendsList_GetFriendsList_Response
         * @static
         * @param {CFriendsList_GetFriendsList_Response} message CFriendsList_GetFriendsList_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CFriendsList_GetFriendsList_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.friendslist = null;
            if (message.friendslist != null && message.hasOwnProperty("friendslist"))
                object.friendslist = $root.CMsgClientFriendsList.toObject(message.friendslist, options);
            return object;
        };
    
        /**
         * Converts this CFriendsList_GetFriendsList_Response to JSON.
         * @function toJSON
         * @memberof CFriendsList_GetFriendsList_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CFriendsList_GetFriendsList_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CFriendsList_GetFriendsList_Response;
    })();
    
    $root.CMsgClientSecret = (function() {
    
        /**
         * Properties of a CMsgClientSecret.
         * @exports ICMsgClientSecret
         * @interface ICMsgClientSecret
         * @property {number|null} [version] CMsgClientSecret version
         * @property {number|null} [appid] CMsgClientSecret appid
         * @property {number|null} [deviceid] CMsgClientSecret deviceid
         * @property {number|Long|null} [nonce] CMsgClientSecret nonce
         * @property {Uint8Array|null} [hmac] CMsgClientSecret hmac
         */
    
        /**
         * Constructs a new CMsgClientSecret.
         * @exports CMsgClientSecret
         * @classdesc Represents a CMsgClientSecret.
         * @implements ICMsgClientSecret
         * @constructor
         * @param {ICMsgClientSecret=} [properties] Properties to set
         */
        function CMsgClientSecret(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientSecret version.
         * @member {number} version
         * @memberof CMsgClientSecret
         * @instance
         */
        CMsgClientSecret.prototype.version = 0;
    
        /**
         * CMsgClientSecret appid.
         * @member {number} appid
         * @memberof CMsgClientSecret
         * @instance
         */
        CMsgClientSecret.prototype.appid = 0;
    
        /**
         * CMsgClientSecret deviceid.
         * @member {number} deviceid
         * @memberof CMsgClientSecret
         * @instance
         */
        CMsgClientSecret.prototype.deviceid = 0;
    
        /**
         * CMsgClientSecret nonce.
         * @member {number|Long} nonce
         * @memberof CMsgClientSecret
         * @instance
         */
        CMsgClientSecret.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgClientSecret hmac.
         * @member {Uint8Array} hmac
         * @memberof CMsgClientSecret
         * @instance
         */
        CMsgClientSecret.prototype.hmac = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgClientSecret instance using the specified properties.
         * @function create
         * @memberof CMsgClientSecret
         * @static
         * @param {ICMsgClientSecret=} [properties] Properties to set
         * @returns {CMsgClientSecret} CMsgClientSecret instance
         */
        CMsgClientSecret.create = function create(properties) {
            return new CMsgClientSecret(properties);
        };
    
        /**
         * Encodes the specified CMsgClientSecret message. Does not implicitly {@link CMsgClientSecret.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientSecret
         * @static
         * @param {ICMsgClientSecret} message CMsgClientSecret message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientSecret.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.version != null && message.hasOwnProperty("version"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appid);
            if (message.deviceid != null && message.hasOwnProperty("deviceid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.deviceid);
            if (message.nonce != null && message.hasOwnProperty("nonce"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.nonce);
            if (message.hmac != null && message.hasOwnProperty("hmac"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.hmac);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientSecret message, length delimited. Does not implicitly {@link CMsgClientSecret.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientSecret
         * @static
         * @param {ICMsgClientSecret} message CMsgClientSecret message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientSecret.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientSecret message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientSecret
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientSecret} CMsgClientSecret
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientSecret.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientSecret();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.version = reader.uint32();
                    break;
                case 2:
                    message.appid = reader.uint32();
                    break;
                case 3:
                    message.deviceid = reader.uint32();
                    break;
                case 4:
                    message.nonce = reader.fixed64();
                    break;
                case 5:
                    message.hmac = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientSecret message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientSecret
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientSecret} CMsgClientSecret
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientSecret.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientSecret message.
         * @function verify
         * @memberof CMsgClientSecret
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientSecret.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.version != null && message.hasOwnProperty("version"))
                if (!$util.isInteger(message.version))
                    return "version: integer expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.deviceid != null && message.hasOwnProperty("deviceid"))
                if (!$util.isInteger(message.deviceid))
                    return "deviceid: integer expected";
            if (message.nonce != null && message.hasOwnProperty("nonce"))
                if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                    return "nonce: integer|Long expected";
            if (message.hmac != null && message.hasOwnProperty("hmac"))
                if (!(message.hmac && typeof message.hmac.length === "number" || $util.isString(message.hmac)))
                    return "hmac: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientSecret message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientSecret
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientSecret} CMsgClientSecret
         */
        CMsgClientSecret.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientSecret)
                return object;
            var message = new $root.CMsgClientSecret();
            if (object.version != null)
                message.version = object.version >>> 0;
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.deviceid != null)
                message.deviceid = object.deviceid >>> 0;
            if (object.nonce != null)
                if ($util.Long)
                    (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = false;
                else if (typeof object.nonce === "string")
                    message.nonce = parseInt(object.nonce, 10);
                else if (typeof object.nonce === "number")
                    message.nonce = object.nonce;
                else if (typeof object.nonce === "object")
                    message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber();
            if (object.hmac != null)
                if (typeof object.hmac === "string")
                    $util.base64.decode(object.hmac, message.hmac = $util.newBuffer($util.base64.length(object.hmac)), 0);
                else if (object.hmac.length)
                    message.hmac = object.hmac;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientSecret message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientSecret
         * @static
         * @param {CMsgClientSecret} message CMsgClientSecret
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientSecret.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.version = 0;
                object.appid = 0;
                object.deviceid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.nonce = options.longs === String ? "0" : 0;
                if (options.bytes === String)
                    object.hmac = "";
                else {
                    object.hmac = [];
                    if (options.bytes !== Array)
                        object.hmac = $util.newBuffer(object.hmac);
                }
            }
            if (message.version != null && message.hasOwnProperty("version"))
                object.version = message.version;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.deviceid != null && message.hasOwnProperty("deviceid"))
                object.deviceid = message.deviceid;
            if (message.nonce != null && message.hasOwnProperty("nonce"))
                if (typeof message.nonce === "number")
                    object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                else
                    object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber() : message.nonce;
            if (message.hmac != null && message.hasOwnProperty("hmac"))
                object.hmac = options.bytes === String ? $util.base64.encode(message.hmac, 0, message.hmac.length) : options.bytes === Array ? Array.prototype.slice.call(message.hmac) : message.hmac;
            return object;
        };
    
        /**
         * Converts this CMsgClientSecret to JSON.
         * @function toJSON
         * @memberof CMsgClientSecret
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientSecret.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientSecret;
    })();
    
    $root.CClan_RespondToClanInvite_Request = (function() {
    
        /**
         * Properties of a CClan_RespondToClanInvite_Request.
         * @exports ICClan_RespondToClanInvite_Request
         * @interface ICClan_RespondToClanInvite_Request
         * @property {number|Long|null} [steamid] CClan_RespondToClanInvite_Request steamid
         * @property {boolean|null} [accept] CClan_RespondToClanInvite_Request accept
         */
    
        /**
         * Constructs a new CClan_RespondToClanInvite_Request.
         * @exports CClan_RespondToClanInvite_Request
         * @classdesc Represents a CClan_RespondToClanInvite_Request.
         * @implements ICClan_RespondToClanInvite_Request
         * @constructor
         * @param {ICClan_RespondToClanInvite_Request=} [properties] Properties to set
         */
        function CClan_RespondToClanInvite_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CClan_RespondToClanInvite_Request steamid.
         * @member {number|Long} steamid
         * @memberof CClan_RespondToClanInvite_Request
         * @instance
         */
        CClan_RespondToClanInvite_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClan_RespondToClanInvite_Request accept.
         * @member {boolean} accept
         * @memberof CClan_RespondToClanInvite_Request
         * @instance
         */
        CClan_RespondToClanInvite_Request.prototype.accept = false;
    
        /**
         * Creates a new CClan_RespondToClanInvite_Request instance using the specified properties.
         * @function create
         * @memberof CClan_RespondToClanInvite_Request
         * @static
         * @param {ICClan_RespondToClanInvite_Request=} [properties] Properties to set
         * @returns {CClan_RespondToClanInvite_Request} CClan_RespondToClanInvite_Request instance
         */
        CClan_RespondToClanInvite_Request.create = function create(properties) {
            return new CClan_RespondToClanInvite_Request(properties);
        };
    
        /**
         * Encodes the specified CClan_RespondToClanInvite_Request message. Does not implicitly {@link CClan_RespondToClanInvite_Request.verify|verify} messages.
         * @function encode
         * @memberof CClan_RespondToClanInvite_Request
         * @static
         * @param {ICClan_RespondToClanInvite_Request} message CClan_RespondToClanInvite_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClan_RespondToClanInvite_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.accept != null && message.hasOwnProperty("accept"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.accept);
            return writer;
        };
    
        /**
         * Encodes the specified CClan_RespondToClanInvite_Request message, length delimited. Does not implicitly {@link CClan_RespondToClanInvite_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CClan_RespondToClanInvite_Request
         * @static
         * @param {ICClan_RespondToClanInvite_Request} message CClan_RespondToClanInvite_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClan_RespondToClanInvite_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CClan_RespondToClanInvite_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CClan_RespondToClanInvite_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CClan_RespondToClanInvite_Request} CClan_RespondToClanInvite_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClan_RespondToClanInvite_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CClan_RespondToClanInvite_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.accept = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CClan_RespondToClanInvite_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CClan_RespondToClanInvite_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CClan_RespondToClanInvite_Request} CClan_RespondToClanInvite_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClan_RespondToClanInvite_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CClan_RespondToClanInvite_Request message.
         * @function verify
         * @memberof CClan_RespondToClanInvite_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CClan_RespondToClanInvite_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.accept != null && message.hasOwnProperty("accept"))
                if (typeof message.accept !== "boolean")
                    return "accept: boolean expected";
            return null;
        };
    
        /**
         * Creates a CClan_RespondToClanInvite_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CClan_RespondToClanInvite_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CClan_RespondToClanInvite_Request} CClan_RespondToClanInvite_Request
         */
        CClan_RespondToClanInvite_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CClan_RespondToClanInvite_Request)
                return object;
            var message = new $root.CClan_RespondToClanInvite_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.accept != null)
                message.accept = Boolean(object.accept);
            return message;
        };
    
        /**
         * Creates a plain object from a CClan_RespondToClanInvite_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CClan_RespondToClanInvite_Request
         * @static
         * @param {CClan_RespondToClanInvite_Request} message CClan_RespondToClanInvite_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CClan_RespondToClanInvite_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.accept = false;
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.accept != null && message.hasOwnProperty("accept"))
                object.accept = message.accept;
            return object;
        };
    
        /**
         * Converts this CClan_RespondToClanInvite_Request to JSON.
         * @function toJSON
         * @memberof CClan_RespondToClanInvite_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CClan_RespondToClanInvite_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CClan_RespondToClanInvite_Request;
    })();
    
    $root.CClan_RespondToClanInvite_Response = (function() {
    
        /**
         * Properties of a CClan_RespondToClanInvite_Response.
         * @exports ICClan_RespondToClanInvite_Response
         * @interface ICClan_RespondToClanInvite_Response
         */
    
        /**
         * Constructs a new CClan_RespondToClanInvite_Response.
         * @exports CClan_RespondToClanInvite_Response
         * @classdesc Represents a CClan_RespondToClanInvite_Response.
         * @implements ICClan_RespondToClanInvite_Response
         * @constructor
         * @param {ICClan_RespondToClanInvite_Response=} [properties] Properties to set
         */
        function CClan_RespondToClanInvite_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CClan_RespondToClanInvite_Response instance using the specified properties.
         * @function create
         * @memberof CClan_RespondToClanInvite_Response
         * @static
         * @param {ICClan_RespondToClanInvite_Response=} [properties] Properties to set
         * @returns {CClan_RespondToClanInvite_Response} CClan_RespondToClanInvite_Response instance
         */
        CClan_RespondToClanInvite_Response.create = function create(properties) {
            return new CClan_RespondToClanInvite_Response(properties);
        };
    
        /**
         * Encodes the specified CClan_RespondToClanInvite_Response message. Does not implicitly {@link CClan_RespondToClanInvite_Response.verify|verify} messages.
         * @function encode
         * @memberof CClan_RespondToClanInvite_Response
         * @static
         * @param {ICClan_RespondToClanInvite_Response} message CClan_RespondToClanInvite_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClan_RespondToClanInvite_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CClan_RespondToClanInvite_Response message, length delimited. Does not implicitly {@link CClan_RespondToClanInvite_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CClan_RespondToClanInvite_Response
         * @static
         * @param {ICClan_RespondToClanInvite_Response} message CClan_RespondToClanInvite_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClan_RespondToClanInvite_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CClan_RespondToClanInvite_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CClan_RespondToClanInvite_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CClan_RespondToClanInvite_Response} CClan_RespondToClanInvite_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClan_RespondToClanInvite_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CClan_RespondToClanInvite_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CClan_RespondToClanInvite_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CClan_RespondToClanInvite_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CClan_RespondToClanInvite_Response} CClan_RespondToClanInvite_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClan_RespondToClanInvite_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CClan_RespondToClanInvite_Response message.
         * @function verify
         * @memberof CClan_RespondToClanInvite_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CClan_RespondToClanInvite_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CClan_RespondToClanInvite_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CClan_RespondToClanInvite_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CClan_RespondToClanInvite_Response} CClan_RespondToClanInvite_Response
         */
        CClan_RespondToClanInvite_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CClan_RespondToClanInvite_Response)
                return object;
            return new $root.CClan_RespondToClanInvite_Response();
        };
    
        /**
         * Creates a plain object from a CClan_RespondToClanInvite_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CClan_RespondToClanInvite_Response
         * @static
         * @param {CClan_RespondToClanInvite_Response} message CClan_RespondToClanInvite_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CClan_RespondToClanInvite_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CClan_RespondToClanInvite_Response to JSON.
         * @function toJSON
         * @memberof CClan_RespondToClanInvite_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CClan_RespondToClanInvite_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CClan_RespondToClanInvite_Response;
    })();
    
    $root.CBroadcast_SetClipDetails_Response = (function() {
    
        /**
         * Properties of a CBroadcast_SetClipDetails_Response.
         * @exports ICBroadcast_SetClipDetails_Response
         * @interface ICBroadcast_SetClipDetails_Response
         */
    
        /**
         * Constructs a new CBroadcast_SetClipDetails_Response.
         * @exports CBroadcast_SetClipDetails_Response
         * @classdesc Represents a CBroadcast_SetClipDetails_Response.
         * @implements ICBroadcast_SetClipDetails_Response
         * @constructor
         * @param {ICBroadcast_SetClipDetails_Response=} [properties] Properties to set
         */
        function CBroadcast_SetClipDetails_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CBroadcast_SetClipDetails_Response instance using the specified properties.
         * @function create
         * @memberof CBroadcast_SetClipDetails_Response
         * @static
         * @param {ICBroadcast_SetClipDetails_Response=} [properties] Properties to set
         * @returns {CBroadcast_SetClipDetails_Response} CBroadcast_SetClipDetails_Response instance
         */
        CBroadcast_SetClipDetails_Response.create = function create(properties) {
            return new CBroadcast_SetClipDetails_Response(properties);
        };
    
        /**
         * Encodes the specified CBroadcast_SetClipDetails_Response message. Does not implicitly {@link CBroadcast_SetClipDetails_Response.verify|verify} messages.
         * @function encode
         * @memberof CBroadcast_SetClipDetails_Response
         * @static
         * @param {ICBroadcast_SetClipDetails_Response} message CBroadcast_SetClipDetails_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CBroadcast_SetClipDetails_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CBroadcast_SetClipDetails_Response message, length delimited. Does not implicitly {@link CBroadcast_SetClipDetails_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CBroadcast_SetClipDetails_Response
         * @static
         * @param {ICBroadcast_SetClipDetails_Response} message CBroadcast_SetClipDetails_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CBroadcast_SetClipDetails_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CBroadcast_SetClipDetails_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CBroadcast_SetClipDetails_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CBroadcast_SetClipDetails_Response} CBroadcast_SetClipDetails_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CBroadcast_SetClipDetails_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CBroadcast_SetClipDetails_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CBroadcast_SetClipDetails_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CBroadcast_SetClipDetails_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CBroadcast_SetClipDetails_Response} CBroadcast_SetClipDetails_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CBroadcast_SetClipDetails_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CBroadcast_SetClipDetails_Response message.
         * @function verify
         * @memberof CBroadcast_SetClipDetails_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CBroadcast_SetClipDetails_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CBroadcast_SetClipDetails_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CBroadcast_SetClipDetails_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CBroadcast_SetClipDetails_Response} CBroadcast_SetClipDetails_Response
         */
        CBroadcast_SetClipDetails_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CBroadcast_SetClipDetails_Response)
                return object;
            return new $root.CBroadcast_SetClipDetails_Response();
        };
    
        /**
         * Creates a plain object from a CBroadcast_SetClipDetails_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CBroadcast_SetClipDetails_Response
         * @static
         * @param {CBroadcast_SetClipDetails_Response} message CBroadcast_SetClipDetails_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CBroadcast_SetClipDetails_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CBroadcast_SetClipDetails_Response to JSON.
         * @function toJSON
         * @memberof CBroadcast_SetClipDetails_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CBroadcast_SetClipDetails_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CBroadcast_SetClipDetails_Response;
    })();
    
    $root.CProductImpressionsFromClient_Notification = (function() {
    
        /**
         * Properties of a CProductImpressionsFromClient_Notification.
         * @exports ICProductImpressionsFromClient_Notification
         * @interface ICProductImpressionsFromClient_Notification
         * @property {Array.<ICProductImpressionsFromClient_Notification_Impression>|null} [impressions] CProductImpressionsFromClient_Notification impressions
         */
    
        /**
         * Constructs a new CProductImpressionsFromClient_Notification.
         * @exports CProductImpressionsFromClient_Notification
         * @classdesc Represents a CProductImpressionsFromClient_Notification.
         * @implements ICProductImpressionsFromClient_Notification
         * @constructor
         * @param {ICProductImpressionsFromClient_Notification=} [properties] Properties to set
         */
        function CProductImpressionsFromClient_Notification(properties) {
            this.impressions = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CProductImpressionsFromClient_Notification impressions.
         * @member {Array.<ICProductImpressionsFromClient_Notification_Impression>} impressions
         * @memberof CProductImpressionsFromClient_Notification
         * @instance
         */
        CProductImpressionsFromClient_Notification.prototype.impressions = $util.emptyArray;
    
        /**
         * Creates a new CProductImpressionsFromClient_Notification instance using the specified properties.
         * @function create
         * @memberof CProductImpressionsFromClient_Notification
         * @static
         * @param {ICProductImpressionsFromClient_Notification=} [properties] Properties to set
         * @returns {CProductImpressionsFromClient_Notification} CProductImpressionsFromClient_Notification instance
         */
        CProductImpressionsFromClient_Notification.create = function create(properties) {
            return new CProductImpressionsFromClient_Notification(properties);
        };
    
        /**
         * Encodes the specified CProductImpressionsFromClient_Notification message. Does not implicitly {@link CProductImpressionsFromClient_Notification.verify|verify} messages.
         * @function encode
         * @memberof CProductImpressionsFromClient_Notification
         * @static
         * @param {ICProductImpressionsFromClient_Notification} message CProductImpressionsFromClient_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CProductImpressionsFromClient_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.impressions != null && message.impressions.length)
                for (var i = 0; i < message.impressions.length; ++i)
                    $root.CProductImpressionsFromClient_Notification_Impression.encode(message.impressions[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CProductImpressionsFromClient_Notification message, length delimited. Does not implicitly {@link CProductImpressionsFromClient_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CProductImpressionsFromClient_Notification
         * @static
         * @param {ICProductImpressionsFromClient_Notification} message CProductImpressionsFromClient_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CProductImpressionsFromClient_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CProductImpressionsFromClient_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CProductImpressionsFromClient_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CProductImpressionsFromClient_Notification} CProductImpressionsFromClient_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CProductImpressionsFromClient_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CProductImpressionsFromClient_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.impressions && message.impressions.length))
                        message.impressions = [];
                    message.impressions.push($root.CProductImpressionsFromClient_Notification_Impression.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CProductImpressionsFromClient_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CProductImpressionsFromClient_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CProductImpressionsFromClient_Notification} CProductImpressionsFromClient_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CProductImpressionsFromClient_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CProductImpressionsFromClient_Notification message.
         * @function verify
         * @memberof CProductImpressionsFromClient_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CProductImpressionsFromClient_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.impressions != null && message.hasOwnProperty("impressions")) {
                if (!Array.isArray(message.impressions))
                    return "impressions: array expected";
                for (var i = 0; i < message.impressions.length; ++i) {
                    var error = $root.CProductImpressionsFromClient_Notification_Impression.verify(message.impressions[i]);
                    if (error)
                        return "impressions." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CProductImpressionsFromClient_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CProductImpressionsFromClient_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CProductImpressionsFromClient_Notification} CProductImpressionsFromClient_Notification
         */
        CProductImpressionsFromClient_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CProductImpressionsFromClient_Notification)
                return object;
            var message = new $root.CProductImpressionsFromClient_Notification();
            if (object.impressions) {
                if (!Array.isArray(object.impressions))
                    throw TypeError(".CProductImpressionsFromClient_Notification.impressions: array expected");
                message.impressions = [];
                for (var i = 0; i < object.impressions.length; ++i) {
                    if (typeof object.impressions[i] !== "object")
                        throw TypeError(".CProductImpressionsFromClient_Notification.impressions: object expected");
                    message.impressions[i] = $root.CProductImpressionsFromClient_Notification_Impression.fromObject(object.impressions[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CProductImpressionsFromClient_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CProductImpressionsFromClient_Notification
         * @static
         * @param {CProductImpressionsFromClient_Notification} message CProductImpressionsFromClient_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CProductImpressionsFromClient_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.impressions = [];
            if (message.impressions && message.impressions.length) {
                object.impressions = [];
                for (var j = 0; j < message.impressions.length; ++j)
                    object.impressions[j] = $root.CProductImpressionsFromClient_Notification_Impression.toObject(message.impressions[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CProductImpressionsFromClient_Notification to JSON.
         * @function toJSON
         * @memberof CProductImpressionsFromClient_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CProductImpressionsFromClient_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CProductImpressionsFromClient_Notification;
    })();
    
    $root.CProductImpressionsFromClient_Notification_Impression = (function() {
    
        /**
         * Properties of a CProductImpressionsFromClient_Notification_Impression.
         * @exports ICProductImpressionsFromClient_Notification_Impression
         * @interface ICProductImpressionsFromClient_Notification_Impression
         * @property {number|null} [type] CProductImpressionsFromClient_Notification_Impression type
         * @property {number|null} [appid] CProductImpressionsFromClient_Notification_Impression appid
         * @property {number|null} [num_impressions] CProductImpressionsFromClient_Notification_Impression num_impressions
         */
    
        /**
         * Constructs a new CProductImpressionsFromClient_Notification_Impression.
         * @exports CProductImpressionsFromClient_Notification_Impression
         * @classdesc Represents a CProductImpressionsFromClient_Notification_Impression.
         * @implements ICProductImpressionsFromClient_Notification_Impression
         * @constructor
         * @param {ICProductImpressionsFromClient_Notification_Impression=} [properties] Properties to set
         */
        function CProductImpressionsFromClient_Notification_Impression(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CProductImpressionsFromClient_Notification_Impression type.
         * @member {number} type
         * @memberof CProductImpressionsFromClient_Notification_Impression
         * @instance
         */
        CProductImpressionsFromClient_Notification_Impression.prototype.type = 0;
    
        /**
         * CProductImpressionsFromClient_Notification_Impression appid.
         * @member {number} appid
         * @memberof CProductImpressionsFromClient_Notification_Impression
         * @instance
         */
        CProductImpressionsFromClient_Notification_Impression.prototype.appid = 0;
    
        /**
         * CProductImpressionsFromClient_Notification_Impression num_impressions.
         * @member {number} num_impressions
         * @memberof CProductImpressionsFromClient_Notification_Impression
         * @instance
         */
        CProductImpressionsFromClient_Notification_Impression.prototype.num_impressions = 0;
    
        /**
         * Creates a new CProductImpressionsFromClient_Notification_Impression instance using the specified properties.
         * @function create
         * @memberof CProductImpressionsFromClient_Notification_Impression
         * @static
         * @param {ICProductImpressionsFromClient_Notification_Impression=} [properties] Properties to set
         * @returns {CProductImpressionsFromClient_Notification_Impression} CProductImpressionsFromClient_Notification_Impression instance
         */
        CProductImpressionsFromClient_Notification_Impression.create = function create(properties) {
            return new CProductImpressionsFromClient_Notification_Impression(properties);
        };
    
        /**
         * Encodes the specified CProductImpressionsFromClient_Notification_Impression message. Does not implicitly {@link CProductImpressionsFromClient_Notification_Impression.verify|verify} messages.
         * @function encode
         * @memberof CProductImpressionsFromClient_Notification_Impression
         * @static
         * @param {ICProductImpressionsFromClient_Notification_Impression} message CProductImpressionsFromClient_Notification_Impression message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CProductImpressionsFromClient_Notification_Impression.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appid);
            if (message.num_impressions != null && message.hasOwnProperty("num_impressions"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.num_impressions);
            return writer;
        };
    
        /**
         * Encodes the specified CProductImpressionsFromClient_Notification_Impression message, length delimited. Does not implicitly {@link CProductImpressionsFromClient_Notification_Impression.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CProductImpressionsFromClient_Notification_Impression
         * @static
         * @param {ICProductImpressionsFromClient_Notification_Impression} message CProductImpressionsFromClient_Notification_Impression message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CProductImpressionsFromClient_Notification_Impression.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CProductImpressionsFromClient_Notification_Impression message from the specified reader or buffer.
         * @function decode
         * @memberof CProductImpressionsFromClient_Notification_Impression
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CProductImpressionsFromClient_Notification_Impression} CProductImpressionsFromClient_Notification_Impression
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CProductImpressionsFromClient_Notification_Impression.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CProductImpressionsFromClient_Notification_Impression();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.int32();
                    break;
                case 2:
                    message.appid = reader.uint32();
                    break;
                case 3:
                    message.num_impressions = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CProductImpressionsFromClient_Notification_Impression message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CProductImpressionsFromClient_Notification_Impression
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CProductImpressionsFromClient_Notification_Impression} CProductImpressionsFromClient_Notification_Impression
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CProductImpressionsFromClient_Notification_Impression.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CProductImpressionsFromClient_Notification_Impression message.
         * @function verify
         * @memberof CProductImpressionsFromClient_Notification_Impression
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CProductImpressionsFromClient_Notification_Impression.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.num_impressions != null && message.hasOwnProperty("num_impressions"))
                if (!$util.isInteger(message.num_impressions))
                    return "num_impressions: integer expected";
            return null;
        };
    
        /**
         * Creates a CProductImpressionsFromClient_Notification_Impression message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CProductImpressionsFromClient_Notification_Impression
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CProductImpressionsFromClient_Notification_Impression} CProductImpressionsFromClient_Notification_Impression
         */
        CProductImpressionsFromClient_Notification_Impression.fromObject = function fromObject(object) {
            if (object instanceof $root.CProductImpressionsFromClient_Notification_Impression)
                return object;
            var message = new $root.CProductImpressionsFromClient_Notification_Impression();
            if (object.type != null)
                message.type = object.type | 0;
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.num_impressions != null)
                message.num_impressions = object.num_impressions >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CProductImpressionsFromClient_Notification_Impression message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CProductImpressionsFromClient_Notification_Impression
         * @static
         * @param {CProductImpressionsFromClient_Notification_Impression} message CProductImpressionsFromClient_Notification_Impression
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CProductImpressionsFromClient_Notification_Impression.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.type = 0;
                object.appid = 0;
                object.num_impressions = 0;
            }
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.num_impressions != null && message.hasOwnProperty("num_impressions"))
                object.num_impressions = message.num_impressions;
            return object;
        };
    
        /**
         * Converts this CProductImpressionsFromClient_Notification_Impression to JSON.
         * @function toJSON
         * @memberof CProductImpressionsFromClient_Notification_Impression
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CProductImpressionsFromClient_Notification_Impression.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CProductImpressionsFromClient_Notification_Impression;
    })();
    
    $root.NotImplemented = (function() {
    
        /**
         * Properties of a NotImplemented.
         * @exports INotImplemented
         * @interface INotImplemented
         */
    
        /**
         * Constructs a new NotImplemented.
         * @exports NotImplemented
         * @classdesc Represents a NotImplemented.
         * @implements INotImplemented
         * @constructor
         * @param {INotImplemented=} [properties] Properties to set
         */
        function NotImplemented(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new NotImplemented instance using the specified properties.
         * @function create
         * @memberof NotImplemented
         * @static
         * @param {INotImplemented=} [properties] Properties to set
         * @returns {NotImplemented} NotImplemented instance
         */
        NotImplemented.create = function create(properties) {
            return new NotImplemented(properties);
        };
    
        /**
         * Encodes the specified NotImplemented message. Does not implicitly {@link NotImplemented.verify|verify} messages.
         * @function encode
         * @memberof NotImplemented
         * @static
         * @param {INotImplemented} message NotImplemented message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NotImplemented.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified NotImplemented message, length delimited. Does not implicitly {@link NotImplemented.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NotImplemented
         * @static
         * @param {INotImplemented} message NotImplemented message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NotImplemented.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a NotImplemented message from the specified reader or buffer.
         * @function decode
         * @memberof NotImplemented
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {NotImplemented} NotImplemented
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NotImplemented.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NotImplemented();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a NotImplemented message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof NotImplemented
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {NotImplemented} NotImplemented
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NotImplemented.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a NotImplemented message.
         * @function verify
         * @memberof NotImplemented
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NotImplemented.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a NotImplemented message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof NotImplemented
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {NotImplemented} NotImplemented
         */
        NotImplemented.fromObject = function fromObject(object) {
            if (object instanceof $root.NotImplemented)
                return object;
            return new $root.NotImplemented();
        };
    
        /**
         * Creates a plain object from a NotImplemented message. Also converts values to other types if specified.
         * @function toObject
         * @memberof NotImplemented
         * @static
         * @param {NotImplemented} message NotImplemented
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NotImplemented.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this NotImplemented to JSON.
         * @function toJSON
         * @memberof NotImplemented
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NotImplemented.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return NotImplemented;
    })();
    
    $root.Community = (function() {
    
        /**
         * Constructs a new Community service.
         * @exports Community
         * @classdesc Represents a Community
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function Community(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (Community.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Community;
    
        /**
         * Creates new Community service using the specified rpc implementation.
         * @function create
         * @memberof Community
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {Community} RPC service. Useful where requests and/or responses are streamed.
         */
        Community.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link Community#getApps}.
         * @memberof Community
         * @typedef GetAppsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCommunity_GetApps_Response} [response] CCommunity_GetApps_Response
         */
    
        /**
         * Calls GetApps.
         * @function getApps
         * @memberof Community
         * @instance
         * @param {ICCommunity_GetApps_Request} request CCommunity_GetApps_Request message or plain object
         * @param {Community.GetAppsCallback} callback Node-style callback called with the error, if any, and CCommunity_GetApps_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Community.prototype.getApps = function getApps(request, callback) {
            return this.rpcCall(getApps, $root.CCommunity_GetApps_Request, $root.CCommunity_GetApps_Response, request, callback);
        }, "name", { value: "GetApps" });
    
        /**
         * Calls GetApps.
         * @function getApps
         * @memberof Community
         * @instance
         * @param {ICCommunity_GetApps_Request} request CCommunity_GetApps_Request message or plain object
         * @returns {Promise<CCommunity_GetApps_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Community#getAppRichPresenceLocalization}.
         * @memberof Community
         * @typedef GetAppRichPresenceLocalizationCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCommunity_GetAppRichPresenceLocalization_Response} [response] CCommunity_GetAppRichPresenceLocalization_Response
         */
    
        /**
         * Calls GetAppRichPresenceLocalization.
         * @function getAppRichPresenceLocalization
         * @memberof Community
         * @instance
         * @param {ICCommunity_GetAppRichPresenceLocalization_Request} request CCommunity_GetAppRichPresenceLocalization_Request message or plain object
         * @param {Community.GetAppRichPresenceLocalizationCallback} callback Node-style callback called with the error, if any, and CCommunity_GetAppRichPresenceLocalization_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Community.prototype.getAppRichPresenceLocalization = function getAppRichPresenceLocalization(request, callback) {
            return this.rpcCall(getAppRichPresenceLocalization, $root.CCommunity_GetAppRichPresenceLocalization_Request, $root.CCommunity_GetAppRichPresenceLocalization_Response, request, callback);
        }, "name", { value: "GetAppRichPresenceLocalization" });
    
        /**
         * Calls GetAppRichPresenceLocalization.
         * @function getAppRichPresenceLocalization
         * @memberof Community
         * @instance
         * @param {ICCommunity_GetAppRichPresenceLocalization_Request} request CCommunity_GetAppRichPresenceLocalization_Request message or plain object
         * @returns {Promise<CCommunity_GetAppRichPresenceLocalization_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Community#getUserPartnerEventNews}.
         * @memberof Community
         * @typedef GetUserPartnerEventNewsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCommunity_GetUserPartnerEventNews_Response} [response] CCommunity_GetUserPartnerEventNews_Response
         */
    
        /**
         * Calls GetUserPartnerEventNews.
         * @function getUserPartnerEventNews
         * @memberof Community
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {Community.GetUserPartnerEventNewsCallback} callback Node-style callback called with the error, if any, and CCommunity_GetUserPartnerEventNews_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Community.prototype.getUserPartnerEventNews = function getUserPartnerEventNews(request, callback) {
            return this.rpcCall(getUserPartnerEventNews, $root.NotImplemented, $root.CCommunity_GetUserPartnerEventNews_Response, request, callback);
        }, "name", { value: "GetUserPartnerEventNews" });
    
        /**
         * Calls GetUserPartnerEventNews.
         * @function getUserPartnerEventNews
         * @memberof Community
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CCommunity_GetUserPartnerEventNews_Response>} Promise
         * @variation 2
         */
    
        return Community;
    })();
    
    $root.WebRTCClient = (function() {
    
        /**
         * Constructs a new WebRTCClient service.
         * @exports WebRTCClient
         * @classdesc Represents a WebRTCClient
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function WebRTCClient(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (WebRTCClient.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = WebRTCClient;
    
        /**
         * Creates new WebRTCClient service using the specified rpc implementation.
         * @function create
         * @memberof WebRTCClient
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {WebRTCClient} RPC service. Useful where requests and/or responses are streamed.
         */
        WebRTCClient.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link WebRTCClient#initiateWebRTCConnection}.
         * @memberof WebRTCClient
         * @typedef InitiateWebRTCConnectionCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CWebRTCClient_InitiateWebRTCConnection_Response} [response] CWebRTCClient_InitiateWebRTCConnection_Response
         */
    
        /**
         * Calls InitiateWebRTCConnection.
         * @function initiateWebRTCConnection
         * @memberof WebRTCClient
         * @instance
         * @param {ICWebRTCClient_InitiateWebRTCConnection_Request} request CWebRTCClient_InitiateWebRTCConnection_Request message or plain object
         * @param {WebRTCClient.InitiateWebRTCConnectionCallback} callback Node-style callback called with the error, if any, and CWebRTCClient_InitiateWebRTCConnection_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(WebRTCClient.prototype.initiateWebRTCConnection = function initiateWebRTCConnection(request, callback) {
            return this.rpcCall(initiateWebRTCConnection, $root.CWebRTCClient_InitiateWebRTCConnection_Request, $root.CWebRTCClient_InitiateWebRTCConnection_Response, request, callback);
        }, "name", { value: "InitiateWebRTCConnection" });
    
        /**
         * Calls InitiateWebRTCConnection.
         * @function initiateWebRTCConnection
         * @memberof WebRTCClient
         * @instance
         * @param {ICWebRTCClient_InitiateWebRTCConnection_Request} request CWebRTCClient_InitiateWebRTCConnection_Request message or plain object
         * @returns {Promise<CWebRTCClient_InitiateWebRTCConnection_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link WebRTCClient#acknowledgeUpdatedRemoteDescription}.
         * @memberof WebRTCClient
         * @typedef AcknowledgeUpdatedRemoteDescriptionCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response} [response] CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         */
    
        /**
         * Calls AcknowledgeUpdatedRemoteDescription.
         * @function acknowledgeUpdatedRemoteDescription
         * @memberof WebRTCClient
         * @instance
         * @param {ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request} request CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request message or plain object
         * @param {WebRTCClient.AcknowledgeUpdatedRemoteDescriptionCallback} callback Node-style callback called with the error, if any, and CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(WebRTCClient.prototype.acknowledgeUpdatedRemoteDescription = function acknowledgeUpdatedRemoteDescription(request, callback) {
            return this.rpcCall(acknowledgeUpdatedRemoteDescription, $root.CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request, $root.CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response, request, callback);
        }, "name", { value: "AcknowledgeUpdatedRemoteDescription" });
    
        /**
         * Calls AcknowledgeUpdatedRemoteDescription.
         * @function acknowledgeUpdatedRemoteDescription
         * @memberof WebRTCClient
         * @instance
         * @param {ICWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request} request CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request message or plain object
         * @returns {Promise<CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response>} Promise
         * @variation 2
         */
    
        return WebRTCClient;
    })();
    
    $root.WebRTCClientNotifications = (function() {
    
        /**
         * Constructs a new WebRTCClientNotifications service.
         * @exports WebRTCClientNotifications
         * @classdesc Represents a WebRTCClientNotifications
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function WebRTCClientNotifications(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (WebRTCClientNotifications.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = WebRTCClientNotifications;
    
        /**
         * Creates new WebRTCClientNotifications service using the specified rpc implementation.
         * @function create
         * @memberof WebRTCClientNotifications
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {WebRTCClientNotifications} RPC service. Useful where requests and/or responses are streamed.
         */
        WebRTCClientNotifications.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link WebRTCClientNotifications#notifyWebRTCSessionConnected}.
         * @memberof WebRTCClientNotifications
         * @typedef NotifyWebRTCSessionConnectedCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyWebRTCSessionConnected.
         * @function notifyWebRTCSessionConnected
         * @memberof WebRTCClientNotifications
         * @instance
         * @param {ICWebRTC_WebRTCSessionConnected_Notification} request CWebRTC_WebRTCSessionConnected_Notification message or plain object
         * @param {WebRTCClientNotifications.NotifyWebRTCSessionConnectedCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(WebRTCClientNotifications.prototype.notifyWebRTCSessionConnected = function notifyWebRTCSessionConnected(request, callback) {
            return this.rpcCall(notifyWebRTCSessionConnected, $root.CWebRTC_WebRTCSessionConnected_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyWebRTCSessionConnected" });
    
        /**
         * Calls NotifyWebRTCSessionConnected.
         * @function notifyWebRTCSessionConnected
         * @memberof WebRTCClientNotifications
         * @instance
         * @param {ICWebRTC_WebRTCSessionConnected_Notification} request CWebRTC_WebRTCSessionConnected_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link WebRTCClientNotifications#notifyWebRTCUpdateRemoteDescription}.
         * @memberof WebRTCClientNotifications
         * @typedef NotifyWebRTCUpdateRemoteDescriptionCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyWebRTCUpdateRemoteDescription.
         * @function notifyWebRTCUpdateRemoteDescription
         * @memberof WebRTCClientNotifications
         * @instance
         * @param {ICWebRTC_WebRTCUpdateRemoteDescription_Notification} request CWebRTC_WebRTCUpdateRemoteDescription_Notification message or plain object
         * @param {WebRTCClientNotifications.NotifyWebRTCUpdateRemoteDescriptionCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(WebRTCClientNotifications.prototype.notifyWebRTCUpdateRemoteDescription = function notifyWebRTCUpdateRemoteDescription(request, callback) {
            return this.rpcCall(notifyWebRTCUpdateRemoteDescription, $root.CWebRTC_WebRTCUpdateRemoteDescription_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyWebRTCUpdateRemoteDescription" });
    
        /**
         * Calls NotifyWebRTCUpdateRemoteDescription.
         * @function notifyWebRTCUpdateRemoteDescription
         * @memberof WebRTCClientNotifications
         * @instance
         * @param {ICWebRTC_WebRTCUpdateRemoteDescription_Notification} request CWebRTC_WebRTCUpdateRemoteDescription_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        return WebRTCClientNotifications;
    })();
    
    $root.VoiceChat = (function() {
    
        /**
         * Constructs a new VoiceChat service.
         * @exports VoiceChat
         * @classdesc Represents a VoiceChat
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function VoiceChat(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (VoiceChat.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = VoiceChat;
    
        /**
         * Creates new VoiceChat service using the specified rpc implementation.
         * @function create
         * @memberof VoiceChat
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {VoiceChat} RPC service. Useful where requests and/or responses are streamed.
         */
        VoiceChat.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link VoiceChat#updateVoiceChatWebRTCData}.
         * @memberof VoiceChat
         * @typedef UpdateVoiceChatWebRTCDataCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CVoiceChat_UpdateVoiceChatWebRTCData_Response} [response] CVoiceChat_UpdateVoiceChatWebRTCData_Response
         */
    
        /**
         * Calls UpdateVoiceChatWebRTCData.
         * @function updateVoiceChatWebRTCData
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_UpdateVoiceChatWebRTCData_Request} request CVoiceChat_UpdateVoiceChatWebRTCData_Request message or plain object
         * @param {VoiceChat.UpdateVoiceChatWebRTCDataCallback} callback Node-style callback called with the error, if any, and CVoiceChat_UpdateVoiceChatWebRTCData_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChat.prototype.updateVoiceChatWebRTCData = function updateVoiceChatWebRTCData(request, callback) {
            return this.rpcCall(updateVoiceChatWebRTCData, $root.CVoiceChat_UpdateVoiceChatWebRTCData_Request, $root.CVoiceChat_UpdateVoiceChatWebRTCData_Response, request, callback);
        }, "name", { value: "UpdateVoiceChatWebRTCData" });
    
        /**
         * Calls UpdateVoiceChatWebRTCData.
         * @function updateVoiceChatWebRTCData
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_UpdateVoiceChatWebRTCData_Request} request CVoiceChat_UpdateVoiceChatWebRTCData_Request message or plain object
         * @returns {Promise<CVoiceChat_UpdateVoiceChatWebRTCData_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link VoiceChat#notifyUserVoiceStatus}.
         * @memberof VoiceChat
         * @typedef NotifyUserVoiceStatusCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyUserVoiceStatus.
         * @function notifyUserVoiceStatus
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_UserVoiceStatus_Notification} request CVoiceChat_UserVoiceStatus_Notification message or plain object
         * @param {VoiceChat.NotifyUserVoiceStatusCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChat.prototype.notifyUserVoiceStatus = function notifyUserVoiceStatus(request, callback) {
            return this.rpcCall(notifyUserVoiceStatus, $root.CVoiceChat_UserVoiceStatus_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyUserVoiceStatus" });
    
        /**
         * Calls NotifyUserVoiceStatus.
         * @function notifyUserVoiceStatus
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_UserVoiceStatus_Notification} request CVoiceChat_UserVoiceStatus_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link VoiceChat#uploadClientVoiceChatLogs}.
         * @memberof VoiceChat
         * @typedef UploadClientVoiceChatLogsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CVoiceChat_UploadClientVoiceChatLogs_Response} [response] CVoiceChat_UploadClientVoiceChatLogs_Response
         */
    
        /**
         * Calls UploadClientVoiceChatLogs.
         * @function uploadClientVoiceChatLogs
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_UploadClientVoiceChatLogs_Request} request CVoiceChat_UploadClientVoiceChatLogs_Request message or plain object
         * @param {VoiceChat.UploadClientVoiceChatLogsCallback} callback Node-style callback called with the error, if any, and CVoiceChat_UploadClientVoiceChatLogs_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChat.prototype.uploadClientVoiceChatLogs = function uploadClientVoiceChatLogs(request, callback) {
            return this.rpcCall(uploadClientVoiceChatLogs, $root.CVoiceChat_UploadClientVoiceChatLogs_Request, $root.CVoiceChat_UploadClientVoiceChatLogs_Response, request, callback);
        }, "name", { value: "UploadClientVoiceChatLogs" });
    
        /**
         * Calls UploadClientVoiceChatLogs.
         * @function uploadClientVoiceChatLogs
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_UploadClientVoiceChatLogs_Request} request CVoiceChat_UploadClientVoiceChatLogs_Request message or plain object
         * @returns {Promise<CVoiceChat_UploadClientVoiceChatLogs_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link VoiceChat#leaveVoiceChat}.
         * @memberof VoiceChat
         * @typedef LeaveVoiceChatCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CVoiceChat_LeaveVoiceChat_Response} [response] CVoiceChat_LeaveVoiceChat_Response
         */
    
        /**
         * Calls LeaveVoiceChat.
         * @function leaveVoiceChat
         * @memberof VoiceChat
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {VoiceChat.LeaveVoiceChatCallback} callback Node-style callback called with the error, if any, and CVoiceChat_LeaveVoiceChat_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChat.prototype.leaveVoiceChat = function leaveVoiceChat(request, callback) {
            return this.rpcCall(leaveVoiceChat, $root.NotImplemented, $root.CVoiceChat_LeaveVoiceChat_Response, request, callback);
        }, "name", { value: "LeaveVoiceChat" });
    
        /**
         * Calls LeaveVoiceChat.
         * @function leaveVoiceChat
         * @memberof VoiceChat
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CVoiceChat_LeaveVoiceChat_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link VoiceChat#requestOneOnOneChat}.
         * @memberof VoiceChat
         * @typedef RequestOneOnOneChatCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CVoiceChat_RequestOneOnOneChat_Response} [response] CVoiceChat_RequestOneOnOneChat_Response
         */
    
        /**
         * Calls RequestOneOnOneChat.
         * @function requestOneOnOneChat
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_RequestOneOnOneChat_Request} request CVoiceChat_RequestOneOnOneChat_Request message or plain object
         * @param {VoiceChat.RequestOneOnOneChatCallback} callback Node-style callback called with the error, if any, and CVoiceChat_RequestOneOnOneChat_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChat.prototype.requestOneOnOneChat = function requestOneOnOneChat(request, callback) {
            return this.rpcCall(requestOneOnOneChat, $root.CVoiceChat_RequestOneOnOneChat_Request, $root.CVoiceChat_RequestOneOnOneChat_Response, request, callback);
        }, "name", { value: "RequestOneOnOneChat" });
    
        /**
         * Calls RequestOneOnOneChat.
         * @function requestOneOnOneChat
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_RequestOneOnOneChat_Request} request CVoiceChat_RequestOneOnOneChat_Request message or plain object
         * @returns {Promise<CVoiceChat_RequestOneOnOneChat_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link VoiceChat#answerOneOnOneChat}.
         * @memberof VoiceChat
         * @typedef AnswerOneOnOneChatCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CVoiceChat_AnswerOneOnOneChat_Response} [response] CVoiceChat_AnswerOneOnOneChat_Response
         */
    
        /**
         * Calls AnswerOneOnOneChat.
         * @function answerOneOnOneChat
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_AnswerOneOnOneChat_Request} request CVoiceChat_AnswerOneOnOneChat_Request message or plain object
         * @param {VoiceChat.AnswerOneOnOneChatCallback} callback Node-style callback called with the error, if any, and CVoiceChat_AnswerOneOnOneChat_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChat.prototype.answerOneOnOneChat = function answerOneOnOneChat(request, callback) {
            return this.rpcCall(answerOneOnOneChat, $root.CVoiceChat_AnswerOneOnOneChat_Request, $root.CVoiceChat_AnswerOneOnOneChat_Response, request, callback);
        }, "name", { value: "AnswerOneOnOneChat" });
    
        /**
         * Calls AnswerOneOnOneChat.
         * @function answerOneOnOneChat
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_AnswerOneOnOneChat_Request} request CVoiceChat_AnswerOneOnOneChat_Request message or plain object
         * @returns {Promise<CVoiceChat_AnswerOneOnOneChat_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link VoiceChat#endOneOnOneChat}.
         * @memberof VoiceChat
         * @typedef EndOneOnOneChatCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CVoiceChat_EndOneOnOneChat_Response} [response] CVoiceChat_EndOneOnOneChat_Response
         */
    
        /**
         * Calls EndOneOnOneChat.
         * @function endOneOnOneChat
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_EndOneOnOneChat_Request} request CVoiceChat_EndOneOnOneChat_Request message or plain object
         * @param {VoiceChat.EndOneOnOneChatCallback} callback Node-style callback called with the error, if any, and CVoiceChat_EndOneOnOneChat_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChat.prototype.endOneOnOneChat = function endOneOnOneChat(request, callback) {
            return this.rpcCall(endOneOnOneChat, $root.CVoiceChat_EndOneOnOneChat_Request, $root.CVoiceChat_EndOneOnOneChat_Response, request, callback);
        }, "name", { value: "EndOneOnOneChat" });
    
        /**
         * Calls EndOneOnOneChat.
         * @function endOneOnOneChat
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_EndOneOnOneChat_Request} request CVoiceChat_EndOneOnOneChat_Request message or plain object
         * @returns {Promise<CVoiceChat_EndOneOnOneChat_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link VoiceChat#leaveOneOnOneChat}.
         * @memberof VoiceChat
         * @typedef LeaveOneOnOneChatCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CVoiceChat_LeaveOneOnOneChat_Response} [response] CVoiceChat_LeaveOneOnOneChat_Response
         */
    
        /**
         * Calls LeaveOneOnOneChat.
         * @function leaveOneOnOneChat
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_LeaveOneOnOneChat_Request} request CVoiceChat_LeaveOneOnOneChat_Request message or plain object
         * @param {VoiceChat.LeaveOneOnOneChatCallback} callback Node-style callback called with the error, if any, and CVoiceChat_LeaveOneOnOneChat_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChat.prototype.leaveOneOnOneChat = function leaveOneOnOneChat(request, callback) {
            return this.rpcCall(leaveOneOnOneChat, $root.CVoiceChat_LeaveOneOnOneChat_Request, $root.CVoiceChat_LeaveOneOnOneChat_Response, request, callback);
        }, "name", { value: "LeaveOneOnOneChat" });
    
        /**
         * Calls LeaveOneOnOneChat.
         * @function leaveOneOnOneChat
         * @memberof VoiceChat
         * @instance
         * @param {ICVoiceChat_LeaveOneOnOneChat_Request} request CVoiceChat_LeaveOneOnOneChat_Request message or plain object
         * @returns {Promise<CVoiceChat_LeaveOneOnOneChat_Response>} Promise
         * @variation 2
         */
    
        return VoiceChat;
    })();
    
    $root.VoiceChatClient = (function() {
    
        /**
         * Constructs a new VoiceChatClient service.
         * @exports VoiceChatClient
         * @classdesc Represents a VoiceChatClient
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function VoiceChatClient(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (VoiceChatClient.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = VoiceChatClient;
    
        /**
         * Creates new VoiceChatClient service using the specified rpc implementation.
         * @function create
         * @memberof VoiceChatClient
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {VoiceChatClient} RPC service. Useful where requests and/or responses are streamed.
         */
        VoiceChatClient.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link VoiceChatClient#notifyUserJoinedVoiceChat}.
         * @memberof VoiceChatClient
         * @typedef NotifyUserJoinedVoiceChatCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyUserJoinedVoiceChat.
         * @function notifyUserJoinedVoiceChat
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_UserJoinedVoiceChat_Notification} request CVoiceChat_UserJoinedVoiceChat_Notification message or plain object
         * @param {VoiceChatClient.NotifyUserJoinedVoiceChatCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChatClient.prototype.notifyUserJoinedVoiceChat = function notifyUserJoinedVoiceChat(request, callback) {
            return this.rpcCall(notifyUserJoinedVoiceChat, $root.CVoiceChat_UserJoinedVoiceChat_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyUserJoinedVoiceChat" });
    
        /**
         * Calls NotifyUserJoinedVoiceChat.
         * @function notifyUserJoinedVoiceChat
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_UserJoinedVoiceChat_Notification} request CVoiceChat_UserJoinedVoiceChat_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link VoiceChatClient#notifyUserLeftVoiceChat}.
         * @memberof VoiceChatClient
         * @typedef NotifyUserLeftVoiceChatCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyUserLeftVoiceChat.
         * @function notifyUserLeftVoiceChat
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_UserLeftVoiceChat_Notification} request CVoiceChat_UserLeftVoiceChat_Notification message or plain object
         * @param {VoiceChatClient.NotifyUserLeftVoiceChatCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChatClient.prototype.notifyUserLeftVoiceChat = function notifyUserLeftVoiceChat(request, callback) {
            return this.rpcCall(notifyUserLeftVoiceChat, $root.CVoiceChat_UserLeftVoiceChat_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyUserLeftVoiceChat" });
    
        /**
         * Calls NotifyUserLeftVoiceChat.
         * @function notifyUserLeftVoiceChat
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_UserLeftVoiceChat_Notification} request CVoiceChat_UserLeftVoiceChat_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link VoiceChatClient#notifyVoiceChatEnded}.
         * @memberof VoiceChatClient
         * @typedef NotifyVoiceChatEndedCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyVoiceChatEnded.
         * @function notifyVoiceChatEnded
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_VoiceChatEnded_Notification} request CVoiceChat_VoiceChatEnded_Notification message or plain object
         * @param {VoiceChatClient.NotifyVoiceChatEndedCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChatClient.prototype.notifyVoiceChatEnded = function notifyVoiceChatEnded(request, callback) {
            return this.rpcCall(notifyVoiceChatEnded, $root.CVoiceChat_VoiceChatEnded_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyVoiceChatEnded" });
    
        /**
         * Calls NotifyVoiceChatEnded.
         * @function notifyVoiceChatEnded
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_VoiceChatEnded_Notification} request CVoiceChat_VoiceChatEnded_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link VoiceChatClient#notifyUserVoiceStatus}.
         * @memberof VoiceChatClient
         * @typedef NotifyUserVoiceStatusCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyUserVoiceStatus.
         * @function notifyUserVoiceStatus
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_UserVoiceStatus_Notification} request CVoiceChat_UserVoiceStatus_Notification message or plain object
         * @param {VoiceChatClient.NotifyUserVoiceStatusCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChatClient.prototype.notifyUserVoiceStatus = function notifyUserVoiceStatus(request, callback) {
            return this.rpcCall(notifyUserVoiceStatus, $root.CVoiceChat_UserVoiceStatus_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyUserVoiceStatus" });
    
        /**
         * Calls NotifyUserVoiceStatus.
         * @function notifyUserVoiceStatus
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_UserVoiceStatus_Notification} request CVoiceChat_UserVoiceStatus_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link VoiceChatClient#notifyAllUsersVoiceStatus}.
         * @memberof VoiceChatClient
         * @typedef NotifyAllUsersVoiceStatusCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyAllUsersVoiceStatus.
         * @function notifyAllUsersVoiceStatus
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_AllMembersStatus_Notification} request CVoiceChat_AllMembersStatus_Notification message or plain object
         * @param {VoiceChatClient.NotifyAllUsersVoiceStatusCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChatClient.prototype.notifyAllUsersVoiceStatus = function notifyAllUsersVoiceStatus(request, callback) {
            return this.rpcCall(notifyAllUsersVoiceStatus, $root.CVoiceChat_AllMembersStatus_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyAllUsersVoiceStatus" });
    
        /**
         * Calls NotifyAllUsersVoiceStatus.
         * @function notifyAllUsersVoiceStatus
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_AllMembersStatus_Notification} request CVoiceChat_AllMembersStatus_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link VoiceChatClient#notifyOneOnOneChatRequested}.
         * @memberof VoiceChatClient
         * @typedef NotifyOneOnOneChatRequestedCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyOneOnOneChatRequested.
         * @function notifyOneOnOneChatRequested
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_OneOnOneChatRequested_Notification} request CVoiceChat_OneOnOneChatRequested_Notification message or plain object
         * @param {VoiceChatClient.NotifyOneOnOneChatRequestedCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChatClient.prototype.notifyOneOnOneChatRequested = function notifyOneOnOneChatRequested(request, callback) {
            return this.rpcCall(notifyOneOnOneChatRequested, $root.CVoiceChat_OneOnOneChatRequested_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyOneOnOneChatRequested" });
    
        /**
         * Calls NotifyOneOnOneChatRequested.
         * @function notifyOneOnOneChatRequested
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_OneOnOneChatRequested_Notification} request CVoiceChat_OneOnOneChatRequested_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link VoiceChatClient#notifyOneOnOneChatResponse}.
         * @memberof VoiceChatClient
         * @typedef NotifyOneOnOneChatResponseCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyOneOnOneChatResponse.
         * @function notifyOneOnOneChatResponse
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_OneOnOneChatRequestResponse_Notification} request CVoiceChat_OneOnOneChatRequestResponse_Notification message or plain object
         * @param {VoiceChatClient.NotifyOneOnOneChatResponseCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(VoiceChatClient.prototype.notifyOneOnOneChatResponse = function notifyOneOnOneChatResponse(request, callback) {
            return this.rpcCall(notifyOneOnOneChatResponse, $root.CVoiceChat_OneOnOneChatRequestResponse_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyOneOnOneChatResponse" });
    
        /**
         * Calls NotifyOneOnOneChatResponse.
         * @function notifyOneOnOneChatResponse
         * @memberof VoiceChatClient
         * @instance
         * @param {ICVoiceChat_OneOnOneChatRequestResponse_Notification} request CVoiceChat_OneOnOneChatRequestResponse_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        return VoiceChatClient;
    })();
    
    $root.SteamTV = (function() {
    
        /**
         * Constructs a new SteamTV service.
         * @exports SteamTV
         * @classdesc Represents a SteamTV
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function SteamTV(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (SteamTV.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = SteamTV;
    
        /**
         * Creates new SteamTV service using the specified rpc implementation.
         * @function create
         * @memberof SteamTV
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {SteamTV} RPC service. Useful where requests and/or responses are streamed.
         */
        SteamTV.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link SteamTV#createBroadcastChannel}.
         * @memberof SteamTV
         * @typedef CreateBroadcastChannelCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_CreateBroadcastChannel_Response} [response] CSteamTV_CreateBroadcastChannel_Response
         */
    
        /**
         * Calls CreateBroadcastChannel.
         * @function createBroadcastChannel
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.CreateBroadcastChannelCallback} callback Node-style callback called with the error, if any, and CSteamTV_CreateBroadcastChannel_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.createBroadcastChannel = function createBroadcastChannel(request, callback) {
            return this.rpcCall(createBroadcastChannel, $root.NotImplemented, $root.CSteamTV_CreateBroadcastChannel_Response, request, callback);
        }, "name", { value: "CreateBroadcastChannel" });
    
        /**
         * Calls CreateBroadcastChannel.
         * @function createBroadcastChannel
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_CreateBroadcastChannel_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getBroadcastChannelID}.
         * @memberof SteamTV
         * @typedef GetBroadcastChannelIDCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetBroadcastChannelID_Response} [response] CSteamTV_GetBroadcastChannelID_Response
         */
    
        /**
         * Calls GetBroadcastChannelID.
         * @function getBroadcastChannelID
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetBroadcastChannelIDCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetBroadcastChannelID_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getBroadcastChannelID = function getBroadcastChannelID(request, callback) {
            return this.rpcCall(getBroadcastChannelID, $root.NotImplemented, $root.CSteamTV_GetBroadcastChannelID_Response, request, callback);
        }, "name", { value: "GetBroadcastChannelID" });
    
        /**
         * Calls GetBroadcastChannelID.
         * @function getBroadcastChannelID
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetBroadcastChannelID_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#setBroadcastChannelProfile}.
         * @memberof SteamTV
         * @typedef SetBroadcastChannelProfileCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_SetBroadcastChannelProfile_Response} [response] CSteamTV_SetBroadcastChannelProfile_Response
         */
    
        /**
         * Calls SetBroadcastChannelProfile.
         * @function setBroadcastChannelProfile
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.SetBroadcastChannelProfileCallback} callback Node-style callback called with the error, if any, and CSteamTV_SetBroadcastChannelProfile_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.setBroadcastChannelProfile = function setBroadcastChannelProfile(request, callback) {
            return this.rpcCall(setBroadcastChannelProfile, $root.NotImplemented, $root.CSteamTV_SetBroadcastChannelProfile_Response, request, callback);
        }, "name", { value: "SetBroadcastChannelProfile" });
    
        /**
         * Calls SetBroadcastChannelProfile.
         * @function setBroadcastChannelProfile
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_SetBroadcastChannelProfile_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getBroadcastChannelProfile}.
         * @memberof SteamTV
         * @typedef GetBroadcastChannelProfileCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetBroadcastChannelProfile_Response} [response] CSteamTV_GetBroadcastChannelProfile_Response
         */
    
        /**
         * Calls GetBroadcastChannelProfile.
         * @function getBroadcastChannelProfile
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetBroadcastChannelProfileCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetBroadcastChannelProfile_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getBroadcastChannelProfile = function getBroadcastChannelProfile(request, callback) {
            return this.rpcCall(getBroadcastChannelProfile, $root.NotImplemented, $root.CSteamTV_GetBroadcastChannelProfile_Response, request, callback);
        }, "name", { value: "GetBroadcastChannelProfile" });
    
        /**
         * Calls GetBroadcastChannelProfile.
         * @function getBroadcastChannelProfile
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetBroadcastChannelProfile_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#setBroadcastChannelImage}.
         * @memberof SteamTV
         * @typedef SetBroadcastChannelImageCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_SetBroadcastChannelImage_Response} [response] CSteamTV_SetBroadcastChannelImage_Response
         */
    
        /**
         * Calls SetBroadcastChannelImage.
         * @function setBroadcastChannelImage
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.SetBroadcastChannelImageCallback} callback Node-style callback called with the error, if any, and CSteamTV_SetBroadcastChannelImage_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.setBroadcastChannelImage = function setBroadcastChannelImage(request, callback) {
            return this.rpcCall(setBroadcastChannelImage, $root.NotImplemented, $root.CSteamTV_SetBroadcastChannelImage_Response, request, callback);
        }, "name", { value: "SetBroadcastChannelImage" });
    
        /**
         * Calls SetBroadcastChannelImage.
         * @function setBroadcastChannelImage
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_SetBroadcastChannelImage_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getBroadcastChannelImages}.
         * @memberof SteamTV
         * @typedef GetBroadcastChannelImagesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetBroadcastChannelImages_Response} [response] CSteamTV_GetBroadcastChannelImages_Response
         */
    
        /**
         * Calls GetBroadcastChannelImages.
         * @function getBroadcastChannelImages
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetBroadcastChannelImagesCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetBroadcastChannelImages_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getBroadcastChannelImages = function getBroadcastChannelImages(request, callback) {
            return this.rpcCall(getBroadcastChannelImages, $root.NotImplemented, $root.CSteamTV_GetBroadcastChannelImages_Response, request, callback);
        }, "name", { value: "GetBroadcastChannelImages" });
    
        /**
         * Calls GetBroadcastChannelImages.
         * @function getBroadcastChannelImages
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetBroadcastChannelImages_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#setBroadcastChannelLinkRegions}.
         * @memberof SteamTV
         * @typedef SetBroadcastChannelLinkRegionsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_SetBroadcastChannelLinkRegions_Response} [response] CSteamTV_SetBroadcastChannelLinkRegions_Response
         */
    
        /**
         * Calls SetBroadcastChannelLinkRegions.
         * @function setBroadcastChannelLinkRegions
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.SetBroadcastChannelLinkRegionsCallback} callback Node-style callback called with the error, if any, and CSteamTV_SetBroadcastChannelLinkRegions_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.setBroadcastChannelLinkRegions = function setBroadcastChannelLinkRegions(request, callback) {
            return this.rpcCall(setBroadcastChannelLinkRegions, $root.NotImplemented, $root.CSteamTV_SetBroadcastChannelLinkRegions_Response, request, callback);
        }, "name", { value: "SetBroadcastChannelLinkRegions" });
    
        /**
         * Calls SetBroadcastChannelLinkRegions.
         * @function setBroadcastChannelLinkRegions
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_SetBroadcastChannelLinkRegions_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getBroadcastChannelLinks}.
         * @memberof SteamTV
         * @typedef GetBroadcastChannelLinksCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetBroadcastChannelLinks_Response} [response] CSteamTV_GetBroadcastChannelLinks_Response
         */
    
        /**
         * Calls GetBroadcastChannelLinks.
         * @function getBroadcastChannelLinks
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetBroadcastChannelLinksCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetBroadcastChannelLinks_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getBroadcastChannelLinks = function getBroadcastChannelLinks(request, callback) {
            return this.rpcCall(getBroadcastChannelLinks, $root.NotImplemented, $root.CSteamTV_GetBroadcastChannelLinks_Response, request, callback);
        }, "name", { value: "GetBroadcastChannelLinks" });
    
        /**
         * Calls GetBroadcastChannelLinks.
         * @function getBroadcastChannelLinks
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetBroadcastChannelLinks_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getBroadcastChannelBroadcasters}.
         * @memberof SteamTV
         * @typedef GetBroadcastChannelBroadcastersCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetBroadcastChannelBroadcasters_Response} [response] CSteamTV_GetBroadcastChannelBroadcasters_Response
         */
    
        /**
         * Calls GetBroadcastChannelBroadcasters.
         * @function getBroadcastChannelBroadcasters
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetBroadcastChannelBroadcastersCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetBroadcastChannelBroadcasters_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getBroadcastChannelBroadcasters = function getBroadcastChannelBroadcasters(request, callback) {
            return this.rpcCall(getBroadcastChannelBroadcasters, $root.NotImplemented, $root.CSteamTV_GetBroadcastChannelBroadcasters_Response, request, callback);
        }, "name", { value: "GetBroadcastChannelBroadcasters" });
    
        /**
         * Calls GetBroadcastChannelBroadcasters.
         * @function getBroadcastChannelBroadcasters
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetBroadcastChannelBroadcasters_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getFollowedChannels}.
         * @memberof SteamTV
         * @typedef GetFollowedChannelsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetFollowedChannels_Response} [response] CSteamTV_GetFollowedChannels_Response
         */
    
        /**
         * Calls GetFollowedChannels.
         * @function getFollowedChannels
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetFollowedChannelsCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetFollowedChannels_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getFollowedChannels = function getFollowedChannels(request, callback) {
            return this.rpcCall(getFollowedChannels, $root.NotImplemented, $root.CSteamTV_GetFollowedChannels_Response, request, callback);
        }, "name", { value: "GetFollowedChannels" });
    
        /**
         * Calls GetFollowedChannels.
         * @function getFollowedChannels
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetFollowedChannels_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getSubscribedChannels}.
         * @memberof SteamTV
         * @typedef GetSubscribedChannelsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetSubscribedChannels_Response} [response] CSteamTV_GetSubscribedChannels_Response
         */
    
        /**
         * Calls GetSubscribedChannels.
         * @function getSubscribedChannels
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetSubscribedChannelsCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetSubscribedChannels_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getSubscribedChannels = function getSubscribedChannels(request, callback) {
            return this.rpcCall(getSubscribedChannels, $root.NotImplemented, $root.CSteamTV_GetSubscribedChannels_Response, request, callback);
        }, "name", { value: "GetSubscribedChannels" });
    
        /**
         * Calls GetSubscribedChannels.
         * @function getSubscribedChannels
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetSubscribedChannels_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getBroadcastChannelStatus}.
         * @memberof SteamTV
         * @typedef GetBroadcastChannelStatusCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetBroadcastChannelStatus_Response} [response] CSteamTV_GetBroadcastChannelStatus_Response
         */
    
        /**
         * Calls GetBroadcastChannelStatus.
         * @function getBroadcastChannelStatus
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetBroadcastChannelStatusCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetBroadcastChannelStatus_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getBroadcastChannelStatus = function getBroadcastChannelStatus(request, callback) {
            return this.rpcCall(getBroadcastChannelStatus, $root.NotImplemented, $root.CSteamTV_GetBroadcastChannelStatus_Response, request, callback);
        }, "name", { value: "GetBroadcastChannelStatus" });
    
        /**
         * Calls GetBroadcastChannelStatus.
         * @function getBroadcastChannelStatus
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetBroadcastChannelStatus_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#followBroadcastChannel}.
         * @memberof SteamTV
         * @typedef FollowBroadcastChannelCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_FollowBroadcastChannel_Response} [response] CSteamTV_FollowBroadcastChannel_Response
         */
    
        /**
         * Calls FollowBroadcastChannel.
         * @function followBroadcastChannel
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.FollowBroadcastChannelCallback} callback Node-style callback called with the error, if any, and CSteamTV_FollowBroadcastChannel_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.followBroadcastChannel = function followBroadcastChannel(request, callback) {
            return this.rpcCall(followBroadcastChannel, $root.NotImplemented, $root.CSteamTV_FollowBroadcastChannel_Response, request, callback);
        }, "name", { value: "FollowBroadcastChannel" });
    
        /**
         * Calls FollowBroadcastChannel.
         * @function followBroadcastChannel
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_FollowBroadcastChannel_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#subscribeBroadcastChannel}.
         * @memberof SteamTV
         * @typedef SubscribeBroadcastChannelCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_SubscribeBroadcastChannel_Response} [response] CSteamTV_SubscribeBroadcastChannel_Response
         */
    
        /**
         * Calls SubscribeBroadcastChannel.
         * @function subscribeBroadcastChannel
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.SubscribeBroadcastChannelCallback} callback Node-style callback called with the error, if any, and CSteamTV_SubscribeBroadcastChannel_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.subscribeBroadcastChannel = function subscribeBroadcastChannel(request, callback) {
            return this.rpcCall(subscribeBroadcastChannel, $root.NotImplemented, $root.CSteamTV_SubscribeBroadcastChannel_Response, request, callback);
        }, "name", { value: "SubscribeBroadcastChannel" });
    
        /**
         * Calls SubscribeBroadcastChannel.
         * @function subscribeBroadcastChannel
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_SubscribeBroadcastChannel_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getBroadcastChannelClips}.
         * @memberof SteamTV
         * @typedef GetBroadcastChannelClipsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetBroadcastChannelClips_Response} [response] CSteamTV_GetBroadcastChannelClips_Response
         */
    
        /**
         * Calls GetBroadcastChannelClips.
         * @function getBroadcastChannelClips
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetBroadcastChannelClipsCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetBroadcastChannelClips_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getBroadcastChannelClips = function getBroadcastChannelClips(request, callback) {
            return this.rpcCall(getBroadcastChannelClips, $root.NotImplemented, $root.CSteamTV_GetBroadcastChannelClips_Response, request, callback);
        }, "name", { value: "GetBroadcastChannelClips" });
    
        /**
         * Calls GetBroadcastChannelClips.
         * @function getBroadcastChannelClips
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetBroadcastChannelClips_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#reportBroadcastChannel}.
         * @memberof SteamTV
         * @typedef ReportBroadcastChannelCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_ReportBroadcastChannel_Response} [response] CSteamTV_ReportBroadcastChannel_Response
         */
    
        /**
         * Calls ReportBroadcastChannel.
         * @function reportBroadcastChannel
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.ReportBroadcastChannelCallback} callback Node-style callback called with the error, if any, and CSteamTV_ReportBroadcastChannel_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.reportBroadcastChannel = function reportBroadcastChannel(request, callback) {
            return this.rpcCall(reportBroadcastChannel, $root.NotImplemented, $root.CSteamTV_ReportBroadcastChannel_Response, request, callback);
        }, "name", { value: "ReportBroadcastChannel" });
    
        /**
         * Calls ReportBroadcastChannel.
         * @function reportBroadcastChannel
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_ReportBroadcastChannel_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getBroadcastChannelInteraction}.
         * @memberof SteamTV
         * @typedef GetBroadcastChannelInteractionCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetBroadcastChannelInteraction_Response} [response] CSteamTV_GetBroadcastChannelInteraction_Response
         */
    
        /**
         * Calls GetBroadcastChannelInteraction.
         * @function getBroadcastChannelInteraction
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetBroadcastChannelInteractionCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetBroadcastChannelInteraction_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getBroadcastChannelInteraction = function getBroadcastChannelInteraction(request, callback) {
            return this.rpcCall(getBroadcastChannelInteraction, $root.NotImplemented, $root.CSteamTV_GetBroadcastChannelInteraction_Response, request, callback);
        }, "name", { value: "GetBroadcastChannelInteraction" });
    
        /**
         * Calls GetBroadcastChannelInteraction.
         * @function getBroadcastChannelInteraction
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetBroadcastChannelInteraction_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getGames}.
         * @memberof SteamTV
         * @typedef GetGamesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetGames_Response} [response] CSteamTV_GetGames_Response
         */
    
        /**
         * Calls GetGames.
         * @function getGames
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetGamesCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetGames_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getGames = function getGames(request, callback) {
            return this.rpcCall(getGames, $root.NotImplemented, $root.CSteamTV_GetGames_Response, request, callback);
        }, "name", { value: "GetGames" });
    
        /**
         * Calls GetGames.
         * @function getGames
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetGames_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getChannels}.
         * @memberof SteamTV
         * @typedef GetChannelsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetChannels_Response} [response] CSteamTV_GetChannels_Response
         */
    
        /**
         * Calls GetChannels.
         * @function getChannels
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetChannelsCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetChannels_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getChannels = function getChannels(request, callback) {
            return this.rpcCall(getChannels, $root.NotImplemented, $root.CSteamTV_GetChannels_Response, request, callback);
        }, "name", { value: "GetChannels" });
    
        /**
         * Calls GetChannels.
         * @function getChannels
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetChannels_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#addChatBan}.
         * @memberof SteamTV
         * @typedef AddChatBanCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_AddChatBan_Response} [response] CSteamTV_AddChatBan_Response
         */
    
        /**
         * Calls AddChatBan.
         * @function addChatBan
         * @memberof SteamTV
         * @instance
         * @param {ICSteamTV_AddChatBan_Request} request CSteamTV_AddChatBan_Request message or plain object
         * @param {SteamTV.AddChatBanCallback} callback Node-style callback called with the error, if any, and CSteamTV_AddChatBan_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.addChatBan = function addChatBan(request, callback) {
            return this.rpcCall(addChatBan, $root.CSteamTV_AddChatBan_Request, $root.CSteamTV_AddChatBan_Response, request, callback);
        }, "name", { value: "AddChatBan" });
    
        /**
         * Calls AddChatBan.
         * @function addChatBan
         * @memberof SteamTV
         * @instance
         * @param {ICSteamTV_AddChatBan_Request} request CSteamTV_AddChatBan_Request message or plain object
         * @returns {Promise<CSteamTV_AddChatBan_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getChatBans}.
         * @memberof SteamTV
         * @typedef GetChatBansCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetChatBans_Response} [response] CSteamTV_GetChatBans_Response
         */
    
        /**
         * Calls GetChatBans.
         * @function getChatBans
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetChatBansCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetChatBans_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getChatBans = function getChatBans(request, callback) {
            return this.rpcCall(getChatBans, $root.NotImplemented, $root.CSteamTV_GetChatBans_Response, request, callback);
        }, "name", { value: "GetChatBans" });
    
        /**
         * Calls GetChatBans.
         * @function getChatBans
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetChatBans_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#addChatModerator}.
         * @memberof SteamTV
         * @typedef AddChatModeratorCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_AddChatModerator_Response} [response] CSteamTV_AddChatModerator_Response
         */
    
        /**
         * Calls AddChatModerator.
         * @function addChatModerator
         * @memberof SteamTV
         * @instance
         * @param {ICSteamTV_AddChatModerator_Request} request CSteamTV_AddChatModerator_Request message or plain object
         * @param {SteamTV.AddChatModeratorCallback} callback Node-style callback called with the error, if any, and CSteamTV_AddChatModerator_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.addChatModerator = function addChatModerator(request, callback) {
            return this.rpcCall(addChatModerator, $root.CSteamTV_AddChatModerator_Request, $root.CSteamTV_AddChatModerator_Response, request, callback);
        }, "name", { value: "AddChatModerator" });
    
        /**
         * Calls AddChatModerator.
         * @function addChatModerator
         * @memberof SteamTV
         * @instance
         * @param {ICSteamTV_AddChatModerator_Request} request CSteamTV_AddChatModerator_Request message or plain object
         * @returns {Promise<CSteamTV_AddChatModerator_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getChatModerators}.
         * @memberof SteamTV
         * @typedef GetChatModeratorsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetChatModerators_Response} [response] CSteamTV_GetChatModerators_Response
         */
    
        /**
         * Calls GetChatModerators.
         * @function getChatModerators
         * @memberof SteamTV
         * @instance
         * @param {ICSteamTV_GetChatModerators_Request} request CSteamTV_GetChatModerators_Request message or plain object
         * @param {SteamTV.GetChatModeratorsCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetChatModerators_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getChatModerators = function getChatModerators(request, callback) {
            return this.rpcCall(getChatModerators, $root.CSteamTV_GetChatModerators_Request, $root.CSteamTV_GetChatModerators_Response, request, callback);
        }, "name", { value: "GetChatModerators" });
    
        /**
         * Calls GetChatModerators.
         * @function getChatModerators
         * @memberof SteamTV
         * @instance
         * @param {ICSteamTV_GetChatModerators_Request} request CSteamTV_GetChatModerators_Request message or plain object
         * @returns {Promise<CSteamTV_GetChatModerators_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#addWordBan}.
         * @memberof SteamTV
         * @typedef AddWordBanCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_AddWordBan_Response} [response] CSteamTV_AddWordBan_Response
         */
    
        /**
         * Calls AddWordBan.
         * @function addWordBan
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.AddWordBanCallback} callback Node-style callback called with the error, if any, and CSteamTV_AddWordBan_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.addWordBan = function addWordBan(request, callback) {
            return this.rpcCall(addWordBan, $root.NotImplemented, $root.CSteamTV_AddWordBan_Response, request, callback);
        }, "name", { value: "AddWordBan" });
    
        /**
         * Calls AddWordBan.
         * @function addWordBan
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_AddWordBan_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getWordBans}.
         * @memberof SteamTV
         * @typedef GetWordBansCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetWordBans_Response} [response] CSteamTV_GetWordBans_Response
         */
    
        /**
         * Calls GetWordBans.
         * @function getWordBans
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetWordBansCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetWordBans_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getWordBans = function getWordBans(request, callback) {
            return this.rpcCall(getWordBans, $root.NotImplemented, $root.CSteamTV_GetWordBans_Response, request, callback);
        }, "name", { value: "GetWordBans" });
    
        /**
         * Calls GetWordBans.
         * @function getWordBans
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetWordBans_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#joinChat}.
         * @memberof SteamTV
         * @typedef JoinChatCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_JoinChat_Response} [response] CSteamTV_JoinChat_Response
         */
    
        /**
         * Calls JoinChat.
         * @function joinChat
         * @memberof SteamTV
         * @instance
         * @param {ICSteamTV_JoinChat_Request} request CSteamTV_JoinChat_Request message or plain object
         * @param {SteamTV.JoinChatCallback} callback Node-style callback called with the error, if any, and CSteamTV_JoinChat_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.joinChat = function joinChat(request, callback) {
            return this.rpcCall(joinChat, $root.CSteamTV_JoinChat_Request, $root.CSteamTV_JoinChat_Response, request, callback);
        }, "name", { value: "JoinChat" });
    
        /**
         * Calls JoinChat.
         * @function joinChat
         * @memberof SteamTV
         * @instance
         * @param {ICSteamTV_JoinChat_Request} request CSteamTV_JoinChat_Request message or plain object
         * @returns {Promise<CSteamTV_JoinChat_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#search}.
         * @memberof SteamTV
         * @typedef SearchCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_Search_Response} [response] CSteamTV_Search_Response
         */
    
        /**
         * Calls Search.
         * @function search
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.SearchCallback} callback Node-style callback called with the error, if any, and CSteamTV_Search_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.search = function search(request, callback) {
            return this.rpcCall(search, $root.NotImplemented, $root.CSteamTV_Search_Response, request, callback);
        }, "name", { value: "Search" });
    
        /**
         * Calls Search.
         * @function search
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_Search_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getSteamTVUserSettings}.
         * @memberof SteamTV
         * @typedef GetSteamTVUserSettingsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetSteamTVUserSettings_Response} [response] CSteamTV_GetSteamTVUserSettings_Response
         */
    
        /**
         * Calls GetSteamTVUserSettings.
         * @function getSteamTVUserSettings
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetSteamTVUserSettingsCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetSteamTVUserSettings_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getSteamTVUserSettings = function getSteamTVUserSettings(request, callback) {
            return this.rpcCall(getSteamTVUserSettings, $root.NotImplemented, $root.CSteamTV_GetSteamTVUserSettings_Response, request, callback);
        }, "name", { value: "GetSteamTVUserSettings" });
    
        /**
         * Calls GetSteamTVUserSettings.
         * @function getSteamTVUserSettings
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetSteamTVUserSettings_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#setSteamTVUserSettings}.
         * @memberof SteamTV
         * @typedef SetSteamTVUserSettingsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_SetSteamTVUserSettings_Response} [response] CSteamTV_SetSteamTVUserSettings_Response
         */
    
        /**
         * Calls SetSteamTVUserSettings.
         * @function setSteamTVUserSettings
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.SetSteamTVUserSettingsCallback} callback Node-style callback called with the error, if any, and CSteamTV_SetSteamTVUserSettings_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.setSteamTVUserSettings = function setSteamTVUserSettings(request, callback) {
            return this.rpcCall(setSteamTVUserSettings, $root.NotImplemented, $root.CSteamTV_SetSteamTVUserSettings_Response, request, callback);
        }, "name", { value: "SetSteamTVUserSettings" });
    
        /**
         * Calls SetSteamTVUserSettings.
         * @function setSteamTVUserSettings
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_SetSteamTVUserSettings_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getMyBroadcastChannels}.
         * @memberof SteamTV
         * @typedef GetMyBroadcastChannelsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetMyBroadcastChannels_Response} [response] CSteamTV_GetMyBroadcastChannels_Response
         */
    
        /**
         * Calls GetMyBroadcastChannels.
         * @function getMyBroadcastChannels
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetMyBroadcastChannelsCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetMyBroadcastChannels_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getMyBroadcastChannels = function getMyBroadcastChannels(request, callback) {
            return this.rpcCall(getMyBroadcastChannels, $root.NotImplemented, $root.CSteamTV_GetMyBroadcastChannels_Response, request, callback);
        }, "name", { value: "GetMyBroadcastChannels" });
    
        /**
         * Calls GetMyBroadcastChannels.
         * @function getMyBroadcastChannels
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetMyBroadcastChannels_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link SteamTV#getHomePageContents}.
         * @memberof SteamTV
         * @typedef GetHomePageContentsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CSteamTV_GetHomePageContents_Response} [response] CSteamTV_GetHomePageContents_Response
         */
    
        /**
         * Calls GetHomePageContents.
         * @function getHomePageContents
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {SteamTV.GetHomePageContentsCallback} callback Node-style callback called with the error, if any, and CSteamTV_GetHomePageContents_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(SteamTV.prototype.getHomePageContents = function getHomePageContents(request, callback) {
            return this.rpcCall(getHomePageContents, $root.NotImplemented, $root.CSteamTV_GetHomePageContents_Response, request, callback);
        }, "name", { value: "GetHomePageContents" });
    
        /**
         * Calls GetHomePageContents.
         * @function getHomePageContents
         * @memberof SteamTV
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<CSteamTV_GetHomePageContents_Response>} Promise
         * @variation 2
         */
    
        return SteamTV;
    })();
    
    $root.FriendsList = (function() {
    
        /**
         * Constructs a new FriendsList service.
         * @exports FriendsList
         * @classdesc Represents a FriendsList
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function FriendsList(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (FriendsList.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = FriendsList;
    
        /**
         * Creates new FriendsList service using the specified rpc implementation.
         * @function create
         * @memberof FriendsList
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {FriendsList} RPC service. Useful where requests and/or responses are streamed.
         */
        FriendsList.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link FriendsList#getCategories}.
         * @memberof FriendsList
         * @typedef GetCategoriesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CFriendsList_GetCategories_Response} [response] CFriendsList_GetCategories_Response
         */
    
        /**
         * Calls GetCategories.
         * @function getCategories
         * @memberof FriendsList
         * @instance
         * @param {ICFriendsList_GetCategories_Request} request CFriendsList_GetCategories_Request message or plain object
         * @param {FriendsList.GetCategoriesCallback} callback Node-style callback called with the error, if any, and CFriendsList_GetCategories_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(FriendsList.prototype.getCategories = function getCategories(request, callback) {
            return this.rpcCall(getCategories, $root.CFriendsList_GetCategories_Request, $root.CFriendsList_GetCategories_Response, request, callback);
        }, "name", { value: "GetCategories" });
    
        /**
         * Calls GetCategories.
         * @function getCategories
         * @memberof FriendsList
         * @instance
         * @param {ICFriendsList_GetCategories_Request} request CFriendsList_GetCategories_Request message or plain object
         * @returns {Promise<CFriendsList_GetCategories_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link FriendsList#getFriendsList}.
         * @memberof FriendsList
         * @typedef GetFriendsListCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CFriendsList_GetFriendsList_Response} [response] CFriendsList_GetFriendsList_Response
         */
    
        /**
         * Calls GetFriendsList.
         * @function getFriendsList
         * @memberof FriendsList
         * @instance
         * @param {ICFriendsList_GetFriendsList_Request} request CFriendsList_GetFriendsList_Request message or plain object
         * @param {FriendsList.GetFriendsListCallback} callback Node-style callback called with the error, if any, and CFriendsList_GetFriendsList_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(FriendsList.prototype.getFriendsList = function getFriendsList(request, callback) {
            return this.rpcCall(getFriendsList, $root.CFriendsList_GetFriendsList_Request, $root.CFriendsList_GetFriendsList_Response, request, callback);
        }, "name", { value: "GetFriendsList" });
    
        /**
         * Calls GetFriendsList.
         * @function getFriendsList
         * @memberof FriendsList
         * @instance
         * @param {ICFriendsList_GetFriendsList_Request} request CFriendsList_GetFriendsList_Request message or plain object
         * @returns {Promise<CFriendsList_GetFriendsList_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link FriendsList#getFavorites}.
         * @memberof FriendsList
         * @typedef GetFavoritesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CFriendsList_GetFavorites_Response} [response] CFriendsList_GetFavorites_Response
         */
    
        /**
         * Calls GetFavorites.
         * @function getFavorites
         * @memberof FriendsList
         * @instance
         * @param {ICFriendsList_GetFavorites_Request} request CFriendsList_GetFavorites_Request message or plain object
         * @param {FriendsList.GetFavoritesCallback} callback Node-style callback called with the error, if any, and CFriendsList_GetFavorites_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(FriendsList.prototype.getFavorites = function getFavorites(request, callback) {
            return this.rpcCall(getFavorites, $root.CFriendsList_GetFavorites_Request, $root.CFriendsList_GetFavorites_Response, request, callback);
        }, "name", { value: "GetFavorites" });
    
        /**
         * Calls GetFavorites.
         * @function getFavorites
         * @memberof FriendsList
         * @instance
         * @param {ICFriendsList_GetFavorites_Request} request CFriendsList_GetFavorites_Request message or plain object
         * @returns {Promise<CFriendsList_GetFavorites_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link FriendsList#setFavorites}.
         * @memberof FriendsList
         * @typedef SetFavoritesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CFriendsList_SetFavorites_Response} [response] CFriendsList_SetFavorites_Response
         */
    
        /**
         * Calls SetFavorites.
         * @function setFavorites
         * @memberof FriendsList
         * @instance
         * @param {ICFriendsList_SetFavorites_Request} request CFriendsList_SetFavorites_Request message or plain object
         * @param {FriendsList.SetFavoritesCallback} callback Node-style callback called with the error, if any, and CFriendsList_SetFavorites_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(FriendsList.prototype.setFavorites = function setFavorites(request, callback) {
            return this.rpcCall(setFavorites, $root.CFriendsList_SetFavorites_Request, $root.CFriendsList_SetFavorites_Response, request, callback);
        }, "name", { value: "SetFavorites" });
    
        /**
         * Calls SetFavorites.
         * @function setFavorites
         * @memberof FriendsList
         * @instance
         * @param {ICFriendsList_SetFavorites_Request} request CFriendsList_SetFavorites_Request message or plain object
         * @returns {Promise<CFriendsList_SetFavorites_Response>} Promise
         * @variation 2
         */
    
        return FriendsList;
    })();
    
    $root.FriendsListClient = (function() {
    
        /**
         * Constructs a new FriendsListClient service.
         * @exports FriendsListClient
         * @classdesc Represents a FriendsListClient
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function FriendsListClient(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (FriendsListClient.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = FriendsListClient;
    
        /**
         * Creates new FriendsListClient service using the specified rpc implementation.
         * @function create
         * @memberof FriendsListClient
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {FriendsListClient} RPC service. Useful where requests and/or responses are streamed.
         */
        FriendsListClient.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link FriendsListClient#favoritesChanged}.
         * @memberof FriendsListClient
         * @typedef FavoritesChangedCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls FavoritesChanged.
         * @function favoritesChanged
         * @memberof FriendsListClient
         * @instance
         * @param {ICFriendsList_FavoritesChanged_Notification} request CFriendsList_FavoritesChanged_Notification message or plain object
         * @param {FriendsListClient.FavoritesChangedCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(FriendsListClient.prototype.favoritesChanged = function favoritesChanged(request, callback) {
            return this.rpcCall(favoritesChanged, $root.CFriendsList_FavoritesChanged_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "FavoritesChanged" });
    
        /**
         * Calls FavoritesChanged.
         * @function favoritesChanged
         * @memberof FriendsListClient
         * @instance
         * @param {ICFriendsList_FavoritesChanged_Notification} request CFriendsList_FavoritesChanged_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        return FriendsListClient;
    })();
    
    $root.Clan = (function() {
    
        /**
         * Constructs a new Clan service.
         * @exports Clan
         * @classdesc Represents a Clan
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function Clan(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (Clan.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Clan;
    
        /**
         * Creates new Clan service using the specified rpc implementation.
         * @function create
         * @memberof Clan
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {Clan} RPC service. Useful where requests and/or responses are streamed.
         */
        Clan.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link Clan#respondToClanInvite}.
         * @memberof Clan
         * @typedef RespondToClanInviteCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CClan_RespondToClanInvite_Response} [response] CClan_RespondToClanInvite_Response
         */
    
        /**
         * Calls RespondToClanInvite.
         * @function respondToClanInvite
         * @memberof Clan
         * @instance
         * @param {ICClan_RespondToClanInvite_Request} request CClan_RespondToClanInvite_Request message or plain object
         * @param {Clan.RespondToClanInviteCallback} callback Node-style callback called with the error, if any, and CClan_RespondToClanInvite_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Clan.prototype.respondToClanInvite = function respondToClanInvite(request, callback) {
            return this.rpcCall(respondToClanInvite, $root.CClan_RespondToClanInvite_Request, $root.CClan_RespondToClanInvite_Response, request, callback);
        }, "name", { value: "RespondToClanInvite" });
    
        /**
         * Calls RespondToClanInvite.
         * @function respondToClanInvite
         * @memberof Clan
         * @instance
         * @param {ICClan_RespondToClanInvite_Request} request CClan_RespondToClanInvite_Request message or plain object
         * @returns {Promise<CClan_RespondToClanInvite_Response>} Promise
         * @variation 2
         */
    
        return Clan;
    })();
    
    $root.ExperimentService = (function() {
    
        /**
         * Constructs a new ExperimentService service.
         * @exports ExperimentService
         * @classdesc Represents an ExperimentService
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function ExperimentService(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (ExperimentService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ExperimentService;
    
        /**
         * Creates new ExperimentService service using the specified rpc implementation.
         * @function create
         * @memberof ExperimentService
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {ExperimentService} RPC service. Useful where requests and/or responses are streamed.
         */
        ExperimentService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link ExperimentService#reportProductImpressionsFromClient}.
         * @memberof ExperimentService
         * @typedef ReportProductImpressionsFromClientCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls ReportProductImpressionsFromClient.
         * @function reportProductImpressionsFromClient
         * @memberof ExperimentService
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @param {ExperimentService.ReportProductImpressionsFromClientCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(ExperimentService.prototype.reportProductImpressionsFromClient = function reportProductImpressionsFromClient(request, callback) {
            return this.rpcCall(reportProductImpressionsFromClient, $root.NotImplemented, $root.NoResponse, request, callback);
        }, "name", { value: "ReportProductImpressionsFromClient" });
    
        /**
         * Calls ReportProductImpressionsFromClient.
         * @function reportProductImpressionsFromClient
         * @memberof ExperimentService
         * @instance
         * @param {INotImplemented} request NotImplemented message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        return ExperimentService;
    })();
    
    /**
     * EProtoExecutionSite enum.
     * @exports EProtoExecutionSite
     * @enum {string}
     * @property {number} k_EProtoExecutionSiteUnknown=0 k_EProtoExecutionSiteUnknown value
     * @property {number} k_EProtoExecutionSiteSteamClient=2 k_EProtoExecutionSiteSteamClient value
     */
    $root.EProtoExecutionSite = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EProtoExecutionSiteUnknown"] = 0;
        values[valuesById[2] = "k_EProtoExecutionSiteSteamClient"] = 2;
        return values;
    })();
    
    $root.NoResponse = (function() {
    
        /**
         * Properties of a NoResponse.
         * @exports INoResponse
         * @interface INoResponse
         */
    
        /**
         * Constructs a new NoResponse.
         * @exports NoResponse
         * @classdesc Represents a NoResponse.
         * @implements INoResponse
         * @constructor
         * @param {INoResponse=} [properties] Properties to set
         */
        function NoResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new NoResponse instance using the specified properties.
         * @function create
         * @memberof NoResponse
         * @static
         * @param {INoResponse=} [properties] Properties to set
         * @returns {NoResponse} NoResponse instance
         */
        NoResponse.create = function create(properties) {
            return new NoResponse(properties);
        };
    
        /**
         * Encodes the specified NoResponse message. Does not implicitly {@link NoResponse.verify|verify} messages.
         * @function encode
         * @memberof NoResponse
         * @static
         * @param {INoResponse} message NoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NoResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified NoResponse message, length delimited. Does not implicitly {@link NoResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NoResponse
         * @static
         * @param {INoResponse} message NoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NoResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a NoResponse message from the specified reader or buffer.
         * @function decode
         * @memberof NoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {NoResponse} NoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NoResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NoResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a NoResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof NoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {NoResponse} NoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NoResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a NoResponse message.
         * @function verify
         * @memberof NoResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NoResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a NoResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof NoResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {NoResponse} NoResponse
         */
        NoResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.NoResponse)
                return object;
            return new $root.NoResponse();
        };
    
        /**
         * Creates a plain object from a NoResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof NoResponse
         * @static
         * @param {NoResponse} message NoResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NoResponse.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this NoResponse to JSON.
         * @function toJSON
         * @memberof NoResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NoResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return NoResponse;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency
                 * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.public_dependency = [];
                    this.weak_dependency = [];
                    this.message_type = [];
                    this.enum_type = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto public_dependency.
                 * @member {Array.<number>} public_dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.public_dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weak_dependency.
                 * @member {Array.<number>} weak_dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto message_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} message_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.message_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto source_code_info.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.source_code_info = null;
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.message_type != null && message.message_type.length)
                        for (var i = 0; i < message.message_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.public_dependency != null && message.public_dependency.length)
                        for (var i = 0; i < message.public_dependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.public_dependency[i]);
                    if (message.weak_dependency != null && message.weak_dependency.length)
                        for (var i = 0; i < message.weak_dependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weak_dependency[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 10:
                            if (!(message.public_dependency && message.public_dependency.length))
                                message.public_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.public_dependency.push(reader.int32());
                            } else
                                message.public_dependency.push(reader.int32());
                            break;
                        case 11:
                            if (!(message.weak_dependency && message.weak_dependency.length))
                                message.weak_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weak_dependency.push(reader.int32());
                            } else
                                message.weak_dependency.push(reader.int32());
                            break;
                        case 4:
                            if (!(message.message_type && message.message_type.length))
                                message.message_type = [];
                            message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.public_dependency != null && message.hasOwnProperty("public_dependency")) {
                        if (!Array.isArray(message.public_dependency))
                            return "public_dependency: array expected";
                        for (var i = 0; i < message.public_dependency.length; ++i)
                            if (!$util.isInteger(message.public_dependency[i]))
                                return "public_dependency: integer[] expected";
                    }
                    if (message.weak_dependency != null && message.hasOwnProperty("weak_dependency")) {
                        if (!Array.isArray(message.weak_dependency))
                            return "weak_dependency: array expected";
                        for (var i = 0; i < message.weak_dependency.length; ++i)
                            if (!$util.isInteger(message.weak_dependency[i]))
                                return "weak_dependency: integer[] expected";
                    }
                    if (message.message_type != null && message.hasOwnProperty("message_type")) {
                        if (!Array.isArray(message.message_type))
                            return "message_type: array expected";
                        for (var i = 0; i < message.message_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                            if (error)
                                return "message_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                        if (error)
                            return "source_code_info." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.public_dependency) {
                        if (!Array.isArray(object.public_dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.public_dependency: array expected");
                        message.public_dependency = [];
                        for (var i = 0; i < object.public_dependency.length; ++i)
                            message.public_dependency[i] = object.public_dependency[i] | 0;
                    }
                    if (object.weak_dependency) {
                        if (!Array.isArray(object.weak_dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weak_dependency: array expected");
                        message.weak_dependency = [];
                        for (var i = 0; i < object.weak_dependency.length; ++i)
                            message.weak_dependency[i] = object.weak_dependency[i] | 0;
                    }
                    if (object.message_type) {
                        if (!Array.isArray(object.message_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                        message.message_type = [];
                        for (var i = 0; i < object.message_type.length; ++i) {
                            if (typeof object.message_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                            message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.source_code_info != null) {
                        if (typeof object.source_code_info !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.message_type = [];
                        object.enum_type = [];
                        object.service = [];
                        object.extension = [];
                        object.public_dependency = [];
                        object.weak_dependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.source_code_info = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.message_type && message.message_type.length) {
                        object.message_type = [];
                        for (var j = 0; j < message.message_type.length; ++j)
                            object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                        object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                    if (message.public_dependency && message.public_dependency.length) {
                        object.public_dependency = [];
                        for (var j = 0; j < message.public_dependency.length; ++j)
                            object.public_dependency[j] = message.public_dependency[j];
                    }
                    if (message.weak_dependency && message.weak_dependency.length) {
                        object.weak_dependency = [];
                        for (var j = 0; j < message.weak_dependency.length; ++j)
                            object.weak_dependency[j] = message.weak_dependency[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nested_type = [];
                    this.enum_type = [];
                    this.extension_range = [];
                    this.oneof_decl = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nested_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nested_type = $util.emptyArray;
    
                /**
                 * DescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * DescriptorProto extension_range.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension_range = $util.emptyArray;
    
                /**
                 * DescriptorProto oneof_decl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneof_decl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nested_type != null && message.nested_type.length)
                        for (var i = 0; i < message.nested_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extension_range != null && message.extension_range.length)
                        for (var i = 0; i < message.extension_range.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneof_decl != null && message.oneof_decl.length)
                        for (var i = 0; i < message.oneof_decl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneof_decl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nested_type && message.nested_type.length))
                                message.nested_type = [];
                            message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extension_range && message.extension_range.length))
                                message.extension_range = [];
                            message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            if (!(message.oneof_decl && message.oneof_decl.length))
                                message.oneof_decl = [];
                            message.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                        if (!Array.isArray(message.nested_type))
                            return "nested_type: array expected";
                        for (var i = 0; i < message.nested_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                            if (error)
                                return "nested_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                        if (!Array.isArray(message.extension_range))
                            return "extension_range: array expected";
                        for (var i = 0; i < message.extension_range.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                            if (error)
                                return "extension_range." + error;
                        }
                    }
                    if (message.oneof_decl != null && message.hasOwnProperty("oneof_decl")) {
                        if (!Array.isArray(message.oneof_decl))
                            return "oneof_decl: array expected";
                        for (var i = 0; i < message.oneof_decl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneof_decl[i]);
                            if (error)
                                return "oneof_decl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nested_type) {
                        if (!Array.isArray(object.nested_type))
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                        message.nested_type = [];
                        for (var i = 0; i < object.nested_type.length; ++i) {
                            if (typeof object.nested_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                            message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.extension_range) {
                        if (!Array.isArray(object.extension_range))
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                        message.extension_range = [];
                        for (var i = 0; i < object.extension_range.length; ++i) {
                            if (typeof object.extension_range[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                            message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                        }
                    }
                    if (object.oneof_decl) {
                        if (!Array.isArray(object.oneof_decl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: array expected");
                        message.oneof_decl = [];
                        for (var i = 0; i < object.oneof_decl.length; ++i) {
                            if (typeof object.oneof_decl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: object expected");
                            message.oneof_decl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneof_decl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nested_type = [];
                        object.enum_type = [];
                        object.extension_range = [];
                        object.extension = [];
                        object.oneof_decl = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nested_type && message.nested_type.length) {
                        object.nested_type = [];
                        for (var j = 0; j < message.nested_type.length; ++j)
                            object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.extension_range && message.extension_range.length) {
                        object.extension_range = [];
                        for (var j = 0; j < message.extension_range.length; ++j)
                            object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneof_decl && message.oneof_decl.length) {
                        object.oneof_decl = [];
                        for (var j = 0; j < message.oneof_decl.length; ++j)
                            object.oneof_decl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneof_decl[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && message.hasOwnProperty("start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExtensionRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [type_name] FieldDescriptorProto type_name
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [default_value] FieldDescriptorProto default_value
                 * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto type_name.
                 * @member {string} type_name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type_name = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto default_value.
                 * @member {string} default_value
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.default_value = "";
    
                /**
                 * FieldDescriptorProto oneof_index.
                 * @member {number} oneof_index
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneof_index = 0;
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && message.hasOwnProperty("number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && message.hasOwnProperty("label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneof_index);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.type_name = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.default_value = reader.string();
                            break;
                        case 9:
                            message.oneof_index = reader.int32();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        if (!$util.isString(message.type_name))
                            return "type_name: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        if (!$util.isString(message.default_value))
                            return "default_value: string expected";
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        if (!$util.isInteger(message.oneof_index))
                            return "oneof_index: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.type_name != null)
                        message.type_name = String(object.type_name);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.default_value != null)
                        message.default_value = String(object.default_value);
                    if (object.oneof_index != null)
                        message.oneof_index = object.oneof_index | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.type_name = "";
                        object.default_value = "";
                        object.options = null;
                        object.oneof_index = 0;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        object.type_name = message.type_name;
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        object.default_value = message.default_value;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        object.oneof_index = message.oneof_index;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {string}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {string}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.value = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && message.hasOwnProperty("number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [input_type] MethodDescriptorProto input_type
                 * @property {string|null} [output_type] MethodDescriptorProto output_type
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto input_type.
                 * @member {string} input_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.input_type = "";
    
                /**
                 * MethodDescriptorProto output_type.
                 * @member {string} output_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.output_type = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.input_type = reader.string();
                            break;
                        case 3:
                            message.output_type = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        if (!$util.isString(message.input_type))
                            return "input_type: string expected";
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        if (!$util.isString(message.output_type))
                            return "output_type: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.input_type != null)
                        message.input_type = String(object.input_type);
                    if (object.output_type != null)
                        message.output_type = String(object.output_type);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.input_type = "";
                        object.output_type = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        object.input_type = message.input_type;
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        object.output_type = message.output_type;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [java_package] FileOptions java_package
                 * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
                 * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
                 * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
                 * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
                 * @property {string|null} [go_package] FileOptions go_package
                 * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
                 * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
                 * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
                 * @property {boolean|null} [".force_php_generation"] FileOptions .force_php_generation
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions java_package.
                 * @member {string} java_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_package = "";
    
                /**
                 * FileOptions java_outer_classname.
                 * @member {string} java_outer_classname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_outer_classname = "";
    
                /**
                 * FileOptions java_multiple_files.
                 * @member {boolean} java_multiple_files
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_multiple_files = false;
    
                /**
                 * FileOptions java_generate_equals_and_hash.
                 * @member {boolean} java_generate_equals_and_hash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generate_equals_and_hash = false;
    
                /**
                 * FileOptions java_string_check_utf8.
                 * @member {boolean} java_string_check_utf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_string_check_utf8 = false;
    
                /**
                 * FileOptions optimize_for.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimize_for = 1;
    
                /**
                 * FileOptions go_package.
                 * @member {string} go_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.go_package = "";
    
                /**
                 * FileOptions cc_generic_services.
                 * @member {boolean} cc_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.cc_generic_services = false;
    
                /**
                 * FileOptions java_generic_services.
                 * @member {boolean} java_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generic_services = false;
    
                /**
                 * FileOptions py_generic_services.
                 * @member {boolean} py_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.py_generic_services = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * FileOptions .force_php_generation.
                 * @member {boolean} .force_php_generation
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".force_php_generation"] = false;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.go_package);
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.java_string_check_utf8);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".force_php_generation"] != null && message.hasOwnProperty(".force_php_generation"))
                        writer.uint32(/* id 50000, wireType 0 =*/400000).bool(message[".force_php_generation"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.java_package = reader.string();
                            break;
                        case 8:
                            message.java_outer_classname = reader.string();
                            break;
                        case 10:
                            message.java_multiple_files = reader.bool();
                            break;
                        case 20:
                            message.java_generate_equals_and_hash = reader.bool();
                            break;
                        case 27:
                            message.java_string_check_utf8 = reader.bool();
                            break;
                        case 9:
                            message.optimize_for = reader.int32();
                            break;
                        case 11:
                            message.go_package = reader.string();
                            break;
                        case 16:
                            message.cc_generic_services = reader.bool();
                            break;
                        case 17:
                            message.java_generic_services = reader.bool();
                            break;
                        case 18:
                            message.py_generic_services = reader.bool();
                            break;
                        case 23:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".force_php_generation"] = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        if (!$util.isString(message.java_package))
                            return "java_package: string expected";
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        if (!$util.isString(message.java_outer_classname))
                            return "java_outer_classname: string expected";
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        if (typeof message.java_multiple_files !== "boolean")
                            return "java_multiple_files: boolean expected";
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        if (typeof message.java_generate_equals_and_hash !== "boolean")
                            return "java_generate_equals_and_hash: boolean expected";
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        if (typeof message.java_string_check_utf8 !== "boolean")
                            return "java_string_check_utf8: boolean expected";
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        switch (message.optimize_for) {
                        default:
                            return "optimize_for: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        if (!$util.isString(message.go_package))
                            return "go_package: string expected";
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        if (typeof message.cc_generic_services !== "boolean")
                            return "cc_generic_services: boolean expected";
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        if (typeof message.java_generic_services !== "boolean")
                            return "java_generic_services: boolean expected";
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        if (typeof message.py_generic_services !== "boolean")
                            return "py_generic_services: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".force_php_generation"] != null && message.hasOwnProperty(".force_php_generation"))
                        if (typeof message[".force_php_generation"] !== "boolean")
                            return ".force_php_generation: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.java_package != null)
                        message.java_package = String(object.java_package);
                    if (object.java_outer_classname != null)
                        message.java_outer_classname = String(object.java_outer_classname);
                    if (object.java_multiple_files != null)
                        message.java_multiple_files = Boolean(object.java_multiple_files);
                    if (object.java_generate_equals_and_hash != null)
                        message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                    if (object.java_string_check_utf8 != null)
                        message.java_string_check_utf8 = Boolean(object.java_string_check_utf8);
                    switch (object.optimize_for) {
                    case "SPEED":
                    case 1:
                        message.optimize_for = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimize_for = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimize_for = 3;
                        break;
                    }
                    if (object.go_package != null)
                        message.go_package = String(object.go_package);
                    if (object.cc_generic_services != null)
                        message.cc_generic_services = Boolean(object.cc_generic_services);
                    if (object.java_generic_services != null)
                        message.java_generic_services = Boolean(object.java_generic_services);
                    if (object.py_generic_services != null)
                        message.py_generic_services = Boolean(object.py_generic_services);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".force_php_generation"] != null)
                        message[".force_php_generation"] = Boolean(object[".force_php_generation"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.java_package = "";
                        object.java_outer_classname = "";
                        object.optimize_for = options.enums === String ? "SPEED" : 1;
                        object.java_multiple_files = false;
                        object.go_package = "";
                        object.cc_generic_services = false;
                        object.java_generic_services = false;
                        object.py_generic_services = false;
                        object.java_generate_equals_and_hash = false;
                        object.deprecated = false;
                        object.java_string_check_utf8 = false;
                        object[".force_php_generation"] = false;
                    }
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        object.java_package = message.java_package;
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        object.java_outer_classname = message.java_outer_classname;
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        object.java_multiple_files = message.java_multiple_files;
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        object.go_package = message.go_package;
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        object.cc_generic_services = message.cc_generic_services;
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        object.java_generic_services = message.java_generic_services;
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        object.py_generic_services = message.py_generic_services;
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        object.java_string_check_utf8 = message.java_string_check_utf8;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".force_php_generation"] != null && message.hasOwnProperty(".force_php_generation"))
                        object[".force_php_generation"] = message[".force_php_generation"];
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {string}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
                 * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
                 * @property {number|null} [".msgpool_soft_limit"] MessageOptions .msgpool_soft_limit
                 * @property {number|null} [".msgpool_hard_limit"] MessageOptions .msgpool_hard_limit
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions message_set_wire_format.
                 * @member {boolean} message_set_wire_format
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.message_set_wire_format = false;
    
                /**
                 * MessageOptions no_standard_descriptor_accessor.
                 * @member {boolean} no_standard_descriptor_accessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.no_standard_descriptor_accessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * MessageOptions .msgpool_soft_limit.
                 * @member {number} .msgpool_soft_limit
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".msgpool_soft_limit"] = 32;
    
                /**
                 * MessageOptions .msgpool_hard_limit.
                 * @member {number} .msgpool_hard_limit
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".msgpool_hard_limit"] = 384;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".msgpool_soft_limit"] != null && message.hasOwnProperty(".msgpool_soft_limit"))
                        writer.uint32(/* id 50000, wireType 0 =*/400000).int32(message[".msgpool_soft_limit"]);
                    if (message[".msgpool_hard_limit"] != null && message.hasOwnProperty(".msgpool_hard_limit"))
                        writer.uint32(/* id 50001, wireType 0 =*/400008).int32(message[".msgpool_hard_limit"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.message_set_wire_format = reader.bool();
                            break;
                        case 2:
                            message.no_standard_descriptor_accessor = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".msgpool_soft_limit"] = reader.int32();
                            break;
                        case 50001:
                            message[".msgpool_hard_limit"] = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        if (typeof message.message_set_wire_format !== "boolean")
                            return "message_set_wire_format: boolean expected";
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        if (typeof message.no_standard_descriptor_accessor !== "boolean")
                            return "no_standard_descriptor_accessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".msgpool_soft_limit"] != null && message.hasOwnProperty(".msgpool_soft_limit"))
                        if (!$util.isInteger(message[".msgpool_soft_limit"]))
                            return ".msgpool_soft_limit: integer expected";
                    if (message[".msgpool_hard_limit"] != null && message.hasOwnProperty(".msgpool_hard_limit"))
                        if (!$util.isInteger(message[".msgpool_hard_limit"]))
                            return ".msgpool_hard_limit: integer expected";
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.message_set_wire_format != null)
                        message.message_set_wire_format = Boolean(object.message_set_wire_format);
                    if (object.no_standard_descriptor_accessor != null)
                        message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".msgpool_soft_limit"] != null)
                        message[".msgpool_soft_limit"] = object[".msgpool_soft_limit"] | 0;
                    if (object[".msgpool_hard_limit"] != null)
                        message[".msgpool_hard_limit"] = object[".msgpool_hard_limit"] | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.message_set_wire_format = false;
                        object.no_standard_descriptor_accessor = false;
                        object.deprecated = false;
                        object[".msgpool_soft_limit"] = 32;
                        object[".msgpool_hard_limit"] = 384;
                    }
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        object.message_set_wire_format = message.message_set_wire_format;
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".msgpool_soft_limit"] != null && message.hasOwnProperty(".msgpool_soft_limit"))
                        object[".msgpool_soft_limit"] = message[".msgpool_soft_limit"];
                    if (message[".msgpool_hard_limit"] != null && message.hasOwnProperty(".msgpool_hard_limit"))
                        object[".msgpool_hard_limit"] = message[".msgpool_hard_limit"];
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {string|null} [experimental_map_key] FieldOptions experimental_map_key
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
                 * @property {string|null} [".description"] FieldOptions .description
                 * @property {boolean|null} [".php_output_always_number"] FieldOptions .php_output_always_number
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions experimental_map_key.
                 * @member {string} experimental_map_key
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.experimental_map_key = "";
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * FieldOptions .description.
                 * @member {string} .description
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".description"] = "";
    
                /**
                 * FieldOptions .php_output_always_number.
                 * @member {boolean} .php_output_always_number
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".php_output_always_number"] = false;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.experimental_map_key != null && message.hasOwnProperty("experimental_map_key"))
                        writer.uint32(/* id 9, wireType 2 =*/74).string(message.experimental_map_key);
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".description"] != null && message.hasOwnProperty(".description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".description"]);
                    if (message[".php_output_always_number"] != null && message.hasOwnProperty(".php_output_always_number"))
                        writer.uint32(/* id 50020, wireType 0 =*/400160).bool(message[".php_output_always_number"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 5:
                            message.lazy = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 9:
                            message.experimental_map_key = reader.string();
                            break;
                        case 10:
                            message.weak = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".description"] = reader.string();
                            break;
                        case 50020:
                            message[".php_output_always_number"] = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.experimental_map_key != null && message.hasOwnProperty("experimental_map_key"))
                        if (!$util.isString(message.experimental_map_key))
                            return "experimental_map_key: string expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".description"] != null && message.hasOwnProperty(".description"))
                        if (!$util.isString(message[".description"]))
                            return ".description: string expected";
                    if (message[".php_output_always_number"] != null && message.hasOwnProperty(".php_output_always_number"))
                        if (typeof message[".php_output_always_number"] !== "boolean")
                            return ".php_output_always_number: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.experimental_map_key != null)
                        message.experimental_map_key = String(object.experimental_map_key);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".description"] != null)
                        message[".description"] = String(object[".description"]);
                    if (object[".php_output_always_number"] != null)
                        message[".php_output_always_number"] = Boolean(object[".php_output_always_number"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.experimental_map_key = "";
                        object.weak = false;
                        object[".description"] = "";
                        object[".php_output_always_number"] = false;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.experimental_map_key != null && message.hasOwnProperty("experimental_map_key"))
                        object.experimental_map_key = message.experimental_map_key;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".description"] != null && message.hasOwnProperty(".description"))
                        object[".description"] = message[".description"];
                    if (message[".php_output_always_number"] != null && message.hasOwnProperty(".php_output_always_number"))
                        object[".php_output_always_number"] = message[".php_output_always_number"];
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {string}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allow_alias] EnumOptions allow_alias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
                 * @property {string|null} [".enum_description"] EnumOptions .enum_description
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allow_alias.
                 * @member {boolean} allow_alias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allow_alias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * EnumOptions .enum_description.
                 * @member {string} .enum_description
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".enum_description"] = "";
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_alias);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".enum_description"] != null && message.hasOwnProperty(".enum_description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".enum_description"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.allow_alias = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".enum_description"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        if (typeof message.allow_alias !== "boolean")
                            return "allow_alias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".enum_description"] != null && message.hasOwnProperty(".enum_description"))
                        if (!$util.isString(message[".enum_description"]))
                            return ".enum_description: string expected";
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allow_alias != null)
                        message.allow_alias = Boolean(object.allow_alias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".enum_description"] != null)
                        message[".enum_description"] = String(object[".enum_description"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.allow_alias = false;
                        object.deprecated = false;
                        object[".enum_description"] = "";
                    }
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        object.allow_alias = message.allow_alias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".enum_description"] != null && message.hasOwnProperty(".enum_description"))
                        object[".enum_description"] = message[".enum_description"];
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
                 * @property {string|null} [".enum_value_description"] EnumValueOptions .enum_value_description
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * EnumValueOptions .enum_value_description.
                 * @member {string} .enum_value_description
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype[".enum_value_description"] = "";
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".enum_value_description"] != null && message.hasOwnProperty(".enum_value_description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".enum_value_description"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".enum_value_description"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".enum_value_description"] != null && message.hasOwnProperty(".enum_value_description"))
                        if (!$util.isString(message[".enum_value_description"]))
                            return ".enum_value_description: string expected";
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".enum_value_description"] != null)
                        message[".enum_value_description"] = String(object[".enum_value_description"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".enum_value_description"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".enum_value_description"] != null && message.hasOwnProperty(".enum_value_description"))
                        object[".enum_value_description"] = message[".enum_value_description"];
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
                 * @property {string|null} [".service_description"] ServiceOptions .service_description
                 * @property {EProtoExecutionSite|null} [".service_execution_site"] ServiceOptions .service_execution_site
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * ServiceOptions .service_description.
                 * @member {string} .service_description
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".service_description"] = "";
    
                /**
                 * ServiceOptions .service_execution_site.
                 * @member {EProtoExecutionSite} .service_execution_site
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".service_execution_site"] = 0;
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".service_description"] != null && message.hasOwnProperty(".service_description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".service_description"]);
                    if (message[".service_execution_site"] != null && message.hasOwnProperty(".service_execution_site"))
                        writer.uint32(/* id 50008, wireType 0 =*/400064).int32(message[".service_execution_site"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".service_description"] = reader.string();
                            break;
                        case 50008:
                            message[".service_execution_site"] = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".service_description"] != null && message.hasOwnProperty(".service_description"))
                        if (!$util.isString(message[".service_description"]))
                            return ".service_description: string expected";
                    if (message[".service_execution_site"] != null && message.hasOwnProperty(".service_execution_site"))
                        switch (message[".service_execution_site"]) {
                        default:
                            return ".service_execution_site: enum value expected";
                        case 0:
                        case 2:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".service_description"] != null)
                        message[".service_description"] = String(object[".service_description"]);
                    switch (object[".service_execution_site"]) {
                    case "k_EProtoExecutionSiteUnknown":
                    case 0:
                        message[".service_execution_site"] = 0;
                        break;
                    case "k_EProtoExecutionSiteSteamClient":
                    case 2:
                        message[".service_execution_site"] = 2;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".service_description"] = "";
                        object[".service_execution_site"] = options.enums === String ? "k_EProtoExecutionSiteUnknown" : 0;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".service_description"] != null && message.hasOwnProperty(".service_description"))
                        object[".service_description"] = message[".service_description"];
                    if (message[".service_execution_site"] != null && message.hasOwnProperty(".service_execution_site"))
                        object[".service_execution_site"] = options.enums === String ? $root.EProtoExecutionSite[message[".service_execution_site"]] : message[".service_execution_site"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
                 * @property {string|null} [".method_description"] MethodOptions .method_description
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * MethodOptions .method_description.
                 * @member {string} .method_description
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".method_description"] = "";
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".method_description"] != null && message.hasOwnProperty(".method_description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".method_description"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".method_description"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".method_description"] != null && message.hasOwnProperty(".method_description"))
                        if (!$util.isString(message[".method_description"]))
                            return ".method_description: string expected";
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".method_description"] != null)
                        message[".method_description"] = String(object[".method_description"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".method_description"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".method_description"] != null && message.hasOwnProperty(".method_description"))
                        object[".method_description"] = message[".method_description"];
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifier_value] UninterpretedOption identifier_value
                 * @property {number|Long|null} [positive_int_value] UninterpretedOption positive_int_value
                 * @property {number|Long|null} [negative_int_value] UninterpretedOption negative_int_value
                 * @property {number|null} [double_value] UninterpretedOption double_value
                 * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
                 * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifier_value.
                 * @member {string} identifier_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifier_value = "";
    
                /**
                 * UninterpretedOption positive_int_value.
                 * @member {number|Long} positive_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negative_int_value.
                 * @member {number|Long} negative_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption double_value.
                 * @member {number} double_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.double_value = 0;
    
                /**
                 * UninterpretedOption string_value.
                 * @member {Uint8Array} string_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.string_value = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregate_value.
                 * @member {string} aggregate_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregate_value = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifier_value = reader.string();
                            break;
                        case 4:
                            message.positive_int_value = reader.uint64();
                            break;
                        case 5:
                            message.negative_int_value = reader.int64();
                            break;
                        case 6:
                            message.double_value = reader.double();
                            break;
                        case 7:
                            message.string_value = reader.bytes();
                            break;
                        case 8:
                            message.aggregate_value = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        if (!$util.isString(message.identifier_value))
                            return "identifier_value: string expected";
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                            return "positive_int_value: integer|Long expected";
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                            return "negative_int_value: integer|Long expected";
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        if (typeof message.double_value !== "number")
                            return "double_value: number expected";
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                            return "string_value: buffer expected";
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        if (!$util.isString(message.aggregate_value))
                            return "aggregate_value: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifier_value != null)
                        message.identifier_value = String(object.identifier_value);
                    if (object.positive_int_value != null)
                        if ($util.Long)
                            (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                        else if (typeof object.positive_int_value === "string")
                            message.positive_int_value = parseInt(object.positive_int_value, 10);
                        else if (typeof object.positive_int_value === "number")
                            message.positive_int_value = object.positive_int_value;
                        else if (typeof object.positive_int_value === "object")
                            message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                    if (object.negative_int_value != null)
                        if ($util.Long)
                            (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                        else if (typeof object.negative_int_value === "string")
                            message.negative_int_value = parseInt(object.negative_int_value, 10);
                        else if (typeof object.negative_int_value === "number")
                            message.negative_int_value = object.negative_int_value;
                        else if (typeof object.negative_int_value === "object")
                            message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                    if (object.double_value != null)
                        message.double_value = Number(object.double_value);
                    if (object.string_value != null)
                        if (typeof object.string_value === "string")
                            $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                        else if (object.string_value.length)
                            message.string_value = object.string_value;
                    if (object.aggregate_value != null)
                        message.aggregate_value = String(object.aggregate_value);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifier_value = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positive_int_value = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negative_int_value = options.longs === String ? "0" : 0;
                        object.double_value = 0;
                        if (options.bytes === String)
                            object.string_value = "";
                        else {
                            object.string_value = [];
                            if (options.bytes !== Array)
                                object.string_value = $util.newBuffer(object.string_value);
                        }
                        object.aggregate_value = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        object.identifier_value = message.identifier_value;
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (typeof message.positive_int_value === "number")
                            object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                        else
                            object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (typeof message.negative_int_value === "number")
                            object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                        else
                            object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        object.aggregate_value = message.aggregate_value;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} name_part NamePart name_part
                     * @property {boolean} is_extension NamePart is_extension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart name_part.
                     * @member {string} name_part
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.name_part = "";
    
                    /**
                     * NamePart is_extension.
                     * @member {boolean} is_extension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.is_extension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name_part = reader.string();
                                break;
                            case 2:
                                message.is_extension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("name_part"))
                            throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                        if (!message.hasOwnProperty("is_extension"))
                            throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.name_part))
                            return "name_part: string expected";
                        if (typeof message.is_extension !== "boolean")
                            return "is_extension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.name_part != null)
                            message.name_part = String(object.name_part);
                        if (object.is_extension != null)
                            message.is_extension = Boolean(object.is_extension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name_part = "";
                            object.is_extension = false;
                        }
                        if (message.name_part != null && message.hasOwnProperty("name_part"))
                            object.name_part = message.name_part;
                        if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                            object.is_extension = message.is_extension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leading_comments] Location leading_comments
                     * @property {string|null} [trailing_comments] Location trailing_comments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leading_comments.
                     * @member {string} leading_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leading_comments = "";
    
                    /**
                     * Location trailing_comments.
                     * @member {string} trailing_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailing_comments = "";
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leading_comments);
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailing_comments);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            case 3:
                                message.leading_comments = reader.string();
                                break;
                            case 4:
                                message.trailing_comments = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            if (!$util.isString(message.leading_comments))
                                return "leading_comments: string expected";
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            if (!$util.isString(message.trailing_comments))
                                return "trailing_comments: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leading_comments != null)
                            message.leading_comments = String(object.leading_comments);
                        if (object.trailing_comments != null)
                            message.trailing_comments = String(object.trailing_comments);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                        }
                        if (options.defaults) {
                            object.leading_comments = "";
                            object.trailing_comments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            object.leading_comments = message.leading_comments;
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            object.trailing_comments = message.trailing_comments;
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            return protobuf;
        })();
    
        return google;
    })();
    
    /**
     * EProtoClanEventType enum.
     * @exports EProtoClanEventType
     * @enum {string}
     * @property {number} k_EClanOtherEvent=1 k_EClanOtherEvent value
     * @property {number} k_EClanGameEvent=2 k_EClanGameEvent value
     * @property {number} k_EClanPartyEvent=3 k_EClanPartyEvent value
     * @property {number} k_EClanMeetingEvent=4 k_EClanMeetingEvent value
     * @property {number} k_EClanSpecialCauseEvent=5 k_EClanSpecialCauseEvent value
     * @property {number} k_EClanMusicAndArtsEvent=6 k_EClanMusicAndArtsEvent value
     * @property {number} k_EClanSportsEvent=7 k_EClanSportsEvent value
     * @property {number} k_EClanTripEvent=8 k_EClanTripEvent value
     * @property {number} k_EClanChatEvent=9 k_EClanChatEvent value
     * @property {number} k_EClanGameReleaseEvent=10 k_EClanGameReleaseEvent value
     * @property {number} k_EClanBroadcastEvent=11 k_EClanBroadcastEvent value
     * @property {number} k_EClanSmallUpdateEvent=12 k_EClanSmallUpdateEvent value
     * @property {number} k_EClanPreAnnounceMajorUpdateEvent=13 k_EClanPreAnnounceMajorUpdateEvent value
     * @property {number} k_EClanMajorUpdateEvent=14 k_EClanMajorUpdateEvent value
     * @property {number} k_EClanDLCReleaseEvent=15 k_EClanDLCReleaseEvent value
     * @property {number} k_EClanFutureReleaseEvent=16 k_EClanFutureReleaseEvent value
     * @property {number} k_EClanESportTournamentStreamEvent=17 k_EClanESportTournamentStreamEvent value
     * @property {number} k_EClanDevStreamEvent=18 k_EClanDevStreamEvent value
     * @property {number} k_EClanFamousStreamEvent=19 k_EClanFamousStreamEvent value
     * @property {number} k_EClanGameSalesEvent=20 k_EClanGameSalesEvent value
     * @property {number} k_EClanGameItemSalesEvent=21 k_EClanGameItemSalesEvent value
     * @property {number} k_EClanInGameBonusXPEvent=22 k_EClanInGameBonusXPEvent value
     * @property {number} k_EClanInGameLootEvent=23 k_EClanInGameLootEvent value
     * @property {number} k_EClanInGamePerksEvent=24 k_EClanInGamePerksEvent value
     * @property {number} k_EClanInGameChallengeEvent=25 k_EClanInGameChallengeEvent value
     * @property {number} k_EClanInGameContestEvent=26 k_EClanInGameContestEvent value
     * @property {number} k_EClanIRLEvent=27 k_EClanIRLEvent value
     * @property {number} k_EClanNewsEvent=28 k_EClanNewsEvent value
     * @property {number} k_EClanBetaReleaseEvent=29 k_EClanBetaReleaseEvent value
     * @property {number} k_EClanInGameContentReleaseEvent=30 k_EClanInGameContentReleaseEvent value
     * @property {number} k_EClanFreeTrial=31 k_EClanFreeTrial value
     * @property {number} k_EClanSeasonRelease=32 k_EClanSeasonRelease value
     * @property {number} k_EClanSeasonUpdate=33 k_EClanSeasonUpdate value
     */
    $root.EProtoClanEventType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "k_EClanOtherEvent"] = 1;
        values[valuesById[2] = "k_EClanGameEvent"] = 2;
        values[valuesById[3] = "k_EClanPartyEvent"] = 3;
        values[valuesById[4] = "k_EClanMeetingEvent"] = 4;
        values[valuesById[5] = "k_EClanSpecialCauseEvent"] = 5;
        values[valuesById[6] = "k_EClanMusicAndArtsEvent"] = 6;
        values[valuesById[7] = "k_EClanSportsEvent"] = 7;
        values[valuesById[8] = "k_EClanTripEvent"] = 8;
        values[valuesById[9] = "k_EClanChatEvent"] = 9;
        values[valuesById[10] = "k_EClanGameReleaseEvent"] = 10;
        values[valuesById[11] = "k_EClanBroadcastEvent"] = 11;
        values[valuesById[12] = "k_EClanSmallUpdateEvent"] = 12;
        values[valuesById[13] = "k_EClanPreAnnounceMajorUpdateEvent"] = 13;
        values[valuesById[14] = "k_EClanMajorUpdateEvent"] = 14;
        values[valuesById[15] = "k_EClanDLCReleaseEvent"] = 15;
        values[valuesById[16] = "k_EClanFutureReleaseEvent"] = 16;
        values[valuesById[17] = "k_EClanESportTournamentStreamEvent"] = 17;
        values[valuesById[18] = "k_EClanDevStreamEvent"] = 18;
        values[valuesById[19] = "k_EClanFamousStreamEvent"] = 19;
        values[valuesById[20] = "k_EClanGameSalesEvent"] = 20;
        values[valuesById[21] = "k_EClanGameItemSalesEvent"] = 21;
        values[valuesById[22] = "k_EClanInGameBonusXPEvent"] = 22;
        values[valuesById[23] = "k_EClanInGameLootEvent"] = 23;
        values[valuesById[24] = "k_EClanInGamePerksEvent"] = 24;
        values[valuesById[25] = "k_EClanInGameChallengeEvent"] = 25;
        values[valuesById[26] = "k_EClanInGameContestEvent"] = 26;
        values[valuesById[27] = "k_EClanIRLEvent"] = 27;
        values[valuesById[28] = "k_EClanNewsEvent"] = 28;
        values[valuesById[29] = "k_EClanBetaReleaseEvent"] = 29;
        values[valuesById[30] = "k_EClanInGameContentReleaseEvent"] = 30;
        values[valuesById[31] = "k_EClanFreeTrial"] = 31;
        values[valuesById[32] = "k_EClanSeasonRelease"] = 32;
        values[valuesById[33] = "k_EClanSeasonUpdate"] = 33;
        return values;
    })();
    
    $root.CMsgIPAddress = (function() {
    
        /**
         * Properties of a CMsgIPAddress.
         * @exports ICMsgIPAddress
         * @interface ICMsgIPAddress
         * @property {number|null} [v4] CMsgIPAddress v4
         * @property {Uint8Array|null} [v6] CMsgIPAddress v6
         */
    
        /**
         * Constructs a new CMsgIPAddress.
         * @exports CMsgIPAddress
         * @classdesc Represents a CMsgIPAddress.
         * @implements ICMsgIPAddress
         * @constructor
         * @param {ICMsgIPAddress=} [properties] Properties to set
         */
        function CMsgIPAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgIPAddress v4.
         * @member {number} v4
         * @memberof CMsgIPAddress
         * @instance
         */
        CMsgIPAddress.prototype.v4 = 0;
    
        /**
         * CMsgIPAddress v6.
         * @member {Uint8Array} v6
         * @memberof CMsgIPAddress
         * @instance
         */
        CMsgIPAddress.prototype.v6 = $util.newBuffer([]);
    
        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;
    
        /**
         * CMsgIPAddress ip.
         * @member {"v4"|"v6"|undefined} ip
         * @memberof CMsgIPAddress
         * @instance
         */
        Object.defineProperty(CMsgIPAddress.prototype, "ip", {
            get: $util.oneOfGetter($oneOfFields = ["v4", "v6"]),
            set: $util.oneOfSetter($oneOfFields)
        });
    
        /**
         * Creates a new CMsgIPAddress instance using the specified properties.
         * @function create
         * @memberof CMsgIPAddress
         * @static
         * @param {ICMsgIPAddress=} [properties] Properties to set
         * @returns {CMsgIPAddress} CMsgIPAddress instance
         */
        CMsgIPAddress.create = function create(properties) {
            return new CMsgIPAddress(properties);
        };
    
        /**
         * Encodes the specified CMsgIPAddress message. Does not implicitly {@link CMsgIPAddress.verify|verify} messages.
         * @function encode
         * @memberof CMsgIPAddress
         * @static
         * @param {ICMsgIPAddress} message CMsgIPAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgIPAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.v4 != null && message.hasOwnProperty("v4"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.v4);
            if (message.v6 != null && message.hasOwnProperty("v6"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.v6);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgIPAddress message, length delimited. Does not implicitly {@link CMsgIPAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgIPAddress
         * @static
         * @param {ICMsgIPAddress} message CMsgIPAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgIPAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgIPAddress message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgIPAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgIPAddress} CMsgIPAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgIPAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgIPAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.v4 = reader.fixed32();
                    break;
                case 2:
                    message.v6 = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgIPAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgIPAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgIPAddress} CMsgIPAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgIPAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgIPAddress message.
         * @function verify
         * @memberof CMsgIPAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgIPAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.v4 != null && message.hasOwnProperty("v4")) {
                properties.ip = 1;
                if (!$util.isInteger(message.v4))
                    return "v4: integer expected";
            }
            if (message.v6 != null && message.hasOwnProperty("v6")) {
                if (properties.ip === 1)
                    return "ip: multiple values";
                properties.ip = 1;
                if (!(message.v6 && typeof message.v6.length === "number" || $util.isString(message.v6)))
                    return "v6: buffer expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgIPAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgIPAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgIPAddress} CMsgIPAddress
         */
        CMsgIPAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgIPAddress)
                return object;
            var message = new $root.CMsgIPAddress();
            if (object.v4 != null)
                message.v4 = object.v4 >>> 0;
            if (object.v6 != null)
                if (typeof object.v6 === "string")
                    $util.base64.decode(object.v6, message.v6 = $util.newBuffer($util.base64.length(object.v6)), 0);
                else if (object.v6.length)
                    message.v6 = object.v6;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgIPAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgIPAddress
         * @static
         * @param {CMsgIPAddress} message CMsgIPAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgIPAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.v4 != null && message.hasOwnProperty("v4")) {
                object.v4 = message.v4;
                if (options.oneofs)
                    object.ip = "v4";
            }
            if (message.v6 != null && message.hasOwnProperty("v6")) {
                object.v6 = options.bytes === String ? $util.base64.encode(message.v6, 0, message.v6.length) : options.bytes === Array ? Array.prototype.slice.call(message.v6) : message.v6;
                if (options.oneofs)
                    object.ip = "v6";
            }
            return object;
        };
    
        /**
         * Converts this CMsgIPAddress to JSON.
         * @function toJSON
         * @memberof CMsgIPAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgIPAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgIPAddress;
    })();
    
    $root.CMsgProtoBufHeader = (function() {
    
        /**
         * Properties of a CMsgProtoBufHeader.
         * @exports ICMsgProtoBufHeader
         * @interface ICMsgProtoBufHeader
         * @property {number|Long|null} [steamid] CMsgProtoBufHeader steamid
         * @property {number|null} [client_sessionid] CMsgProtoBufHeader client_sessionid
         * @property {number|null} [routing_appid] CMsgProtoBufHeader routing_appid
         * @property {number|Long|null} [jobid_source] CMsgProtoBufHeader jobid_source
         * @property {number|Long|null} [jobid_target] CMsgProtoBufHeader jobid_target
         * @property {string|null} [target_job_name] CMsgProtoBufHeader target_job_name
         * @property {number|null} [seq_num] CMsgProtoBufHeader seq_num
         * @property {number|null} [eresult] CMsgProtoBufHeader eresult
         * @property {string|null} [error_message] CMsgProtoBufHeader error_message
         * @property {number|null} [auth_account_flags] CMsgProtoBufHeader auth_account_flags
         * @property {number|null} [token_source] CMsgProtoBufHeader token_source
         * @property {boolean|null} [admin_spoofing_user] CMsgProtoBufHeader admin_spoofing_user
         * @property {number|null} [transport_error] CMsgProtoBufHeader transport_error
         * @property {number|Long|null} [messageid] CMsgProtoBufHeader messageid
         * @property {number|null} [publisher_group_id] CMsgProtoBufHeader publisher_group_id
         * @property {number|null} [sysid] CMsgProtoBufHeader sysid
         * @property {number|Long|null} [trace_tag] CMsgProtoBufHeader trace_tag
         * @property {number|null} [webapi_key_id] CMsgProtoBufHeader webapi_key_id
         * @property {boolean|null} [is_from_external_source] CMsgProtoBufHeader is_from_external_source
         * @property {Array.<number>|null} [forward_to_sysid] CMsgProtoBufHeader forward_to_sysid
         * @property {number|null} [cm_sysid] CMsgProtoBufHeader cm_sysid
         * @property {string|null} [wg_token] CMsgProtoBufHeader wg_token
         * @property {number|null} [ip] CMsgProtoBufHeader ip
         * @property {Uint8Array|null} [ip_v6] CMsgProtoBufHeader ip_v6
         */
    
        /**
         * Constructs a new CMsgProtoBufHeader.
         * @exports CMsgProtoBufHeader
         * @classdesc Represents a CMsgProtoBufHeader.
         * @implements ICMsgProtoBufHeader
         * @constructor
         * @param {ICMsgProtoBufHeader=} [properties] Properties to set
         */
        function CMsgProtoBufHeader(properties) {
            this.forward_to_sysid = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgProtoBufHeader steamid.
         * @member {number|Long} steamid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgProtoBufHeader client_sessionid.
         * @member {number} client_sessionid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.client_sessionid = 0;
    
        /**
         * CMsgProtoBufHeader routing_appid.
         * @member {number} routing_appid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.routing_appid = 0;
    
        /**
         * CMsgProtoBufHeader jobid_source.
         * @member {number|Long} jobid_source
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.jobid_source = $util.Long ? $util.Long.fromBits(-1,2147483647,false) : 9223372036854776000;
    
        /**
         * CMsgProtoBufHeader jobid_target.
         * @member {number|Long} jobid_target
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.jobid_target = $util.Long ? $util.Long.fromBits(-1,2147483647,false) : 9223372036854776000;
    
        /**
         * CMsgProtoBufHeader target_job_name.
         * @member {string} target_job_name
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.target_job_name = "";
    
        /**
         * CMsgProtoBufHeader seq_num.
         * @member {number} seq_num
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.seq_num = 0;
    
        /**
         * CMsgProtoBufHeader eresult.
         * @member {number} eresult
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.eresult = 2;
    
        /**
         * CMsgProtoBufHeader error_message.
         * @member {string} error_message
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.error_message = "";
    
        /**
         * CMsgProtoBufHeader auth_account_flags.
         * @member {number} auth_account_flags
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.auth_account_flags = 0;
    
        /**
         * CMsgProtoBufHeader token_source.
         * @member {number} token_source
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.token_source = 0;
    
        /**
         * CMsgProtoBufHeader admin_spoofing_user.
         * @member {boolean} admin_spoofing_user
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.admin_spoofing_user = false;
    
        /**
         * CMsgProtoBufHeader transport_error.
         * @member {number} transport_error
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.transport_error = 1;
    
        /**
         * CMsgProtoBufHeader messageid.
         * @member {number|Long} messageid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.messageid = $util.Long ? $util.Long.fromBits(-1,-1,true) : 18446744073709552000;
    
        /**
         * CMsgProtoBufHeader publisher_group_id.
         * @member {number} publisher_group_id
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.publisher_group_id = 0;
    
        /**
         * CMsgProtoBufHeader sysid.
         * @member {number} sysid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.sysid = 0;
    
        /**
         * CMsgProtoBufHeader trace_tag.
         * @member {number|Long} trace_tag
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.trace_tag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgProtoBufHeader webapi_key_id.
         * @member {number} webapi_key_id
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.webapi_key_id = 0;
    
        /**
         * CMsgProtoBufHeader is_from_external_source.
         * @member {boolean} is_from_external_source
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.is_from_external_source = false;
    
        /**
         * CMsgProtoBufHeader forward_to_sysid.
         * @member {Array.<number>} forward_to_sysid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.forward_to_sysid = $util.emptyArray;
    
        /**
         * CMsgProtoBufHeader cm_sysid.
         * @member {number} cm_sysid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.cm_sysid = 0;
    
        /**
         * CMsgProtoBufHeader wg_token.
         * @member {string} wg_token
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.wg_token = "";
    
        /**
         * CMsgProtoBufHeader ip.
         * @member {number} ip
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.ip = 0;
    
        /**
         * CMsgProtoBufHeader ip_v6.
         * @member {Uint8Array} ip_v6
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.ip_v6 = $util.newBuffer([]);
    
        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;
    
        /**
         * CMsgProtoBufHeader ip_addr.
         * @member {"ip"|"ip_v6"|undefined} ip_addr
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        Object.defineProperty(CMsgProtoBufHeader.prototype, "ip_addr", {
            get: $util.oneOfGetter($oneOfFields = ["ip", "ip_v6"]),
            set: $util.oneOfSetter($oneOfFields)
        });
    
        /**
         * Creates a new CMsgProtoBufHeader instance using the specified properties.
         * @function create
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {ICMsgProtoBufHeader=} [properties] Properties to set
         * @returns {CMsgProtoBufHeader} CMsgProtoBufHeader instance
         */
        CMsgProtoBufHeader.create = function create(properties) {
            return new CMsgProtoBufHeader(properties);
        };
    
        /**
         * Encodes the specified CMsgProtoBufHeader message. Does not implicitly {@link CMsgProtoBufHeader.verify|verify} messages.
         * @function encode
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {ICMsgProtoBufHeader} message CMsgProtoBufHeader message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgProtoBufHeader.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.client_sessionid != null && message.hasOwnProperty("client_sessionid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.client_sessionid);
            if (message.routing_appid != null && message.hasOwnProperty("routing_appid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.routing_appid);
            if (message.jobid_source != null && message.hasOwnProperty("jobid_source"))
                writer.uint32(/* id 10, wireType 1 =*/81).fixed64(message.jobid_source);
            if (message.jobid_target != null && message.hasOwnProperty("jobid_target"))
                writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.jobid_target);
            if (message.target_job_name != null && message.hasOwnProperty("target_job_name"))
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.target_job_name);
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.eresult);
            if (message.error_message != null && message.hasOwnProperty("error_message"))
                writer.uint32(/* id 14, wireType 2 =*/114).string(message.error_message);
            if (message.ip != null && message.hasOwnProperty("ip"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.ip);
            if (message.auth_account_flags != null && message.hasOwnProperty("auth_account_flags"))
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.auth_account_flags);
            if (message.transport_error != null && message.hasOwnProperty("transport_error"))
                writer.uint32(/* id 17, wireType 0 =*/136).int32(message.transport_error);
            if (message.messageid != null && message.hasOwnProperty("messageid"))
                writer.uint32(/* id 18, wireType 0 =*/144).uint64(message.messageid);
            if (message.publisher_group_id != null && message.hasOwnProperty("publisher_group_id"))
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.publisher_group_id);
            if (message.sysid != null && message.hasOwnProperty("sysid"))
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.sysid);
            if (message.trace_tag != null && message.hasOwnProperty("trace_tag"))
                writer.uint32(/* id 21, wireType 0 =*/168).uint64(message.trace_tag);
            if (message.token_source != null && message.hasOwnProperty("token_source"))
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.token_source);
            if (message.admin_spoofing_user != null && message.hasOwnProperty("admin_spoofing_user"))
                writer.uint32(/* id 23, wireType 0 =*/184).bool(message.admin_spoofing_user);
            if (message.seq_num != null && message.hasOwnProperty("seq_num"))
                writer.uint32(/* id 24, wireType 0 =*/192).int32(message.seq_num);
            if (message.webapi_key_id != null && message.hasOwnProperty("webapi_key_id"))
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.webapi_key_id);
            if (message.is_from_external_source != null && message.hasOwnProperty("is_from_external_source"))
                writer.uint32(/* id 26, wireType 0 =*/208).bool(message.is_from_external_source);
            if (message.forward_to_sysid != null && message.forward_to_sysid.length)
                for (var i = 0; i < message.forward_to_sysid.length; ++i)
                    writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.forward_to_sysid[i]);
            if (message.cm_sysid != null && message.hasOwnProperty("cm_sysid"))
                writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.cm_sysid);
            if (message.ip_v6 != null && message.hasOwnProperty("ip_v6"))
                writer.uint32(/* id 29, wireType 2 =*/234).bytes(message.ip_v6);
            if (message.wg_token != null && message.hasOwnProperty("wg_token"))
                writer.uint32(/* id 30, wireType 2 =*/242).string(message.wg_token);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgProtoBufHeader message, length delimited. Does not implicitly {@link CMsgProtoBufHeader.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {ICMsgProtoBufHeader} message CMsgProtoBufHeader message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgProtoBufHeader.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgProtoBufHeader message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgProtoBufHeader} CMsgProtoBufHeader
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgProtoBufHeader.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgProtoBufHeader();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.client_sessionid = reader.int32();
                    break;
                case 3:
                    message.routing_appid = reader.uint32();
                    break;
                case 10:
                    message.jobid_source = reader.fixed64();
                    break;
                case 11:
                    message.jobid_target = reader.fixed64();
                    break;
                case 12:
                    message.target_job_name = reader.string();
                    break;
                case 24:
                    message.seq_num = reader.int32();
                    break;
                case 13:
                    message.eresult = reader.int32();
                    break;
                case 14:
                    message.error_message = reader.string();
                    break;
                case 16:
                    message.auth_account_flags = reader.uint32();
                    break;
                case 22:
                    message.token_source = reader.uint32();
                    break;
                case 23:
                    message.admin_spoofing_user = reader.bool();
                    break;
                case 17:
                    message.transport_error = reader.int32();
                    break;
                case 18:
                    message.messageid = reader.uint64();
                    break;
                case 19:
                    message.publisher_group_id = reader.uint32();
                    break;
                case 20:
                    message.sysid = reader.uint32();
                    break;
                case 21:
                    message.trace_tag = reader.uint64();
                    break;
                case 25:
                    message.webapi_key_id = reader.uint32();
                    break;
                case 26:
                    message.is_from_external_source = reader.bool();
                    break;
                case 27:
                    if (!(message.forward_to_sysid && message.forward_to_sysid.length))
                        message.forward_to_sysid = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.forward_to_sysid.push(reader.uint32());
                    } else
                        message.forward_to_sysid.push(reader.uint32());
                    break;
                case 28:
                    message.cm_sysid = reader.uint32();
                    break;
                case 30:
                    message.wg_token = reader.string();
                    break;
                case 15:
                    message.ip = reader.uint32();
                    break;
                case 29:
                    message.ip_v6 = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgProtoBufHeader message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgProtoBufHeader} CMsgProtoBufHeader
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgProtoBufHeader.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgProtoBufHeader message.
         * @function verify
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgProtoBufHeader.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.client_sessionid != null && message.hasOwnProperty("client_sessionid"))
                if (!$util.isInteger(message.client_sessionid))
                    return "client_sessionid: integer expected";
            if (message.routing_appid != null && message.hasOwnProperty("routing_appid"))
                if (!$util.isInteger(message.routing_appid))
                    return "routing_appid: integer expected";
            if (message.jobid_source != null && message.hasOwnProperty("jobid_source"))
                if (!$util.isInteger(message.jobid_source) && !(message.jobid_source && $util.isInteger(message.jobid_source.low) && $util.isInteger(message.jobid_source.high)))
                    return "jobid_source: integer|Long expected";
            if (message.jobid_target != null && message.hasOwnProperty("jobid_target"))
                if (!$util.isInteger(message.jobid_target) && !(message.jobid_target && $util.isInteger(message.jobid_target.low) && $util.isInteger(message.jobid_target.high)))
                    return "jobid_target: integer|Long expected";
            if (message.target_job_name != null && message.hasOwnProperty("target_job_name"))
                if (!$util.isString(message.target_job_name))
                    return "target_job_name: string expected";
            if (message.seq_num != null && message.hasOwnProperty("seq_num"))
                if (!$util.isInteger(message.seq_num))
                    return "seq_num: integer expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            if (message.error_message != null && message.hasOwnProperty("error_message"))
                if (!$util.isString(message.error_message))
                    return "error_message: string expected";
            if (message.auth_account_flags != null && message.hasOwnProperty("auth_account_flags"))
                if (!$util.isInteger(message.auth_account_flags))
                    return "auth_account_flags: integer expected";
            if (message.token_source != null && message.hasOwnProperty("token_source"))
                if (!$util.isInteger(message.token_source))
                    return "token_source: integer expected";
            if (message.admin_spoofing_user != null && message.hasOwnProperty("admin_spoofing_user"))
                if (typeof message.admin_spoofing_user !== "boolean")
                    return "admin_spoofing_user: boolean expected";
            if (message.transport_error != null && message.hasOwnProperty("transport_error"))
                if (!$util.isInteger(message.transport_error))
                    return "transport_error: integer expected";
            if (message.messageid != null && message.hasOwnProperty("messageid"))
                if (!$util.isInteger(message.messageid) && !(message.messageid && $util.isInteger(message.messageid.low) && $util.isInteger(message.messageid.high)))
                    return "messageid: integer|Long expected";
            if (message.publisher_group_id != null && message.hasOwnProperty("publisher_group_id"))
                if (!$util.isInteger(message.publisher_group_id))
                    return "publisher_group_id: integer expected";
            if (message.sysid != null && message.hasOwnProperty("sysid"))
                if (!$util.isInteger(message.sysid))
                    return "sysid: integer expected";
            if (message.trace_tag != null && message.hasOwnProperty("trace_tag"))
                if (!$util.isInteger(message.trace_tag) && !(message.trace_tag && $util.isInteger(message.trace_tag.low) && $util.isInteger(message.trace_tag.high)))
                    return "trace_tag: integer|Long expected";
            if (message.webapi_key_id != null && message.hasOwnProperty("webapi_key_id"))
                if (!$util.isInteger(message.webapi_key_id))
                    return "webapi_key_id: integer expected";
            if (message.is_from_external_source != null && message.hasOwnProperty("is_from_external_source"))
                if (typeof message.is_from_external_source !== "boolean")
                    return "is_from_external_source: boolean expected";
            if (message.forward_to_sysid != null && message.hasOwnProperty("forward_to_sysid")) {
                if (!Array.isArray(message.forward_to_sysid))
                    return "forward_to_sysid: array expected";
                for (var i = 0; i < message.forward_to_sysid.length; ++i)
                    if (!$util.isInteger(message.forward_to_sysid[i]))
                        return "forward_to_sysid: integer[] expected";
            }
            if (message.cm_sysid != null && message.hasOwnProperty("cm_sysid"))
                if (!$util.isInteger(message.cm_sysid))
                    return "cm_sysid: integer expected";
            if (message.wg_token != null && message.hasOwnProperty("wg_token"))
                if (!$util.isString(message.wg_token))
                    return "wg_token: string expected";
            if (message.ip != null && message.hasOwnProperty("ip")) {
                properties.ip_addr = 1;
                if (!$util.isInteger(message.ip))
                    return "ip: integer expected";
            }
            if (message.ip_v6 != null && message.hasOwnProperty("ip_v6")) {
                if (properties.ip_addr === 1)
                    return "ip_addr: multiple values";
                properties.ip_addr = 1;
                if (!(message.ip_v6 && typeof message.ip_v6.length === "number" || $util.isString(message.ip_v6)))
                    return "ip_v6: buffer expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgProtoBufHeader message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgProtoBufHeader} CMsgProtoBufHeader
         */
        CMsgProtoBufHeader.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgProtoBufHeader)
                return object;
            var message = new $root.CMsgProtoBufHeader();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.client_sessionid != null)
                message.client_sessionid = object.client_sessionid | 0;
            if (object.routing_appid != null)
                message.routing_appid = object.routing_appid >>> 0;
            if (object.jobid_source != null)
                if ($util.Long)
                    (message.jobid_source = $util.Long.fromValue(object.jobid_source)).unsigned = false;
                else if (typeof object.jobid_source === "string")
                    message.jobid_source = parseInt(object.jobid_source, 10);
                else if (typeof object.jobid_source === "number")
                    message.jobid_source = object.jobid_source;
                else if (typeof object.jobid_source === "object")
                    message.jobid_source = new $util.LongBits(object.jobid_source.low >>> 0, object.jobid_source.high >>> 0).toNumber();
            if (object.jobid_target != null)
                if ($util.Long)
                    (message.jobid_target = $util.Long.fromValue(object.jobid_target)).unsigned = false;
                else if (typeof object.jobid_target === "string")
                    message.jobid_target = parseInt(object.jobid_target, 10);
                else if (typeof object.jobid_target === "number")
                    message.jobid_target = object.jobid_target;
                else if (typeof object.jobid_target === "object")
                    message.jobid_target = new $util.LongBits(object.jobid_target.low >>> 0, object.jobid_target.high >>> 0).toNumber();
            if (object.target_job_name != null)
                message.target_job_name = String(object.target_job_name);
            if (object.seq_num != null)
                message.seq_num = object.seq_num | 0;
            if (object.eresult != null)
                message.eresult = object.eresult | 0;
            if (object.error_message != null)
                message.error_message = String(object.error_message);
            if (object.auth_account_flags != null)
                message.auth_account_flags = object.auth_account_flags >>> 0;
            if (object.token_source != null)
                message.token_source = object.token_source >>> 0;
            if (object.admin_spoofing_user != null)
                message.admin_spoofing_user = Boolean(object.admin_spoofing_user);
            if (object.transport_error != null)
                message.transport_error = object.transport_error | 0;
            if (object.messageid != null)
                if ($util.Long)
                    (message.messageid = $util.Long.fromValue(object.messageid)).unsigned = true;
                else if (typeof object.messageid === "string")
                    message.messageid = parseInt(object.messageid, 10);
                else if (typeof object.messageid === "number")
                    message.messageid = object.messageid;
                else if (typeof object.messageid === "object")
                    message.messageid = new $util.LongBits(object.messageid.low >>> 0, object.messageid.high >>> 0).toNumber(true);
            if (object.publisher_group_id != null)
                message.publisher_group_id = object.publisher_group_id >>> 0;
            if (object.sysid != null)
                message.sysid = object.sysid >>> 0;
            if (object.trace_tag != null)
                if ($util.Long)
                    (message.trace_tag = $util.Long.fromValue(object.trace_tag)).unsigned = true;
                else if (typeof object.trace_tag === "string")
                    message.trace_tag = parseInt(object.trace_tag, 10);
                else if (typeof object.trace_tag === "number")
                    message.trace_tag = object.trace_tag;
                else if (typeof object.trace_tag === "object")
                    message.trace_tag = new $util.LongBits(object.trace_tag.low >>> 0, object.trace_tag.high >>> 0).toNumber(true);
            if (object.webapi_key_id != null)
                message.webapi_key_id = object.webapi_key_id >>> 0;
            if (object.is_from_external_source != null)
                message.is_from_external_source = Boolean(object.is_from_external_source);
            if (object.forward_to_sysid) {
                if (!Array.isArray(object.forward_to_sysid))
                    throw TypeError(".CMsgProtoBufHeader.forward_to_sysid: array expected");
                message.forward_to_sysid = [];
                for (var i = 0; i < object.forward_to_sysid.length; ++i)
                    message.forward_to_sysid[i] = object.forward_to_sysid[i] >>> 0;
            }
            if (object.cm_sysid != null)
                message.cm_sysid = object.cm_sysid >>> 0;
            if (object.wg_token != null)
                message.wg_token = String(object.wg_token);
            if (object.ip != null)
                message.ip = object.ip >>> 0;
            if (object.ip_v6 != null)
                if (typeof object.ip_v6 === "string")
                    $util.base64.decode(object.ip_v6, message.ip_v6 = $util.newBuffer($util.base64.length(object.ip_v6)), 0);
                else if (object.ip_v6.length)
                    message.ip_v6 = object.ip_v6;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgProtoBufHeader message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {CMsgProtoBufHeader} message CMsgProtoBufHeader
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgProtoBufHeader.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.forward_to_sysid = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.client_sessionid = 0;
                object.routing_appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(-1, 2147483647, false);
                    object.jobid_source = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.jobid_source = options.longs === String ? "9223372036854775807" : 9223372036854776000;
                if ($util.Long) {
                    var long = new $util.Long(-1, 2147483647, false);
                    object.jobid_target = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.jobid_target = options.longs === String ? "9223372036854775807" : 9223372036854776000;
                object.target_job_name = "";
                object.eresult = 2;
                object.error_message = "";
                object.auth_account_flags = 0;
                object.transport_error = 1;
                if ($util.Long) {
                    var long = new $util.Long(-1, -1, true);
                    object.messageid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.messageid = options.longs === String ? "18446744073709551615" : 18446744073709552000;
                object.publisher_group_id = 0;
                object.sysid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.trace_tag = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.trace_tag = options.longs === String ? "0" : 0;
                object.token_source = 0;
                object.admin_spoofing_user = false;
                object.seq_num = 0;
                object.webapi_key_id = 0;
                object.is_from_external_source = false;
                object.cm_sysid = 0;
                object.wg_token = "";
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.client_sessionid != null && message.hasOwnProperty("client_sessionid"))
                object.client_sessionid = message.client_sessionid;
            if (message.routing_appid != null && message.hasOwnProperty("routing_appid"))
                object.routing_appid = message.routing_appid;
            if (message.jobid_source != null && message.hasOwnProperty("jobid_source"))
                if (typeof message.jobid_source === "number")
                    object.jobid_source = options.longs === String ? String(message.jobid_source) : message.jobid_source;
                else
                    object.jobid_source = options.longs === String ? $util.Long.prototype.toString.call(message.jobid_source) : options.longs === Number ? new $util.LongBits(message.jobid_source.low >>> 0, message.jobid_source.high >>> 0).toNumber() : message.jobid_source;
            if (message.jobid_target != null && message.hasOwnProperty("jobid_target"))
                if (typeof message.jobid_target === "number")
                    object.jobid_target = options.longs === String ? String(message.jobid_target) : message.jobid_target;
                else
                    object.jobid_target = options.longs === String ? $util.Long.prototype.toString.call(message.jobid_target) : options.longs === Number ? new $util.LongBits(message.jobid_target.low >>> 0, message.jobid_target.high >>> 0).toNumber() : message.jobid_target;
            if (message.target_job_name != null && message.hasOwnProperty("target_job_name"))
                object.target_job_name = message.target_job_name;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            if (message.error_message != null && message.hasOwnProperty("error_message"))
                object.error_message = message.error_message;
            if (message.ip != null && message.hasOwnProperty("ip")) {
                object.ip = message.ip;
                if (options.oneofs)
                    object.ip_addr = "ip";
            }
            if (message.auth_account_flags != null && message.hasOwnProperty("auth_account_flags"))
                object.auth_account_flags = message.auth_account_flags;
            if (message.transport_error != null && message.hasOwnProperty("transport_error"))
                object.transport_error = message.transport_error;
            if (message.messageid != null && message.hasOwnProperty("messageid"))
                if (typeof message.messageid === "number")
                    object.messageid = options.longs === String ? String(message.messageid) : message.messageid;
                else
                    object.messageid = options.longs === String ? $util.Long.prototype.toString.call(message.messageid) : options.longs === Number ? new $util.LongBits(message.messageid.low >>> 0, message.messageid.high >>> 0).toNumber(true) : message.messageid;
            if (message.publisher_group_id != null && message.hasOwnProperty("publisher_group_id"))
                object.publisher_group_id = message.publisher_group_id;
            if (message.sysid != null && message.hasOwnProperty("sysid"))
                object.sysid = message.sysid;
            if (message.trace_tag != null && message.hasOwnProperty("trace_tag"))
                if (typeof message.trace_tag === "number")
                    object.trace_tag = options.longs === String ? String(message.trace_tag) : message.trace_tag;
                else
                    object.trace_tag = options.longs === String ? $util.Long.prototype.toString.call(message.trace_tag) : options.longs === Number ? new $util.LongBits(message.trace_tag.low >>> 0, message.trace_tag.high >>> 0).toNumber(true) : message.trace_tag;
            if (message.token_source != null && message.hasOwnProperty("token_source"))
                object.token_source = message.token_source;
            if (message.admin_spoofing_user != null && message.hasOwnProperty("admin_spoofing_user"))
                object.admin_spoofing_user = message.admin_spoofing_user;
            if (message.seq_num != null && message.hasOwnProperty("seq_num"))
                object.seq_num = message.seq_num;
            if (message.webapi_key_id != null && message.hasOwnProperty("webapi_key_id"))
                object.webapi_key_id = message.webapi_key_id;
            if (message.is_from_external_source != null && message.hasOwnProperty("is_from_external_source"))
                object.is_from_external_source = message.is_from_external_source;
            if (message.forward_to_sysid && message.forward_to_sysid.length) {
                object.forward_to_sysid = [];
                for (var j = 0; j < message.forward_to_sysid.length; ++j)
                    object.forward_to_sysid[j] = message.forward_to_sysid[j];
            }
            if (message.cm_sysid != null && message.hasOwnProperty("cm_sysid"))
                object.cm_sysid = message.cm_sysid;
            if (message.ip_v6 != null && message.hasOwnProperty("ip_v6")) {
                object.ip_v6 = options.bytes === String ? $util.base64.encode(message.ip_v6, 0, message.ip_v6.length) : options.bytes === Array ? Array.prototype.slice.call(message.ip_v6) : message.ip_v6;
                if (options.oneofs)
                    object.ip_addr = "ip_v6";
            }
            if (message.wg_token != null && message.hasOwnProperty("wg_token"))
                object.wg_token = message.wg_token;
            return object;
        };
    
        /**
         * Converts this CMsgProtoBufHeader to JSON.
         * @function toJSON
         * @memberof CMsgProtoBufHeader
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgProtoBufHeader.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgProtoBufHeader;
    })();
    
    $root.CMsgMulti = (function() {
    
        /**
         * Properties of a CMsgMulti.
         * @exports ICMsgMulti
         * @interface ICMsgMulti
         * @property {number|null} [size_unzipped] CMsgMulti size_unzipped
         * @property {Uint8Array|null} [message_body] CMsgMulti message_body
         */
    
        /**
         * Constructs a new CMsgMulti.
         * @exports CMsgMulti
         * @classdesc Represents a CMsgMulti.
         * @implements ICMsgMulti
         * @constructor
         * @param {ICMsgMulti=} [properties] Properties to set
         */
        function CMsgMulti(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgMulti size_unzipped.
         * @member {number} size_unzipped
         * @memberof CMsgMulti
         * @instance
         */
        CMsgMulti.prototype.size_unzipped = 0;
    
        /**
         * CMsgMulti message_body.
         * @member {Uint8Array} message_body
         * @memberof CMsgMulti
         * @instance
         */
        CMsgMulti.prototype.message_body = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgMulti instance using the specified properties.
         * @function create
         * @memberof CMsgMulti
         * @static
         * @param {ICMsgMulti=} [properties] Properties to set
         * @returns {CMsgMulti} CMsgMulti instance
         */
        CMsgMulti.create = function create(properties) {
            return new CMsgMulti(properties);
        };
    
        /**
         * Encodes the specified CMsgMulti message. Does not implicitly {@link CMsgMulti.verify|verify} messages.
         * @function encode
         * @memberof CMsgMulti
         * @static
         * @param {ICMsgMulti} message CMsgMulti message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMulti.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.size_unzipped != null && message.hasOwnProperty("size_unzipped"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.size_unzipped);
            if (message.message_body != null && message.hasOwnProperty("message_body"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.message_body);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgMulti message, length delimited. Does not implicitly {@link CMsgMulti.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgMulti
         * @static
         * @param {ICMsgMulti} message CMsgMulti message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMulti.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgMulti message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgMulti
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgMulti} CMsgMulti
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMulti.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgMulti();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.size_unzipped = reader.uint32();
                    break;
                case 2:
                    message.message_body = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgMulti message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgMulti
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgMulti} CMsgMulti
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMulti.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgMulti message.
         * @function verify
         * @memberof CMsgMulti
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgMulti.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.size_unzipped != null && message.hasOwnProperty("size_unzipped"))
                if (!$util.isInteger(message.size_unzipped))
                    return "size_unzipped: integer expected";
            if (message.message_body != null && message.hasOwnProperty("message_body"))
                if (!(message.message_body && typeof message.message_body.length === "number" || $util.isString(message.message_body)))
                    return "message_body: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgMulti message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgMulti
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgMulti} CMsgMulti
         */
        CMsgMulti.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgMulti)
                return object;
            var message = new $root.CMsgMulti();
            if (object.size_unzipped != null)
                message.size_unzipped = object.size_unzipped >>> 0;
            if (object.message_body != null)
                if (typeof object.message_body === "string")
                    $util.base64.decode(object.message_body, message.message_body = $util.newBuffer($util.base64.length(object.message_body)), 0);
                else if (object.message_body.length)
                    message.message_body = object.message_body;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgMulti message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgMulti
         * @static
         * @param {CMsgMulti} message CMsgMulti
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgMulti.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.size_unzipped = 0;
                if (options.bytes === String)
                    object.message_body = "";
                else {
                    object.message_body = [];
                    if (options.bytes !== Array)
                        object.message_body = $util.newBuffer(object.message_body);
                }
            }
            if (message.size_unzipped != null && message.hasOwnProperty("size_unzipped"))
                object.size_unzipped = message.size_unzipped;
            if (message.message_body != null && message.hasOwnProperty("message_body"))
                object.message_body = options.bytes === String ? $util.base64.encode(message.message_body, 0, message.message_body.length) : options.bytes === Array ? Array.prototype.slice.call(message.message_body) : message.message_body;
            return object;
        };
    
        /**
         * Converts this CMsgMulti to JSON.
         * @function toJSON
         * @memberof CMsgMulti
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgMulti.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgMulti;
    })();
    
    $root.CMsgProtobufWrapped = (function() {
    
        /**
         * Properties of a CMsgProtobufWrapped.
         * @exports ICMsgProtobufWrapped
         * @interface ICMsgProtobufWrapped
         * @property {Uint8Array|null} [message_body] CMsgProtobufWrapped message_body
         */
    
        /**
         * Constructs a new CMsgProtobufWrapped.
         * @exports CMsgProtobufWrapped
         * @classdesc Represents a CMsgProtobufWrapped.
         * @implements ICMsgProtobufWrapped
         * @constructor
         * @param {ICMsgProtobufWrapped=} [properties] Properties to set
         */
        function CMsgProtobufWrapped(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgProtobufWrapped message_body.
         * @member {Uint8Array} message_body
         * @memberof CMsgProtobufWrapped
         * @instance
         */
        CMsgProtobufWrapped.prototype.message_body = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgProtobufWrapped instance using the specified properties.
         * @function create
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {ICMsgProtobufWrapped=} [properties] Properties to set
         * @returns {CMsgProtobufWrapped} CMsgProtobufWrapped instance
         */
        CMsgProtobufWrapped.create = function create(properties) {
            return new CMsgProtobufWrapped(properties);
        };
    
        /**
         * Encodes the specified CMsgProtobufWrapped message. Does not implicitly {@link CMsgProtobufWrapped.verify|verify} messages.
         * @function encode
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {ICMsgProtobufWrapped} message CMsgProtobufWrapped message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgProtobufWrapped.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.message_body != null && message.hasOwnProperty("message_body"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.message_body);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgProtobufWrapped message, length delimited. Does not implicitly {@link CMsgProtobufWrapped.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {ICMsgProtobufWrapped} message CMsgProtobufWrapped message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgProtobufWrapped.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgProtobufWrapped message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgProtobufWrapped} CMsgProtobufWrapped
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgProtobufWrapped.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgProtobufWrapped();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.message_body = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgProtobufWrapped message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgProtobufWrapped} CMsgProtobufWrapped
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgProtobufWrapped.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgProtobufWrapped message.
         * @function verify
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgProtobufWrapped.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.message_body != null && message.hasOwnProperty("message_body"))
                if (!(message.message_body && typeof message.message_body.length === "number" || $util.isString(message.message_body)))
                    return "message_body: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgProtobufWrapped message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgProtobufWrapped} CMsgProtobufWrapped
         */
        CMsgProtobufWrapped.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgProtobufWrapped)
                return object;
            var message = new $root.CMsgProtobufWrapped();
            if (object.message_body != null)
                if (typeof object.message_body === "string")
                    $util.base64.decode(object.message_body, message.message_body = $util.newBuffer($util.base64.length(object.message_body)), 0);
                else if (object.message_body.length)
                    message.message_body = object.message_body;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgProtobufWrapped message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {CMsgProtobufWrapped} message CMsgProtobufWrapped
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgProtobufWrapped.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.message_body = "";
                else {
                    object.message_body = [];
                    if (options.bytes !== Array)
                        object.message_body = $util.newBuffer(object.message_body);
                }
            if (message.message_body != null && message.hasOwnProperty("message_body"))
                object.message_body = options.bytes === String ? $util.base64.encode(message.message_body, 0, message.message_body.length) : options.bytes === Array ? Array.prototype.slice.call(message.message_body) : message.message_body;
            return object;
        };
    
        /**
         * Converts this CMsgProtobufWrapped to JSON.
         * @function toJSON
         * @memberof CMsgProtobufWrapped
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgProtobufWrapped.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgProtobufWrapped;
    })();
    
    $root.CMsgAuthTicket = (function() {
    
        /**
         * Properties of a CMsgAuthTicket.
         * @exports ICMsgAuthTicket
         * @interface ICMsgAuthTicket
         * @property {number|null} [estate] CMsgAuthTicket estate
         * @property {number|null} [eresult] CMsgAuthTicket eresult
         * @property {number|Long|null} [steamid] CMsgAuthTicket steamid
         * @property {number|Long|null} [gameid] CMsgAuthTicket gameid
         * @property {number|null} [h_steam_pipe] CMsgAuthTicket h_steam_pipe
         * @property {number|null} [ticket_crc] CMsgAuthTicket ticket_crc
         * @property {Uint8Array|null} [ticket] CMsgAuthTicket ticket
         */
    
        /**
         * Constructs a new CMsgAuthTicket.
         * @exports CMsgAuthTicket
         * @classdesc Represents a CMsgAuthTicket.
         * @implements ICMsgAuthTicket
         * @constructor
         * @param {ICMsgAuthTicket=} [properties] Properties to set
         */
        function CMsgAuthTicket(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAuthTicket estate.
         * @member {number} estate
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.estate = 0;
    
        /**
         * CMsgAuthTicket eresult.
         * @member {number} eresult
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.eresult = 2;
    
        /**
         * CMsgAuthTicket steamid.
         * @member {number|Long} steamid
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgAuthTicket gameid.
         * @member {number|Long} gameid
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.gameid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgAuthTicket h_steam_pipe.
         * @member {number} h_steam_pipe
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.h_steam_pipe = 0;
    
        /**
         * CMsgAuthTicket ticket_crc.
         * @member {number} ticket_crc
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.ticket_crc = 0;
    
        /**
         * CMsgAuthTicket ticket.
         * @member {Uint8Array} ticket
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.ticket = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgAuthTicket instance using the specified properties.
         * @function create
         * @memberof CMsgAuthTicket
         * @static
         * @param {ICMsgAuthTicket=} [properties] Properties to set
         * @returns {CMsgAuthTicket} CMsgAuthTicket instance
         */
        CMsgAuthTicket.create = function create(properties) {
            return new CMsgAuthTicket(properties);
        };
    
        /**
         * Encodes the specified CMsgAuthTicket message. Does not implicitly {@link CMsgAuthTicket.verify|verify} messages.
         * @function encode
         * @memberof CMsgAuthTicket
         * @static
         * @param {ICMsgAuthTicket} message CMsgAuthTicket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAuthTicket.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.estate != null && message.hasOwnProperty("estate"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.estate);
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.eresult);
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.steamid);
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.gameid);
            if (message.h_steam_pipe != null && message.hasOwnProperty("h_steam_pipe"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.h_steam_pipe);
            if (message.ticket_crc != null && message.hasOwnProperty("ticket_crc"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ticket_crc);
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.ticket);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAuthTicket message, length delimited. Does not implicitly {@link CMsgAuthTicket.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAuthTicket
         * @static
         * @param {ICMsgAuthTicket} message CMsgAuthTicket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAuthTicket.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAuthTicket message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAuthTicket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAuthTicket} CMsgAuthTicket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAuthTicket.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAuthTicket();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.estate = reader.uint32();
                    break;
                case 2:
                    message.eresult = reader.uint32();
                    break;
                case 3:
                    message.steamid = reader.fixed64();
                    break;
                case 4:
                    message.gameid = reader.fixed64();
                    break;
                case 5:
                    message.h_steam_pipe = reader.uint32();
                    break;
                case 6:
                    message.ticket_crc = reader.uint32();
                    break;
                case 7:
                    message.ticket = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAuthTicket message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAuthTicket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAuthTicket} CMsgAuthTicket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAuthTicket.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAuthTicket message.
         * @function verify
         * @memberof CMsgAuthTicket
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAuthTicket.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.estate != null && message.hasOwnProperty("estate"))
                if (!$util.isInteger(message.estate))
                    return "estate: integer expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                if (!$util.isInteger(message.gameid) && !(message.gameid && $util.isInteger(message.gameid.low) && $util.isInteger(message.gameid.high)))
                    return "gameid: integer|Long expected";
            if (message.h_steam_pipe != null && message.hasOwnProperty("h_steam_pipe"))
                if (!$util.isInteger(message.h_steam_pipe))
                    return "h_steam_pipe: integer expected";
            if (message.ticket_crc != null && message.hasOwnProperty("ticket_crc"))
                if (!$util.isInteger(message.ticket_crc))
                    return "ticket_crc: integer expected";
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                if (!(message.ticket && typeof message.ticket.length === "number" || $util.isString(message.ticket)))
                    return "ticket: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgAuthTicket message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAuthTicket
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAuthTicket} CMsgAuthTicket
         */
        CMsgAuthTicket.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAuthTicket)
                return object;
            var message = new $root.CMsgAuthTicket();
            if (object.estate != null)
                message.estate = object.estate >>> 0;
            if (object.eresult != null)
                message.eresult = object.eresult >>> 0;
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.gameid != null)
                if ($util.Long)
                    (message.gameid = $util.Long.fromValue(object.gameid)).unsigned = false;
                else if (typeof object.gameid === "string")
                    message.gameid = parseInt(object.gameid, 10);
                else if (typeof object.gameid === "number")
                    message.gameid = object.gameid;
                else if (typeof object.gameid === "object")
                    message.gameid = new $util.LongBits(object.gameid.low >>> 0, object.gameid.high >>> 0).toNumber();
            if (object.h_steam_pipe != null)
                message.h_steam_pipe = object.h_steam_pipe >>> 0;
            if (object.ticket_crc != null)
                message.ticket_crc = object.ticket_crc >>> 0;
            if (object.ticket != null)
                if (typeof object.ticket === "string")
                    $util.base64.decode(object.ticket, message.ticket = $util.newBuffer($util.base64.length(object.ticket)), 0);
                else if (object.ticket.length)
                    message.ticket = object.ticket;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAuthTicket message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAuthTicket
         * @static
         * @param {CMsgAuthTicket} message CMsgAuthTicket
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAuthTicket.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.estate = 0;
                object.eresult = 2;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.gameid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gameid = options.longs === String ? "0" : 0;
                object.h_steam_pipe = 0;
                object.ticket_crc = 0;
                if (options.bytes === String)
                    object.ticket = "";
                else {
                    object.ticket = [];
                    if (options.bytes !== Array)
                        object.ticket = $util.newBuffer(object.ticket);
                }
            }
            if (message.estate != null && message.hasOwnProperty("estate"))
                object.estate = message.estate;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                if (typeof message.gameid === "number")
                    object.gameid = options.longs === String ? String(message.gameid) : message.gameid;
                else
                    object.gameid = options.longs === String ? $util.Long.prototype.toString.call(message.gameid) : options.longs === Number ? new $util.LongBits(message.gameid.low >>> 0, message.gameid.high >>> 0).toNumber() : message.gameid;
            if (message.h_steam_pipe != null && message.hasOwnProperty("h_steam_pipe"))
                object.h_steam_pipe = message.h_steam_pipe;
            if (message.ticket_crc != null && message.hasOwnProperty("ticket_crc"))
                object.ticket_crc = message.ticket_crc;
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                object.ticket = options.bytes === String ? $util.base64.encode(message.ticket, 0, message.ticket.length) : options.bytes === Array ? Array.prototype.slice.call(message.ticket) : message.ticket;
            return object;
        };
    
        /**
         * Converts this CMsgAuthTicket to JSON.
         * @function toJSON
         * @memberof CMsgAuthTicket
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAuthTicket.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAuthTicket;
    })();
    
    $root.CCDDBAppDetailCommon = (function() {
    
        /**
         * Properties of a CCDDBAppDetailCommon.
         * @exports ICCDDBAppDetailCommon
         * @interface ICCDDBAppDetailCommon
         * @property {number|null} [appid] CCDDBAppDetailCommon appid
         * @property {string|null} [name] CCDDBAppDetailCommon name
         * @property {string|null} [icon] CCDDBAppDetailCommon icon
         * @property {string|null} [logo] CCDDBAppDetailCommon logo
         * @property {string|null} [logo_small] CCDDBAppDetailCommon logo_small
         * @property {boolean|null} [tool] CCDDBAppDetailCommon tool
         * @property {boolean|null} [demo] CCDDBAppDetailCommon demo
         * @property {boolean|null} [media] CCDDBAppDetailCommon media
         * @property {boolean|null} [community_visible_stats] CCDDBAppDetailCommon community_visible_stats
         * @property {string|null} [friendly_name] CCDDBAppDetailCommon friendly_name
         * @property {string|null} [propagation] CCDDBAppDetailCommon propagation
         * @property {boolean|null} [has_adult_content] CCDDBAppDetailCommon has_adult_content
         */
    
        /**
         * Constructs a new CCDDBAppDetailCommon.
         * @exports CCDDBAppDetailCommon
         * @classdesc Represents a CCDDBAppDetailCommon.
         * @implements ICCDDBAppDetailCommon
         * @constructor
         * @param {ICCDDBAppDetailCommon=} [properties] Properties to set
         */
        function CCDDBAppDetailCommon(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCDDBAppDetailCommon appid.
         * @member {number} appid
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.appid = 0;
    
        /**
         * CCDDBAppDetailCommon name.
         * @member {string} name
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.name = "";
    
        /**
         * CCDDBAppDetailCommon icon.
         * @member {string} icon
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.icon = "";
    
        /**
         * CCDDBAppDetailCommon logo.
         * @member {string} logo
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.logo = "";
    
        /**
         * CCDDBAppDetailCommon logo_small.
         * @member {string} logo_small
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.logo_small = "";
    
        /**
         * CCDDBAppDetailCommon tool.
         * @member {boolean} tool
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.tool = false;
    
        /**
         * CCDDBAppDetailCommon demo.
         * @member {boolean} demo
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.demo = false;
    
        /**
         * CCDDBAppDetailCommon media.
         * @member {boolean} media
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.media = false;
    
        /**
         * CCDDBAppDetailCommon community_visible_stats.
         * @member {boolean} community_visible_stats
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.community_visible_stats = false;
    
        /**
         * CCDDBAppDetailCommon friendly_name.
         * @member {string} friendly_name
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.friendly_name = "";
    
        /**
         * CCDDBAppDetailCommon propagation.
         * @member {string} propagation
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.propagation = "";
    
        /**
         * CCDDBAppDetailCommon has_adult_content.
         * @member {boolean} has_adult_content
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.has_adult_content = false;
    
        /**
         * Creates a new CCDDBAppDetailCommon instance using the specified properties.
         * @function create
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {ICCDDBAppDetailCommon=} [properties] Properties to set
         * @returns {CCDDBAppDetailCommon} CCDDBAppDetailCommon instance
         */
        CCDDBAppDetailCommon.create = function create(properties) {
            return new CCDDBAppDetailCommon(properties);
        };
    
        /**
         * Encodes the specified CCDDBAppDetailCommon message. Does not implicitly {@link CCDDBAppDetailCommon.verify|verify} messages.
         * @function encode
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {ICCDDBAppDetailCommon} message CCDDBAppDetailCommon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCDDBAppDetailCommon.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.icon != null && message.hasOwnProperty("icon"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.icon);
            if (message.logo != null && message.hasOwnProperty("logo"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.logo);
            if (message.logo_small != null && message.hasOwnProperty("logo_small"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.logo_small);
            if (message.tool != null && message.hasOwnProperty("tool"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.tool);
            if (message.demo != null && message.hasOwnProperty("demo"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.demo);
            if (message.media != null && message.hasOwnProperty("media"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.media);
            if (message.community_visible_stats != null && message.hasOwnProperty("community_visible_stats"))
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.community_visible_stats);
            if (message.friendly_name != null && message.hasOwnProperty("friendly_name"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.friendly_name);
            if (message.propagation != null && message.hasOwnProperty("propagation"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.propagation);
            if (message.has_adult_content != null && message.hasOwnProperty("has_adult_content"))
                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.has_adult_content);
            return writer;
        };
    
        /**
         * Encodes the specified CCDDBAppDetailCommon message, length delimited. Does not implicitly {@link CCDDBAppDetailCommon.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {ICCDDBAppDetailCommon} message CCDDBAppDetailCommon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCDDBAppDetailCommon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCDDBAppDetailCommon message from the specified reader or buffer.
         * @function decode
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCDDBAppDetailCommon} CCDDBAppDetailCommon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCDDBAppDetailCommon.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCDDBAppDetailCommon();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.icon = reader.string();
                    break;
                case 4:
                    message.logo = reader.string();
                    break;
                case 5:
                    message.logo_small = reader.string();
                    break;
                case 6:
                    message.tool = reader.bool();
                    break;
                case 7:
                    message.demo = reader.bool();
                    break;
                case 8:
                    message.media = reader.bool();
                    break;
                case 9:
                    message.community_visible_stats = reader.bool();
                    break;
                case 10:
                    message.friendly_name = reader.string();
                    break;
                case 11:
                    message.propagation = reader.string();
                    break;
                case 12:
                    message.has_adult_content = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCDDBAppDetailCommon message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCDDBAppDetailCommon} CCDDBAppDetailCommon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCDDBAppDetailCommon.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCDDBAppDetailCommon message.
         * @function verify
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCDDBAppDetailCommon.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.icon != null && message.hasOwnProperty("icon"))
                if (!$util.isString(message.icon))
                    return "icon: string expected";
            if (message.logo != null && message.hasOwnProperty("logo"))
                if (!$util.isString(message.logo))
                    return "logo: string expected";
            if (message.logo_small != null && message.hasOwnProperty("logo_small"))
                if (!$util.isString(message.logo_small))
                    return "logo_small: string expected";
            if (message.tool != null && message.hasOwnProperty("tool"))
                if (typeof message.tool !== "boolean")
                    return "tool: boolean expected";
            if (message.demo != null && message.hasOwnProperty("demo"))
                if (typeof message.demo !== "boolean")
                    return "demo: boolean expected";
            if (message.media != null && message.hasOwnProperty("media"))
                if (typeof message.media !== "boolean")
                    return "media: boolean expected";
            if (message.community_visible_stats != null && message.hasOwnProperty("community_visible_stats"))
                if (typeof message.community_visible_stats !== "boolean")
                    return "community_visible_stats: boolean expected";
            if (message.friendly_name != null && message.hasOwnProperty("friendly_name"))
                if (!$util.isString(message.friendly_name))
                    return "friendly_name: string expected";
            if (message.propagation != null && message.hasOwnProperty("propagation"))
                if (!$util.isString(message.propagation))
                    return "propagation: string expected";
            if (message.has_adult_content != null && message.hasOwnProperty("has_adult_content"))
                if (typeof message.has_adult_content !== "boolean")
                    return "has_adult_content: boolean expected";
            return null;
        };
    
        /**
         * Creates a CCDDBAppDetailCommon message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCDDBAppDetailCommon} CCDDBAppDetailCommon
         */
        CCDDBAppDetailCommon.fromObject = function fromObject(object) {
            if (object instanceof $root.CCDDBAppDetailCommon)
                return object;
            var message = new $root.CCDDBAppDetailCommon();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.icon != null)
                message.icon = String(object.icon);
            if (object.logo != null)
                message.logo = String(object.logo);
            if (object.logo_small != null)
                message.logo_small = String(object.logo_small);
            if (object.tool != null)
                message.tool = Boolean(object.tool);
            if (object.demo != null)
                message.demo = Boolean(object.demo);
            if (object.media != null)
                message.media = Boolean(object.media);
            if (object.community_visible_stats != null)
                message.community_visible_stats = Boolean(object.community_visible_stats);
            if (object.friendly_name != null)
                message.friendly_name = String(object.friendly_name);
            if (object.propagation != null)
                message.propagation = String(object.propagation);
            if (object.has_adult_content != null)
                message.has_adult_content = Boolean(object.has_adult_content);
            return message;
        };
    
        /**
         * Creates a plain object from a CCDDBAppDetailCommon message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {CCDDBAppDetailCommon} message CCDDBAppDetailCommon
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCDDBAppDetailCommon.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                object.name = "";
                object.icon = "";
                object.logo = "";
                object.logo_small = "";
                object.tool = false;
                object.demo = false;
                object.media = false;
                object.community_visible_stats = false;
                object.friendly_name = "";
                object.propagation = "";
                object.has_adult_content = false;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.icon != null && message.hasOwnProperty("icon"))
                object.icon = message.icon;
            if (message.logo != null && message.hasOwnProperty("logo"))
                object.logo = message.logo;
            if (message.logo_small != null && message.hasOwnProperty("logo_small"))
                object.logo_small = message.logo_small;
            if (message.tool != null && message.hasOwnProperty("tool"))
                object.tool = message.tool;
            if (message.demo != null && message.hasOwnProperty("demo"))
                object.demo = message.demo;
            if (message.media != null && message.hasOwnProperty("media"))
                object.media = message.media;
            if (message.community_visible_stats != null && message.hasOwnProperty("community_visible_stats"))
                object.community_visible_stats = message.community_visible_stats;
            if (message.friendly_name != null && message.hasOwnProperty("friendly_name"))
                object.friendly_name = message.friendly_name;
            if (message.propagation != null && message.hasOwnProperty("propagation"))
                object.propagation = message.propagation;
            if (message.has_adult_content != null && message.hasOwnProperty("has_adult_content"))
                object.has_adult_content = message.has_adult_content;
            return object;
        };
    
        /**
         * Converts this CCDDBAppDetailCommon to JSON.
         * @function toJSON
         * @memberof CCDDBAppDetailCommon
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCDDBAppDetailCommon.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCDDBAppDetailCommon;
    })();
    
    $root.CMsgAppRights = (function() {
    
        /**
         * Properties of a CMsgAppRights.
         * @exports ICMsgAppRights
         * @interface ICMsgAppRights
         * @property {boolean|null} [edit_info] CMsgAppRights edit_info
         * @property {boolean|null} [publish] CMsgAppRights publish
         * @property {boolean|null} [view_error_data] CMsgAppRights view_error_data
         * @property {boolean|null} [download] CMsgAppRights download
         * @property {boolean|null} [upload_cdkeys] CMsgAppRights upload_cdkeys
         * @property {boolean|null} [generate_cdkeys] CMsgAppRights generate_cdkeys
         * @property {boolean|null} [view_financials] CMsgAppRights view_financials
         * @property {boolean|null} [manage_ceg] CMsgAppRights manage_ceg
         * @property {boolean|null} [manage_signing] CMsgAppRights manage_signing
         * @property {boolean|null} [manage_cdkeys] CMsgAppRights manage_cdkeys
         * @property {boolean|null} [edit_marketing] CMsgAppRights edit_marketing
         * @property {boolean|null} [economy_support] CMsgAppRights economy_support
         * @property {boolean|null} [economy_support_supervisor] CMsgAppRights economy_support_supervisor
         * @property {boolean|null} [manage_pricing] CMsgAppRights manage_pricing
         * @property {boolean|null} [broadcast_live] CMsgAppRights broadcast_live
         */
    
        /**
         * Constructs a new CMsgAppRights.
         * @exports CMsgAppRights
         * @classdesc Represents a CMsgAppRights.
         * @implements ICMsgAppRights
         * @constructor
         * @param {ICMsgAppRights=} [properties] Properties to set
         */
        function CMsgAppRights(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAppRights edit_info.
         * @member {boolean} edit_info
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.edit_info = false;
    
        /**
         * CMsgAppRights publish.
         * @member {boolean} publish
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.publish = false;
    
        /**
         * CMsgAppRights view_error_data.
         * @member {boolean} view_error_data
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.view_error_data = false;
    
        /**
         * CMsgAppRights download.
         * @member {boolean} download
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.download = false;
    
        /**
         * CMsgAppRights upload_cdkeys.
         * @member {boolean} upload_cdkeys
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.upload_cdkeys = false;
    
        /**
         * CMsgAppRights generate_cdkeys.
         * @member {boolean} generate_cdkeys
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.generate_cdkeys = false;
    
        /**
         * CMsgAppRights view_financials.
         * @member {boolean} view_financials
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.view_financials = false;
    
        /**
         * CMsgAppRights manage_ceg.
         * @member {boolean} manage_ceg
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.manage_ceg = false;
    
        /**
         * CMsgAppRights manage_signing.
         * @member {boolean} manage_signing
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.manage_signing = false;
    
        /**
         * CMsgAppRights manage_cdkeys.
         * @member {boolean} manage_cdkeys
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.manage_cdkeys = false;
    
        /**
         * CMsgAppRights edit_marketing.
         * @member {boolean} edit_marketing
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.edit_marketing = false;
    
        /**
         * CMsgAppRights economy_support.
         * @member {boolean} economy_support
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.economy_support = false;
    
        /**
         * CMsgAppRights economy_support_supervisor.
         * @member {boolean} economy_support_supervisor
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.economy_support_supervisor = false;
    
        /**
         * CMsgAppRights manage_pricing.
         * @member {boolean} manage_pricing
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.manage_pricing = false;
    
        /**
         * CMsgAppRights broadcast_live.
         * @member {boolean} broadcast_live
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.broadcast_live = false;
    
        /**
         * Creates a new CMsgAppRights instance using the specified properties.
         * @function create
         * @memberof CMsgAppRights
         * @static
         * @param {ICMsgAppRights=} [properties] Properties to set
         * @returns {CMsgAppRights} CMsgAppRights instance
         */
        CMsgAppRights.create = function create(properties) {
            return new CMsgAppRights(properties);
        };
    
        /**
         * Encodes the specified CMsgAppRights message. Does not implicitly {@link CMsgAppRights.verify|verify} messages.
         * @function encode
         * @memberof CMsgAppRights
         * @static
         * @param {ICMsgAppRights} message CMsgAppRights message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAppRights.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.edit_info != null && message.hasOwnProperty("edit_info"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.edit_info);
            if (message.publish != null && message.hasOwnProperty("publish"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.publish);
            if (message.view_error_data != null && message.hasOwnProperty("view_error_data"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.view_error_data);
            if (message.download != null && message.hasOwnProperty("download"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.download);
            if (message.upload_cdkeys != null && message.hasOwnProperty("upload_cdkeys"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.upload_cdkeys);
            if (message.generate_cdkeys != null && message.hasOwnProperty("generate_cdkeys"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.generate_cdkeys);
            if (message.view_financials != null && message.hasOwnProperty("view_financials"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.view_financials);
            if (message.manage_ceg != null && message.hasOwnProperty("manage_ceg"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.manage_ceg);
            if (message.manage_signing != null && message.hasOwnProperty("manage_signing"))
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.manage_signing);
            if (message.manage_cdkeys != null && message.hasOwnProperty("manage_cdkeys"))
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.manage_cdkeys);
            if (message.edit_marketing != null && message.hasOwnProperty("edit_marketing"))
                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.edit_marketing);
            if (message.economy_support != null && message.hasOwnProperty("economy_support"))
                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.economy_support);
            if (message.economy_support_supervisor != null && message.hasOwnProperty("economy_support_supervisor"))
                writer.uint32(/* id 13, wireType 0 =*/104).bool(message.economy_support_supervisor);
            if (message.manage_pricing != null && message.hasOwnProperty("manage_pricing"))
                writer.uint32(/* id 14, wireType 0 =*/112).bool(message.manage_pricing);
            if (message.broadcast_live != null && message.hasOwnProperty("broadcast_live"))
                writer.uint32(/* id 15, wireType 0 =*/120).bool(message.broadcast_live);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAppRights message, length delimited. Does not implicitly {@link CMsgAppRights.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAppRights
         * @static
         * @param {ICMsgAppRights} message CMsgAppRights message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAppRights.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAppRights message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAppRights
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAppRights} CMsgAppRights
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAppRights.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAppRights();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.edit_info = reader.bool();
                    break;
                case 2:
                    message.publish = reader.bool();
                    break;
                case 3:
                    message.view_error_data = reader.bool();
                    break;
                case 4:
                    message.download = reader.bool();
                    break;
                case 5:
                    message.upload_cdkeys = reader.bool();
                    break;
                case 6:
                    message.generate_cdkeys = reader.bool();
                    break;
                case 7:
                    message.view_financials = reader.bool();
                    break;
                case 8:
                    message.manage_ceg = reader.bool();
                    break;
                case 9:
                    message.manage_signing = reader.bool();
                    break;
                case 10:
                    message.manage_cdkeys = reader.bool();
                    break;
                case 11:
                    message.edit_marketing = reader.bool();
                    break;
                case 12:
                    message.economy_support = reader.bool();
                    break;
                case 13:
                    message.economy_support_supervisor = reader.bool();
                    break;
                case 14:
                    message.manage_pricing = reader.bool();
                    break;
                case 15:
                    message.broadcast_live = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAppRights message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAppRights
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAppRights} CMsgAppRights
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAppRights.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAppRights message.
         * @function verify
         * @memberof CMsgAppRights
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAppRights.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.edit_info != null && message.hasOwnProperty("edit_info"))
                if (typeof message.edit_info !== "boolean")
                    return "edit_info: boolean expected";
            if (message.publish != null && message.hasOwnProperty("publish"))
                if (typeof message.publish !== "boolean")
                    return "publish: boolean expected";
            if (message.view_error_data != null && message.hasOwnProperty("view_error_data"))
                if (typeof message.view_error_data !== "boolean")
                    return "view_error_data: boolean expected";
            if (message.download != null && message.hasOwnProperty("download"))
                if (typeof message.download !== "boolean")
                    return "download: boolean expected";
            if (message.upload_cdkeys != null && message.hasOwnProperty("upload_cdkeys"))
                if (typeof message.upload_cdkeys !== "boolean")
                    return "upload_cdkeys: boolean expected";
            if (message.generate_cdkeys != null && message.hasOwnProperty("generate_cdkeys"))
                if (typeof message.generate_cdkeys !== "boolean")
                    return "generate_cdkeys: boolean expected";
            if (message.view_financials != null && message.hasOwnProperty("view_financials"))
                if (typeof message.view_financials !== "boolean")
                    return "view_financials: boolean expected";
            if (message.manage_ceg != null && message.hasOwnProperty("manage_ceg"))
                if (typeof message.manage_ceg !== "boolean")
                    return "manage_ceg: boolean expected";
            if (message.manage_signing != null && message.hasOwnProperty("manage_signing"))
                if (typeof message.manage_signing !== "boolean")
                    return "manage_signing: boolean expected";
            if (message.manage_cdkeys != null && message.hasOwnProperty("manage_cdkeys"))
                if (typeof message.manage_cdkeys !== "boolean")
                    return "manage_cdkeys: boolean expected";
            if (message.edit_marketing != null && message.hasOwnProperty("edit_marketing"))
                if (typeof message.edit_marketing !== "boolean")
                    return "edit_marketing: boolean expected";
            if (message.economy_support != null && message.hasOwnProperty("economy_support"))
                if (typeof message.economy_support !== "boolean")
                    return "economy_support: boolean expected";
            if (message.economy_support_supervisor != null && message.hasOwnProperty("economy_support_supervisor"))
                if (typeof message.economy_support_supervisor !== "boolean")
                    return "economy_support_supervisor: boolean expected";
            if (message.manage_pricing != null && message.hasOwnProperty("manage_pricing"))
                if (typeof message.manage_pricing !== "boolean")
                    return "manage_pricing: boolean expected";
            if (message.broadcast_live != null && message.hasOwnProperty("broadcast_live"))
                if (typeof message.broadcast_live !== "boolean")
                    return "broadcast_live: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgAppRights message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAppRights
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAppRights} CMsgAppRights
         */
        CMsgAppRights.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAppRights)
                return object;
            var message = new $root.CMsgAppRights();
            if (object.edit_info != null)
                message.edit_info = Boolean(object.edit_info);
            if (object.publish != null)
                message.publish = Boolean(object.publish);
            if (object.view_error_data != null)
                message.view_error_data = Boolean(object.view_error_data);
            if (object.download != null)
                message.download = Boolean(object.download);
            if (object.upload_cdkeys != null)
                message.upload_cdkeys = Boolean(object.upload_cdkeys);
            if (object.generate_cdkeys != null)
                message.generate_cdkeys = Boolean(object.generate_cdkeys);
            if (object.view_financials != null)
                message.view_financials = Boolean(object.view_financials);
            if (object.manage_ceg != null)
                message.manage_ceg = Boolean(object.manage_ceg);
            if (object.manage_signing != null)
                message.manage_signing = Boolean(object.manage_signing);
            if (object.manage_cdkeys != null)
                message.manage_cdkeys = Boolean(object.manage_cdkeys);
            if (object.edit_marketing != null)
                message.edit_marketing = Boolean(object.edit_marketing);
            if (object.economy_support != null)
                message.economy_support = Boolean(object.economy_support);
            if (object.economy_support_supervisor != null)
                message.economy_support_supervisor = Boolean(object.economy_support_supervisor);
            if (object.manage_pricing != null)
                message.manage_pricing = Boolean(object.manage_pricing);
            if (object.broadcast_live != null)
                message.broadcast_live = Boolean(object.broadcast_live);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAppRights message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAppRights
         * @static
         * @param {CMsgAppRights} message CMsgAppRights
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAppRights.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.edit_info = false;
                object.publish = false;
                object.view_error_data = false;
                object.download = false;
                object.upload_cdkeys = false;
                object.generate_cdkeys = false;
                object.view_financials = false;
                object.manage_ceg = false;
                object.manage_signing = false;
                object.manage_cdkeys = false;
                object.edit_marketing = false;
                object.economy_support = false;
                object.economy_support_supervisor = false;
                object.manage_pricing = false;
                object.broadcast_live = false;
            }
            if (message.edit_info != null && message.hasOwnProperty("edit_info"))
                object.edit_info = message.edit_info;
            if (message.publish != null && message.hasOwnProperty("publish"))
                object.publish = message.publish;
            if (message.view_error_data != null && message.hasOwnProperty("view_error_data"))
                object.view_error_data = message.view_error_data;
            if (message.download != null && message.hasOwnProperty("download"))
                object.download = message.download;
            if (message.upload_cdkeys != null && message.hasOwnProperty("upload_cdkeys"))
                object.upload_cdkeys = message.upload_cdkeys;
            if (message.generate_cdkeys != null && message.hasOwnProperty("generate_cdkeys"))
                object.generate_cdkeys = message.generate_cdkeys;
            if (message.view_financials != null && message.hasOwnProperty("view_financials"))
                object.view_financials = message.view_financials;
            if (message.manage_ceg != null && message.hasOwnProperty("manage_ceg"))
                object.manage_ceg = message.manage_ceg;
            if (message.manage_signing != null && message.hasOwnProperty("manage_signing"))
                object.manage_signing = message.manage_signing;
            if (message.manage_cdkeys != null && message.hasOwnProperty("manage_cdkeys"))
                object.manage_cdkeys = message.manage_cdkeys;
            if (message.edit_marketing != null && message.hasOwnProperty("edit_marketing"))
                object.edit_marketing = message.edit_marketing;
            if (message.economy_support != null && message.hasOwnProperty("economy_support"))
                object.economy_support = message.economy_support;
            if (message.economy_support_supervisor != null && message.hasOwnProperty("economy_support_supervisor"))
                object.economy_support_supervisor = message.economy_support_supervisor;
            if (message.manage_pricing != null && message.hasOwnProperty("manage_pricing"))
                object.manage_pricing = message.manage_pricing;
            if (message.broadcast_live != null && message.hasOwnProperty("broadcast_live"))
                object.broadcast_live = message.broadcast_live;
            return object;
        };
    
        /**
         * Converts this CMsgAppRights to JSON.
         * @function toJSON
         * @memberof CMsgAppRights
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAppRights.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAppRights;
    })();
    
    $root.CCuratorPreferences = (function() {
    
        /**
         * Properties of a CCuratorPreferences.
         * @exports ICCuratorPreferences
         * @interface ICCuratorPreferences
         * @property {number|null} [supported_languages] CCuratorPreferences supported_languages
         * @property {boolean|null} [platform_windows] CCuratorPreferences platform_windows
         * @property {boolean|null} [platform_mac] CCuratorPreferences platform_mac
         * @property {boolean|null} [platform_linux] CCuratorPreferences platform_linux
         * @property {boolean|null} [vr_content] CCuratorPreferences vr_content
         * @property {boolean|null} [adult_content_violence] CCuratorPreferences adult_content_violence
         * @property {boolean|null} [adult_content_sex] CCuratorPreferences adult_content_sex
         * @property {number|null} [timestamp_updated] CCuratorPreferences timestamp_updated
         * @property {Array.<number>|null} [tagids_curated] CCuratorPreferences tagids_curated
         * @property {Array.<number>|null} [tagids_filtered] CCuratorPreferences tagids_filtered
         * @property {string|null} [website_title] CCuratorPreferences website_title
         * @property {string|null} [website_url] CCuratorPreferences website_url
         * @property {string|null} [discussion_url] CCuratorPreferences discussion_url
         * @property {boolean|null} [show_broadcast] CCuratorPreferences show_broadcast
         */
    
        /**
         * Constructs a new CCuratorPreferences.
         * @exports CCuratorPreferences
         * @classdesc Represents a CCuratorPreferences.
         * @implements ICCuratorPreferences
         * @constructor
         * @param {ICCuratorPreferences=} [properties] Properties to set
         */
        function CCuratorPreferences(properties) {
            this.tagids_curated = [];
            this.tagids_filtered = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCuratorPreferences supported_languages.
         * @member {number} supported_languages
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.supported_languages = 0;
    
        /**
         * CCuratorPreferences platform_windows.
         * @member {boolean} platform_windows
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.platform_windows = false;
    
        /**
         * CCuratorPreferences platform_mac.
         * @member {boolean} platform_mac
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.platform_mac = false;
    
        /**
         * CCuratorPreferences platform_linux.
         * @member {boolean} platform_linux
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.platform_linux = false;
    
        /**
         * CCuratorPreferences vr_content.
         * @member {boolean} vr_content
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.vr_content = false;
    
        /**
         * CCuratorPreferences adult_content_violence.
         * @member {boolean} adult_content_violence
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.adult_content_violence = false;
    
        /**
         * CCuratorPreferences adult_content_sex.
         * @member {boolean} adult_content_sex
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.adult_content_sex = false;
    
        /**
         * CCuratorPreferences timestamp_updated.
         * @member {number} timestamp_updated
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.timestamp_updated = 0;
    
        /**
         * CCuratorPreferences tagids_curated.
         * @member {Array.<number>} tagids_curated
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.tagids_curated = $util.emptyArray;
    
        /**
         * CCuratorPreferences tagids_filtered.
         * @member {Array.<number>} tagids_filtered
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.tagids_filtered = $util.emptyArray;
    
        /**
         * CCuratorPreferences website_title.
         * @member {string} website_title
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.website_title = "";
    
        /**
         * CCuratorPreferences website_url.
         * @member {string} website_url
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.website_url = "";
    
        /**
         * CCuratorPreferences discussion_url.
         * @member {string} discussion_url
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.discussion_url = "";
    
        /**
         * CCuratorPreferences show_broadcast.
         * @member {boolean} show_broadcast
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.show_broadcast = false;
    
        /**
         * Creates a new CCuratorPreferences instance using the specified properties.
         * @function create
         * @memberof CCuratorPreferences
         * @static
         * @param {ICCuratorPreferences=} [properties] Properties to set
         * @returns {CCuratorPreferences} CCuratorPreferences instance
         */
        CCuratorPreferences.create = function create(properties) {
            return new CCuratorPreferences(properties);
        };
    
        /**
         * Encodes the specified CCuratorPreferences message. Does not implicitly {@link CCuratorPreferences.verify|verify} messages.
         * @function encode
         * @memberof CCuratorPreferences
         * @static
         * @param {ICCuratorPreferences} message CCuratorPreferences message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCuratorPreferences.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.supported_languages != null && message.hasOwnProperty("supported_languages"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.supported_languages);
            if (message.platform_windows != null && message.hasOwnProperty("platform_windows"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.platform_windows);
            if (message.platform_mac != null && message.hasOwnProperty("platform_mac"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.platform_mac);
            if (message.platform_linux != null && message.hasOwnProperty("platform_linux"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.platform_linux);
            if (message.vr_content != null && message.hasOwnProperty("vr_content"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.vr_content);
            if (message.adult_content_violence != null && message.hasOwnProperty("adult_content_violence"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.adult_content_violence);
            if (message.adult_content_sex != null && message.hasOwnProperty("adult_content_sex"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.adult_content_sex);
            if (message.timestamp_updated != null && message.hasOwnProperty("timestamp_updated"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.timestamp_updated);
            if (message.tagids_curated != null && message.tagids_curated.length)
                for (var i = 0; i < message.tagids_curated.length; ++i)
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.tagids_curated[i]);
            if (message.tagids_filtered != null && message.tagids_filtered.length)
                for (var i = 0; i < message.tagids_filtered.length; ++i)
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.tagids_filtered[i]);
            if (message.website_title != null && message.hasOwnProperty("website_title"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.website_title);
            if (message.website_url != null && message.hasOwnProperty("website_url"))
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.website_url);
            if (message.discussion_url != null && message.hasOwnProperty("discussion_url"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.discussion_url);
            if (message.show_broadcast != null && message.hasOwnProperty("show_broadcast"))
                writer.uint32(/* id 14, wireType 0 =*/112).bool(message.show_broadcast);
            return writer;
        };
    
        /**
         * Encodes the specified CCuratorPreferences message, length delimited. Does not implicitly {@link CCuratorPreferences.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCuratorPreferences
         * @static
         * @param {ICCuratorPreferences} message CCuratorPreferences message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCuratorPreferences.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCuratorPreferences message from the specified reader or buffer.
         * @function decode
         * @memberof CCuratorPreferences
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCuratorPreferences} CCuratorPreferences
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCuratorPreferences.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCuratorPreferences();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.supported_languages = reader.uint32();
                    break;
                case 2:
                    message.platform_windows = reader.bool();
                    break;
                case 3:
                    message.platform_mac = reader.bool();
                    break;
                case 4:
                    message.platform_linux = reader.bool();
                    break;
                case 5:
                    message.vr_content = reader.bool();
                    break;
                case 6:
                    message.adult_content_violence = reader.bool();
                    break;
                case 7:
                    message.adult_content_sex = reader.bool();
                    break;
                case 8:
                    message.timestamp_updated = reader.uint32();
                    break;
                case 9:
                    if (!(message.tagids_curated && message.tagids_curated.length))
                        message.tagids_curated = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.tagids_curated.push(reader.uint32());
                    } else
                        message.tagids_curated.push(reader.uint32());
                    break;
                case 10:
                    if (!(message.tagids_filtered && message.tagids_filtered.length))
                        message.tagids_filtered = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.tagids_filtered.push(reader.uint32());
                    } else
                        message.tagids_filtered.push(reader.uint32());
                    break;
                case 11:
                    message.website_title = reader.string();
                    break;
                case 12:
                    message.website_url = reader.string();
                    break;
                case 13:
                    message.discussion_url = reader.string();
                    break;
                case 14:
                    message.show_broadcast = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCuratorPreferences message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCuratorPreferences
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCuratorPreferences} CCuratorPreferences
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCuratorPreferences.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCuratorPreferences message.
         * @function verify
         * @memberof CCuratorPreferences
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCuratorPreferences.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.supported_languages != null && message.hasOwnProperty("supported_languages"))
                if (!$util.isInteger(message.supported_languages))
                    return "supported_languages: integer expected";
            if (message.platform_windows != null && message.hasOwnProperty("platform_windows"))
                if (typeof message.platform_windows !== "boolean")
                    return "platform_windows: boolean expected";
            if (message.platform_mac != null && message.hasOwnProperty("platform_mac"))
                if (typeof message.platform_mac !== "boolean")
                    return "platform_mac: boolean expected";
            if (message.platform_linux != null && message.hasOwnProperty("platform_linux"))
                if (typeof message.platform_linux !== "boolean")
                    return "platform_linux: boolean expected";
            if (message.vr_content != null && message.hasOwnProperty("vr_content"))
                if (typeof message.vr_content !== "boolean")
                    return "vr_content: boolean expected";
            if (message.adult_content_violence != null && message.hasOwnProperty("adult_content_violence"))
                if (typeof message.adult_content_violence !== "boolean")
                    return "adult_content_violence: boolean expected";
            if (message.adult_content_sex != null && message.hasOwnProperty("adult_content_sex"))
                if (typeof message.adult_content_sex !== "boolean")
                    return "adult_content_sex: boolean expected";
            if (message.timestamp_updated != null && message.hasOwnProperty("timestamp_updated"))
                if (!$util.isInteger(message.timestamp_updated))
                    return "timestamp_updated: integer expected";
            if (message.tagids_curated != null && message.hasOwnProperty("tagids_curated")) {
                if (!Array.isArray(message.tagids_curated))
                    return "tagids_curated: array expected";
                for (var i = 0; i < message.tagids_curated.length; ++i)
                    if (!$util.isInteger(message.tagids_curated[i]))
                        return "tagids_curated: integer[] expected";
            }
            if (message.tagids_filtered != null && message.hasOwnProperty("tagids_filtered")) {
                if (!Array.isArray(message.tagids_filtered))
                    return "tagids_filtered: array expected";
                for (var i = 0; i < message.tagids_filtered.length; ++i)
                    if (!$util.isInteger(message.tagids_filtered[i]))
                        return "tagids_filtered: integer[] expected";
            }
            if (message.website_title != null && message.hasOwnProperty("website_title"))
                if (!$util.isString(message.website_title))
                    return "website_title: string expected";
            if (message.website_url != null && message.hasOwnProperty("website_url"))
                if (!$util.isString(message.website_url))
                    return "website_url: string expected";
            if (message.discussion_url != null && message.hasOwnProperty("discussion_url"))
                if (!$util.isString(message.discussion_url))
                    return "discussion_url: string expected";
            if (message.show_broadcast != null && message.hasOwnProperty("show_broadcast"))
                if (typeof message.show_broadcast !== "boolean")
                    return "show_broadcast: boolean expected";
            return null;
        };
    
        /**
         * Creates a CCuratorPreferences message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCuratorPreferences
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCuratorPreferences} CCuratorPreferences
         */
        CCuratorPreferences.fromObject = function fromObject(object) {
            if (object instanceof $root.CCuratorPreferences)
                return object;
            var message = new $root.CCuratorPreferences();
            if (object.supported_languages != null)
                message.supported_languages = object.supported_languages >>> 0;
            if (object.platform_windows != null)
                message.platform_windows = Boolean(object.platform_windows);
            if (object.platform_mac != null)
                message.platform_mac = Boolean(object.platform_mac);
            if (object.platform_linux != null)
                message.platform_linux = Boolean(object.platform_linux);
            if (object.vr_content != null)
                message.vr_content = Boolean(object.vr_content);
            if (object.adult_content_violence != null)
                message.adult_content_violence = Boolean(object.adult_content_violence);
            if (object.adult_content_sex != null)
                message.adult_content_sex = Boolean(object.adult_content_sex);
            if (object.timestamp_updated != null)
                message.timestamp_updated = object.timestamp_updated >>> 0;
            if (object.tagids_curated) {
                if (!Array.isArray(object.tagids_curated))
                    throw TypeError(".CCuratorPreferences.tagids_curated: array expected");
                message.tagids_curated = [];
                for (var i = 0; i < object.tagids_curated.length; ++i)
                    message.tagids_curated[i] = object.tagids_curated[i] >>> 0;
            }
            if (object.tagids_filtered) {
                if (!Array.isArray(object.tagids_filtered))
                    throw TypeError(".CCuratorPreferences.tagids_filtered: array expected");
                message.tagids_filtered = [];
                for (var i = 0; i < object.tagids_filtered.length; ++i)
                    message.tagids_filtered[i] = object.tagids_filtered[i] >>> 0;
            }
            if (object.website_title != null)
                message.website_title = String(object.website_title);
            if (object.website_url != null)
                message.website_url = String(object.website_url);
            if (object.discussion_url != null)
                message.discussion_url = String(object.discussion_url);
            if (object.show_broadcast != null)
                message.show_broadcast = Boolean(object.show_broadcast);
            return message;
        };
    
        /**
         * Creates a plain object from a CCuratorPreferences message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCuratorPreferences
         * @static
         * @param {CCuratorPreferences} message CCuratorPreferences
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCuratorPreferences.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.tagids_curated = [];
                object.tagids_filtered = [];
            }
            if (options.defaults) {
                object.supported_languages = 0;
                object.platform_windows = false;
                object.platform_mac = false;
                object.platform_linux = false;
                object.vr_content = false;
                object.adult_content_violence = false;
                object.adult_content_sex = false;
                object.timestamp_updated = 0;
                object.website_title = "";
                object.website_url = "";
                object.discussion_url = "";
                object.show_broadcast = false;
            }
            if (message.supported_languages != null && message.hasOwnProperty("supported_languages"))
                object.supported_languages = message.supported_languages;
            if (message.platform_windows != null && message.hasOwnProperty("platform_windows"))
                object.platform_windows = message.platform_windows;
            if (message.platform_mac != null && message.hasOwnProperty("platform_mac"))
                object.platform_mac = message.platform_mac;
            if (message.platform_linux != null && message.hasOwnProperty("platform_linux"))
                object.platform_linux = message.platform_linux;
            if (message.vr_content != null && message.hasOwnProperty("vr_content"))
                object.vr_content = message.vr_content;
            if (message.adult_content_violence != null && message.hasOwnProperty("adult_content_violence"))
                object.adult_content_violence = message.adult_content_violence;
            if (message.adult_content_sex != null && message.hasOwnProperty("adult_content_sex"))
                object.adult_content_sex = message.adult_content_sex;
            if (message.timestamp_updated != null && message.hasOwnProperty("timestamp_updated"))
                object.timestamp_updated = message.timestamp_updated;
            if (message.tagids_curated && message.tagids_curated.length) {
                object.tagids_curated = [];
                for (var j = 0; j < message.tagids_curated.length; ++j)
                    object.tagids_curated[j] = message.tagids_curated[j];
            }
            if (message.tagids_filtered && message.tagids_filtered.length) {
                object.tagids_filtered = [];
                for (var j = 0; j < message.tagids_filtered.length; ++j)
                    object.tagids_filtered[j] = message.tagids_filtered[j];
            }
            if (message.website_title != null && message.hasOwnProperty("website_title"))
                object.website_title = message.website_title;
            if (message.website_url != null && message.hasOwnProperty("website_url"))
                object.website_url = message.website_url;
            if (message.discussion_url != null && message.hasOwnProperty("discussion_url"))
                object.discussion_url = message.discussion_url;
            if (message.show_broadcast != null && message.hasOwnProperty("show_broadcast"))
                object.show_broadcast = message.show_broadcast;
            return object;
        };
    
        /**
         * Converts this CCuratorPreferences to JSON.
         * @function toJSON
         * @memberof CCuratorPreferences
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCuratorPreferences.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCuratorPreferences;
    })();
    
    $root.CLocalizationToken = (function() {
    
        /**
         * Properties of a CLocalizationToken.
         * @exports ICLocalizationToken
         * @interface ICLocalizationToken
         * @property {number|null} [language] CLocalizationToken language
         * @property {string|null} [localized_string] CLocalizationToken localized_string
         */
    
        /**
         * Constructs a new CLocalizationToken.
         * @exports CLocalizationToken
         * @classdesc Represents a CLocalizationToken.
         * @implements ICLocalizationToken
         * @constructor
         * @param {ICLocalizationToken=} [properties] Properties to set
         */
        function CLocalizationToken(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CLocalizationToken language.
         * @member {number} language
         * @memberof CLocalizationToken
         * @instance
         */
        CLocalizationToken.prototype.language = 0;
    
        /**
         * CLocalizationToken localized_string.
         * @member {string} localized_string
         * @memberof CLocalizationToken
         * @instance
         */
        CLocalizationToken.prototype.localized_string = "";
    
        /**
         * Creates a new CLocalizationToken instance using the specified properties.
         * @function create
         * @memberof CLocalizationToken
         * @static
         * @param {ICLocalizationToken=} [properties] Properties to set
         * @returns {CLocalizationToken} CLocalizationToken instance
         */
        CLocalizationToken.create = function create(properties) {
            return new CLocalizationToken(properties);
        };
    
        /**
         * Encodes the specified CLocalizationToken message. Does not implicitly {@link CLocalizationToken.verify|verify} messages.
         * @function encode
         * @memberof CLocalizationToken
         * @static
         * @param {ICLocalizationToken} message CLocalizationToken message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CLocalizationToken.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.language != null && message.hasOwnProperty("language"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.language);
            if (message.localized_string != null && message.hasOwnProperty("localized_string"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.localized_string);
            return writer;
        };
    
        /**
         * Encodes the specified CLocalizationToken message, length delimited. Does not implicitly {@link CLocalizationToken.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CLocalizationToken
         * @static
         * @param {ICLocalizationToken} message CLocalizationToken message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CLocalizationToken.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CLocalizationToken message from the specified reader or buffer.
         * @function decode
         * @memberof CLocalizationToken
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CLocalizationToken} CLocalizationToken
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CLocalizationToken.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CLocalizationToken();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.language = reader.uint32();
                    break;
                case 2:
                    message.localized_string = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CLocalizationToken message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CLocalizationToken
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CLocalizationToken} CLocalizationToken
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CLocalizationToken.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CLocalizationToken message.
         * @function verify
         * @memberof CLocalizationToken
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CLocalizationToken.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isInteger(message.language))
                    return "language: integer expected";
            if (message.localized_string != null && message.hasOwnProperty("localized_string"))
                if (!$util.isString(message.localized_string))
                    return "localized_string: string expected";
            return null;
        };
    
        /**
         * Creates a CLocalizationToken message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CLocalizationToken
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CLocalizationToken} CLocalizationToken
         */
        CLocalizationToken.fromObject = function fromObject(object) {
            if (object instanceof $root.CLocalizationToken)
                return object;
            var message = new $root.CLocalizationToken();
            if (object.language != null)
                message.language = object.language >>> 0;
            if (object.localized_string != null)
                message.localized_string = String(object.localized_string);
            return message;
        };
    
        /**
         * Creates a plain object from a CLocalizationToken message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CLocalizationToken
         * @static
         * @param {CLocalizationToken} message CLocalizationToken
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CLocalizationToken.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.language = 0;
                object.localized_string = "";
            }
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            if (message.localized_string != null && message.hasOwnProperty("localized_string"))
                object.localized_string = message.localized_string;
            return object;
        };
    
        /**
         * Converts this CLocalizationToken to JSON.
         * @function toJSON
         * @memberof CLocalizationToken
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CLocalizationToken.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CLocalizationToken;
    })();
    
    $root.CClanEventUserNewsTuple = (function() {
    
        /**
         * Properties of a CClanEventUserNewsTuple.
         * @exports ICClanEventUserNewsTuple
         * @interface ICClanEventUserNewsTuple
         * @property {number|null} [clanid] CClanEventUserNewsTuple clanid
         * @property {number|Long|null} [event_gid] CClanEventUserNewsTuple event_gid
         * @property {number|Long|null} [announcement_gid] CClanEventUserNewsTuple announcement_gid
         * @property {number|null} [rtime_start] CClanEventUserNewsTuple rtime_start
         * @property {number|null} [rtime_end] CClanEventUserNewsTuple rtime_end
         * @property {number|null} [priority_score] CClanEventUserNewsTuple priority_score
         * @property {number|null} [type] CClanEventUserNewsTuple type
         * @property {number|null} [clamp_range_slot] CClanEventUserNewsTuple clamp_range_slot
         * @property {number|null} [appid] CClanEventUserNewsTuple appid
         * @property {number|null} [rtime32_last_modified] CClanEventUserNewsTuple rtime32_last_modified
         */
    
        /**
         * Constructs a new CClanEventUserNewsTuple.
         * @exports CClanEventUserNewsTuple
         * @classdesc Represents a CClanEventUserNewsTuple.
         * @implements ICClanEventUserNewsTuple
         * @constructor
         * @param {ICClanEventUserNewsTuple=} [properties] Properties to set
         */
        function CClanEventUserNewsTuple(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CClanEventUserNewsTuple clanid.
         * @member {number} clanid
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.clanid = 0;
    
        /**
         * CClanEventUserNewsTuple event_gid.
         * @member {number|Long} event_gid
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.event_gid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventUserNewsTuple announcement_gid.
         * @member {number|Long} announcement_gid
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.announcement_gid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventUserNewsTuple rtime_start.
         * @member {number} rtime_start
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.rtime_start = 0;
    
        /**
         * CClanEventUserNewsTuple rtime_end.
         * @member {number} rtime_end
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.rtime_end = 0;
    
        /**
         * CClanEventUserNewsTuple priority_score.
         * @member {number} priority_score
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.priority_score = 0;
    
        /**
         * CClanEventUserNewsTuple type.
         * @member {number} type
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.type = 0;
    
        /**
         * CClanEventUserNewsTuple clamp_range_slot.
         * @member {number} clamp_range_slot
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.clamp_range_slot = 0;
    
        /**
         * CClanEventUserNewsTuple appid.
         * @member {number} appid
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.appid = 0;
    
        /**
         * CClanEventUserNewsTuple rtime32_last_modified.
         * @member {number} rtime32_last_modified
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.rtime32_last_modified = 0;
    
        /**
         * Creates a new CClanEventUserNewsTuple instance using the specified properties.
         * @function create
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {ICClanEventUserNewsTuple=} [properties] Properties to set
         * @returns {CClanEventUserNewsTuple} CClanEventUserNewsTuple instance
         */
        CClanEventUserNewsTuple.create = function create(properties) {
            return new CClanEventUserNewsTuple(properties);
        };
    
        /**
         * Encodes the specified CClanEventUserNewsTuple message. Does not implicitly {@link CClanEventUserNewsTuple.verify|verify} messages.
         * @function encode
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {ICClanEventUserNewsTuple} message CClanEventUserNewsTuple message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClanEventUserNewsTuple.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.clanid);
            if (message.event_gid != null && message.hasOwnProperty("event_gid"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.event_gid);
            if (message.announcement_gid != null && message.hasOwnProperty("announcement_gid"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.announcement_gid);
            if (message.rtime_start != null && message.hasOwnProperty("rtime_start"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.rtime_start);
            if (message.rtime_end != null && message.hasOwnProperty("rtime_end"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.rtime_end);
            if (message.priority_score != null && message.hasOwnProperty("priority_score"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.priority_score);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.type);
            if (message.clamp_range_slot != null && message.hasOwnProperty("clamp_range_slot"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.clamp_range_slot);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.appid);
            if (message.rtime32_last_modified != null && message.hasOwnProperty("rtime32_last_modified"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.rtime32_last_modified);
            return writer;
        };
    
        /**
         * Encodes the specified CClanEventUserNewsTuple message, length delimited. Does not implicitly {@link CClanEventUserNewsTuple.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {ICClanEventUserNewsTuple} message CClanEventUserNewsTuple message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClanEventUserNewsTuple.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CClanEventUserNewsTuple message from the specified reader or buffer.
         * @function decode
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CClanEventUserNewsTuple} CClanEventUserNewsTuple
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClanEventUserNewsTuple.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CClanEventUserNewsTuple();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.clanid = reader.uint32();
                    break;
                case 2:
                    message.event_gid = reader.fixed64();
                    break;
                case 3:
                    message.announcement_gid = reader.fixed64();
                    break;
                case 4:
                    message.rtime_start = reader.uint32();
                    break;
                case 5:
                    message.rtime_end = reader.uint32();
                    break;
                case 6:
                    message.priority_score = reader.uint32();
                    break;
                case 7:
                    message.type = reader.uint32();
                    break;
                case 8:
                    message.clamp_range_slot = reader.uint32();
                    break;
                case 9:
                    message.appid = reader.uint32();
                    break;
                case 10:
                    message.rtime32_last_modified = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CClanEventUserNewsTuple message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CClanEventUserNewsTuple} CClanEventUserNewsTuple
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClanEventUserNewsTuple.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CClanEventUserNewsTuple message.
         * @function verify
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CClanEventUserNewsTuple.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                if (!$util.isInteger(message.clanid))
                    return "clanid: integer expected";
            if (message.event_gid != null && message.hasOwnProperty("event_gid"))
                if (!$util.isInteger(message.event_gid) && !(message.event_gid && $util.isInteger(message.event_gid.low) && $util.isInteger(message.event_gid.high)))
                    return "event_gid: integer|Long expected";
            if (message.announcement_gid != null && message.hasOwnProperty("announcement_gid"))
                if (!$util.isInteger(message.announcement_gid) && !(message.announcement_gid && $util.isInteger(message.announcement_gid.low) && $util.isInteger(message.announcement_gid.high)))
                    return "announcement_gid: integer|Long expected";
            if (message.rtime_start != null && message.hasOwnProperty("rtime_start"))
                if (!$util.isInteger(message.rtime_start))
                    return "rtime_start: integer expected";
            if (message.rtime_end != null && message.hasOwnProperty("rtime_end"))
                if (!$util.isInteger(message.rtime_end))
                    return "rtime_end: integer expected";
            if (message.priority_score != null && message.hasOwnProperty("priority_score"))
                if (!$util.isInteger(message.priority_score))
                    return "priority_score: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            if (message.clamp_range_slot != null && message.hasOwnProperty("clamp_range_slot"))
                if (!$util.isInteger(message.clamp_range_slot))
                    return "clamp_range_slot: integer expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.rtime32_last_modified != null && message.hasOwnProperty("rtime32_last_modified"))
                if (!$util.isInteger(message.rtime32_last_modified))
                    return "rtime32_last_modified: integer expected";
            return null;
        };
    
        /**
         * Creates a CClanEventUserNewsTuple message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CClanEventUserNewsTuple} CClanEventUserNewsTuple
         */
        CClanEventUserNewsTuple.fromObject = function fromObject(object) {
            if (object instanceof $root.CClanEventUserNewsTuple)
                return object;
            var message = new $root.CClanEventUserNewsTuple();
            if (object.clanid != null)
                message.clanid = object.clanid >>> 0;
            if (object.event_gid != null)
                if ($util.Long)
                    (message.event_gid = $util.Long.fromValue(object.event_gid)).unsigned = false;
                else if (typeof object.event_gid === "string")
                    message.event_gid = parseInt(object.event_gid, 10);
                else if (typeof object.event_gid === "number")
                    message.event_gid = object.event_gid;
                else if (typeof object.event_gid === "object")
                    message.event_gid = new $util.LongBits(object.event_gid.low >>> 0, object.event_gid.high >>> 0).toNumber();
            if (object.announcement_gid != null)
                if ($util.Long)
                    (message.announcement_gid = $util.Long.fromValue(object.announcement_gid)).unsigned = false;
                else if (typeof object.announcement_gid === "string")
                    message.announcement_gid = parseInt(object.announcement_gid, 10);
                else if (typeof object.announcement_gid === "number")
                    message.announcement_gid = object.announcement_gid;
                else if (typeof object.announcement_gid === "object")
                    message.announcement_gid = new $util.LongBits(object.announcement_gid.low >>> 0, object.announcement_gid.high >>> 0).toNumber();
            if (object.rtime_start != null)
                message.rtime_start = object.rtime_start >>> 0;
            if (object.rtime_end != null)
                message.rtime_end = object.rtime_end >>> 0;
            if (object.priority_score != null)
                message.priority_score = object.priority_score >>> 0;
            if (object.type != null)
                message.type = object.type >>> 0;
            if (object.clamp_range_slot != null)
                message.clamp_range_slot = object.clamp_range_slot >>> 0;
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.rtime32_last_modified != null)
                message.rtime32_last_modified = object.rtime32_last_modified >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CClanEventUserNewsTuple message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {CClanEventUserNewsTuple} message CClanEventUserNewsTuple
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CClanEventUserNewsTuple.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.clanid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.event_gid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.event_gid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.announcement_gid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.announcement_gid = options.longs === String ? "0" : 0;
                object.rtime_start = 0;
                object.rtime_end = 0;
                object.priority_score = 0;
                object.type = 0;
                object.clamp_range_slot = 0;
                object.appid = 0;
                object.rtime32_last_modified = 0;
            }
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                object.clanid = message.clanid;
            if (message.event_gid != null && message.hasOwnProperty("event_gid"))
                if (typeof message.event_gid === "number")
                    object.event_gid = options.longs === String ? String(message.event_gid) : message.event_gid;
                else
                    object.event_gid = options.longs === String ? $util.Long.prototype.toString.call(message.event_gid) : options.longs === Number ? new $util.LongBits(message.event_gid.low >>> 0, message.event_gid.high >>> 0).toNumber() : message.event_gid;
            if (message.announcement_gid != null && message.hasOwnProperty("announcement_gid"))
                if (typeof message.announcement_gid === "number")
                    object.announcement_gid = options.longs === String ? String(message.announcement_gid) : message.announcement_gid;
                else
                    object.announcement_gid = options.longs === String ? $util.Long.prototype.toString.call(message.announcement_gid) : options.longs === Number ? new $util.LongBits(message.announcement_gid.low >>> 0, message.announcement_gid.high >>> 0).toNumber() : message.announcement_gid;
            if (message.rtime_start != null && message.hasOwnProperty("rtime_start"))
                object.rtime_start = message.rtime_start;
            if (message.rtime_end != null && message.hasOwnProperty("rtime_end"))
                object.rtime_end = message.rtime_end;
            if (message.priority_score != null && message.hasOwnProperty("priority_score"))
                object.priority_score = message.priority_score;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.clamp_range_slot != null && message.hasOwnProperty("clamp_range_slot"))
                object.clamp_range_slot = message.clamp_range_slot;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.rtime32_last_modified != null && message.hasOwnProperty("rtime32_last_modified"))
                object.rtime32_last_modified = message.rtime32_last_modified;
            return object;
        };
    
        /**
         * Converts this CClanEventUserNewsTuple to JSON.
         * @function toJSON
         * @memberof CClanEventUserNewsTuple
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CClanEventUserNewsTuple.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CClanEventUserNewsTuple;
    })();
    
    $root.CClanMatchEventByRange = (function() {
    
        /**
         * Properties of a CClanMatchEventByRange.
         * @exports ICClanMatchEventByRange
         * @interface ICClanMatchEventByRange
         * @property {number|null} [rtime_before] CClanMatchEventByRange rtime_before
         * @property {number|null} [rtime_after] CClanMatchEventByRange rtime_after
         * @property {number|null} [qualified] CClanMatchEventByRange qualified
         * @property {Array.<ICClanEventUserNewsTuple>|null} [events] CClanMatchEventByRange events
         */
    
        /**
         * Constructs a new CClanMatchEventByRange.
         * @exports CClanMatchEventByRange
         * @classdesc Represents a CClanMatchEventByRange.
         * @implements ICClanMatchEventByRange
         * @constructor
         * @param {ICClanMatchEventByRange=} [properties] Properties to set
         */
        function CClanMatchEventByRange(properties) {
            this.events = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CClanMatchEventByRange rtime_before.
         * @member {number} rtime_before
         * @memberof CClanMatchEventByRange
         * @instance
         */
        CClanMatchEventByRange.prototype.rtime_before = 0;
    
        /**
         * CClanMatchEventByRange rtime_after.
         * @member {number} rtime_after
         * @memberof CClanMatchEventByRange
         * @instance
         */
        CClanMatchEventByRange.prototype.rtime_after = 0;
    
        /**
         * CClanMatchEventByRange qualified.
         * @member {number} qualified
         * @memberof CClanMatchEventByRange
         * @instance
         */
        CClanMatchEventByRange.prototype.qualified = 0;
    
        /**
         * CClanMatchEventByRange events.
         * @member {Array.<ICClanEventUserNewsTuple>} events
         * @memberof CClanMatchEventByRange
         * @instance
         */
        CClanMatchEventByRange.prototype.events = $util.emptyArray;
    
        /**
         * Creates a new CClanMatchEventByRange instance using the specified properties.
         * @function create
         * @memberof CClanMatchEventByRange
         * @static
         * @param {ICClanMatchEventByRange=} [properties] Properties to set
         * @returns {CClanMatchEventByRange} CClanMatchEventByRange instance
         */
        CClanMatchEventByRange.create = function create(properties) {
            return new CClanMatchEventByRange(properties);
        };
    
        /**
         * Encodes the specified CClanMatchEventByRange message. Does not implicitly {@link CClanMatchEventByRange.verify|verify} messages.
         * @function encode
         * @memberof CClanMatchEventByRange
         * @static
         * @param {ICClanMatchEventByRange} message CClanMatchEventByRange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClanMatchEventByRange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rtime_before != null && message.hasOwnProperty("rtime_before"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rtime_before);
            if (message.rtime_after != null && message.hasOwnProperty("rtime_after"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.rtime_after);
            if (message.qualified != null && message.hasOwnProperty("qualified"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.qualified);
            if (message.events != null && message.events.length)
                for (var i = 0; i < message.events.length; ++i)
                    $root.CClanEventUserNewsTuple.encode(message.events[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CClanMatchEventByRange message, length delimited. Does not implicitly {@link CClanMatchEventByRange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CClanMatchEventByRange
         * @static
         * @param {ICClanMatchEventByRange} message CClanMatchEventByRange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClanMatchEventByRange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CClanMatchEventByRange message from the specified reader or buffer.
         * @function decode
         * @memberof CClanMatchEventByRange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CClanMatchEventByRange} CClanMatchEventByRange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClanMatchEventByRange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CClanMatchEventByRange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rtime_before = reader.uint32();
                    break;
                case 2:
                    message.rtime_after = reader.uint32();
                    break;
                case 3:
                    message.qualified = reader.uint32();
                    break;
                case 4:
                    if (!(message.events && message.events.length))
                        message.events = [];
                    message.events.push($root.CClanEventUserNewsTuple.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CClanMatchEventByRange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CClanMatchEventByRange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CClanMatchEventByRange} CClanMatchEventByRange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClanMatchEventByRange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CClanMatchEventByRange message.
         * @function verify
         * @memberof CClanMatchEventByRange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CClanMatchEventByRange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rtime_before != null && message.hasOwnProperty("rtime_before"))
                if (!$util.isInteger(message.rtime_before))
                    return "rtime_before: integer expected";
            if (message.rtime_after != null && message.hasOwnProperty("rtime_after"))
                if (!$util.isInteger(message.rtime_after))
                    return "rtime_after: integer expected";
            if (message.qualified != null && message.hasOwnProperty("qualified"))
                if (!$util.isInteger(message.qualified))
                    return "qualified: integer expected";
            if (message.events != null && message.hasOwnProperty("events")) {
                if (!Array.isArray(message.events))
                    return "events: array expected";
                for (var i = 0; i < message.events.length; ++i) {
                    var error = $root.CClanEventUserNewsTuple.verify(message.events[i]);
                    if (error)
                        return "events." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CClanMatchEventByRange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CClanMatchEventByRange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CClanMatchEventByRange} CClanMatchEventByRange
         */
        CClanMatchEventByRange.fromObject = function fromObject(object) {
            if (object instanceof $root.CClanMatchEventByRange)
                return object;
            var message = new $root.CClanMatchEventByRange();
            if (object.rtime_before != null)
                message.rtime_before = object.rtime_before >>> 0;
            if (object.rtime_after != null)
                message.rtime_after = object.rtime_after >>> 0;
            if (object.qualified != null)
                message.qualified = object.qualified >>> 0;
            if (object.events) {
                if (!Array.isArray(object.events))
                    throw TypeError(".CClanMatchEventByRange.events: array expected");
                message.events = [];
                for (var i = 0; i < object.events.length; ++i) {
                    if (typeof object.events[i] !== "object")
                        throw TypeError(".CClanMatchEventByRange.events: object expected");
                    message.events[i] = $root.CClanEventUserNewsTuple.fromObject(object.events[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CClanMatchEventByRange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CClanMatchEventByRange
         * @static
         * @param {CClanMatchEventByRange} message CClanMatchEventByRange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CClanMatchEventByRange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.events = [];
            if (options.defaults) {
                object.rtime_before = 0;
                object.rtime_after = 0;
                object.qualified = 0;
            }
            if (message.rtime_before != null && message.hasOwnProperty("rtime_before"))
                object.rtime_before = message.rtime_before;
            if (message.rtime_after != null && message.hasOwnProperty("rtime_after"))
                object.rtime_after = message.rtime_after;
            if (message.qualified != null && message.hasOwnProperty("qualified"))
                object.qualified = message.qualified;
            if (message.events && message.events.length) {
                object.events = [];
                for (var j = 0; j < message.events.length; ++j)
                    object.events[j] = $root.CClanEventUserNewsTuple.toObject(message.events[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CClanMatchEventByRange to JSON.
         * @function toJSON
         * @memberof CClanMatchEventByRange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CClanMatchEventByRange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CClanMatchEventByRange;
    })();
    
    $root.CCommunity_ClanAnnouncementInfo = (function() {
    
        /**
         * Properties of a CCommunity_ClanAnnouncementInfo.
         * @exports ICCommunity_ClanAnnouncementInfo
         * @interface ICCommunity_ClanAnnouncementInfo
         * @property {number|Long|null} [gid] CCommunity_ClanAnnouncementInfo gid
         * @property {number|Long|null} [clanid] CCommunity_ClanAnnouncementInfo clanid
         * @property {number|Long|null} [posterid] CCommunity_ClanAnnouncementInfo posterid
         * @property {string|null} [headline] CCommunity_ClanAnnouncementInfo headline
         * @property {number|null} [posttime] CCommunity_ClanAnnouncementInfo posttime
         * @property {number|null} [updatetime] CCommunity_ClanAnnouncementInfo updatetime
         * @property {string|null} [body] CCommunity_ClanAnnouncementInfo body
         * @property {number|null} [commentcount] CCommunity_ClanAnnouncementInfo commentcount
         * @property {Array.<string>|null} [tags] CCommunity_ClanAnnouncementInfo tags
         * @property {number|null} [language] CCommunity_ClanAnnouncementInfo language
         * @property {boolean|null} [hidden] CCommunity_ClanAnnouncementInfo hidden
         * @property {number|Long|null} [forum_topic_id] CCommunity_ClanAnnouncementInfo forum_topic_id
         */
    
        /**
         * Constructs a new CCommunity_ClanAnnouncementInfo.
         * @exports CCommunity_ClanAnnouncementInfo
         * @classdesc Represents a CCommunity_ClanAnnouncementInfo.
         * @implements ICCommunity_ClanAnnouncementInfo
         * @constructor
         * @param {ICCommunity_ClanAnnouncementInfo=} [properties] Properties to set
         */
        function CCommunity_ClanAnnouncementInfo(properties) {
            this.tags = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCommunity_ClanAnnouncementInfo gid.
         * @member {number|Long} gid
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.gid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo clanid.
         * @member {number|Long} clanid
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.clanid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo posterid.
         * @member {number|Long} posterid
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.posterid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo headline.
         * @member {string} headline
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.headline = "";
    
        /**
         * CCommunity_ClanAnnouncementInfo posttime.
         * @member {number} posttime
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.posttime = 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo updatetime.
         * @member {number} updatetime
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.updatetime = 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo body.
         * @member {string} body
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.body = "";
    
        /**
         * CCommunity_ClanAnnouncementInfo commentcount.
         * @member {number} commentcount
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.commentcount = 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo tags.
         * @member {Array.<string>} tags
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.tags = $util.emptyArray;
    
        /**
         * CCommunity_ClanAnnouncementInfo language.
         * @member {number} language
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.language = 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo hidden.
         * @member {boolean} hidden
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.hidden = false;
    
        /**
         * CCommunity_ClanAnnouncementInfo forum_topic_id.
         * @member {number|Long} forum_topic_id
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.forum_topic_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CCommunity_ClanAnnouncementInfo instance using the specified properties.
         * @function create
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {ICCommunity_ClanAnnouncementInfo=} [properties] Properties to set
         * @returns {CCommunity_ClanAnnouncementInfo} CCommunity_ClanAnnouncementInfo instance
         */
        CCommunity_ClanAnnouncementInfo.create = function create(properties) {
            return new CCommunity_ClanAnnouncementInfo(properties);
        };
    
        /**
         * Encodes the specified CCommunity_ClanAnnouncementInfo message. Does not implicitly {@link CCommunity_ClanAnnouncementInfo.verify|verify} messages.
         * @function encode
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {ICCommunity_ClanAnnouncementInfo} message CCommunity_ClanAnnouncementInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_ClanAnnouncementInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gid != null && message.hasOwnProperty("gid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.gid);
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.clanid);
            if (message.posterid != null && message.hasOwnProperty("posterid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.posterid);
            if (message.headline != null && message.hasOwnProperty("headline"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.headline);
            if (message.posttime != null && message.hasOwnProperty("posttime"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.posttime);
            if (message.updatetime != null && message.hasOwnProperty("updatetime"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.updatetime);
            if (message.body != null && message.hasOwnProperty("body"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
            if (message.commentcount != null && message.hasOwnProperty("commentcount"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.commentcount);
            if (message.tags != null && message.tags.length)
                for (var i = 0; i < message.tags.length; ++i)
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.tags[i]);
            if (message.language != null && message.hasOwnProperty("language"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.language);
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.hidden);
            if (message.forum_topic_id != null && message.hasOwnProperty("forum_topic_id"))
                writer.uint32(/* id 12, wireType 1 =*/97).fixed64(message.forum_topic_id);
            return writer;
        };
    
        /**
         * Encodes the specified CCommunity_ClanAnnouncementInfo message, length delimited. Does not implicitly {@link CCommunity_ClanAnnouncementInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {ICCommunity_ClanAnnouncementInfo} message CCommunity_ClanAnnouncementInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_ClanAnnouncementInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCommunity_ClanAnnouncementInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCommunity_ClanAnnouncementInfo} CCommunity_ClanAnnouncementInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_ClanAnnouncementInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCommunity_ClanAnnouncementInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gid = reader.uint64();
                    break;
                case 2:
                    message.clanid = reader.uint64();
                    break;
                case 3:
                    message.posterid = reader.uint64();
                    break;
                case 4:
                    message.headline = reader.string();
                    break;
                case 5:
                    message.posttime = reader.uint32();
                    break;
                case 6:
                    message.updatetime = reader.uint32();
                    break;
                case 7:
                    message.body = reader.string();
                    break;
                case 8:
                    message.commentcount = reader.int32();
                    break;
                case 9:
                    if (!(message.tags && message.tags.length))
                        message.tags = [];
                    message.tags.push(reader.string());
                    break;
                case 10:
                    message.language = reader.int32();
                    break;
                case 11:
                    message.hidden = reader.bool();
                    break;
                case 12:
                    message.forum_topic_id = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCommunity_ClanAnnouncementInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCommunity_ClanAnnouncementInfo} CCommunity_ClanAnnouncementInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_ClanAnnouncementInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCommunity_ClanAnnouncementInfo message.
         * @function verify
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCommunity_ClanAnnouncementInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gid != null && message.hasOwnProperty("gid"))
                if (!$util.isInteger(message.gid) && !(message.gid && $util.isInteger(message.gid.low) && $util.isInteger(message.gid.high)))
                    return "gid: integer|Long expected";
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                if (!$util.isInteger(message.clanid) && !(message.clanid && $util.isInteger(message.clanid.low) && $util.isInteger(message.clanid.high)))
                    return "clanid: integer|Long expected";
            if (message.posterid != null && message.hasOwnProperty("posterid"))
                if (!$util.isInteger(message.posterid) && !(message.posterid && $util.isInteger(message.posterid.low) && $util.isInteger(message.posterid.high)))
                    return "posterid: integer|Long expected";
            if (message.headline != null && message.hasOwnProperty("headline"))
                if (!$util.isString(message.headline))
                    return "headline: string expected";
            if (message.posttime != null && message.hasOwnProperty("posttime"))
                if (!$util.isInteger(message.posttime))
                    return "posttime: integer expected";
            if (message.updatetime != null && message.hasOwnProperty("updatetime"))
                if (!$util.isInteger(message.updatetime))
                    return "updatetime: integer expected";
            if (message.body != null && message.hasOwnProperty("body"))
                if (!$util.isString(message.body))
                    return "body: string expected";
            if (message.commentcount != null && message.hasOwnProperty("commentcount"))
                if (!$util.isInteger(message.commentcount))
                    return "commentcount: integer expected";
            if (message.tags != null && message.hasOwnProperty("tags")) {
                if (!Array.isArray(message.tags))
                    return "tags: array expected";
                for (var i = 0; i < message.tags.length; ++i)
                    if (!$util.isString(message.tags[i]))
                        return "tags: string[] expected";
            }
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isInteger(message.language))
                    return "language: integer expected";
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                if (typeof message.hidden !== "boolean")
                    return "hidden: boolean expected";
            if (message.forum_topic_id != null && message.hasOwnProperty("forum_topic_id"))
                if (!$util.isInteger(message.forum_topic_id) && !(message.forum_topic_id && $util.isInteger(message.forum_topic_id.low) && $util.isInteger(message.forum_topic_id.high)))
                    return "forum_topic_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CCommunity_ClanAnnouncementInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCommunity_ClanAnnouncementInfo} CCommunity_ClanAnnouncementInfo
         */
        CCommunity_ClanAnnouncementInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CCommunity_ClanAnnouncementInfo)
                return object;
            var message = new $root.CCommunity_ClanAnnouncementInfo();
            if (object.gid != null)
                if ($util.Long)
                    (message.gid = $util.Long.fromValue(object.gid)).unsigned = true;
                else if (typeof object.gid === "string")
                    message.gid = parseInt(object.gid, 10);
                else if (typeof object.gid === "number")
                    message.gid = object.gid;
                else if (typeof object.gid === "object")
                    message.gid = new $util.LongBits(object.gid.low >>> 0, object.gid.high >>> 0).toNumber(true);
            if (object.clanid != null)
                if ($util.Long)
                    (message.clanid = $util.Long.fromValue(object.clanid)).unsigned = true;
                else if (typeof object.clanid === "string")
                    message.clanid = parseInt(object.clanid, 10);
                else if (typeof object.clanid === "number")
                    message.clanid = object.clanid;
                else if (typeof object.clanid === "object")
                    message.clanid = new $util.LongBits(object.clanid.low >>> 0, object.clanid.high >>> 0).toNumber(true);
            if (object.posterid != null)
                if ($util.Long)
                    (message.posterid = $util.Long.fromValue(object.posterid)).unsigned = true;
                else if (typeof object.posterid === "string")
                    message.posterid = parseInt(object.posterid, 10);
                else if (typeof object.posterid === "number")
                    message.posterid = object.posterid;
                else if (typeof object.posterid === "object")
                    message.posterid = new $util.LongBits(object.posterid.low >>> 0, object.posterid.high >>> 0).toNumber(true);
            if (object.headline != null)
                message.headline = String(object.headline);
            if (object.posttime != null)
                message.posttime = object.posttime >>> 0;
            if (object.updatetime != null)
                message.updatetime = object.updatetime >>> 0;
            if (object.body != null)
                message.body = String(object.body);
            if (object.commentcount != null)
                message.commentcount = object.commentcount | 0;
            if (object.tags) {
                if (!Array.isArray(object.tags))
                    throw TypeError(".CCommunity_ClanAnnouncementInfo.tags: array expected");
                message.tags = [];
                for (var i = 0; i < object.tags.length; ++i)
                    message.tags[i] = String(object.tags[i]);
            }
            if (object.language != null)
                message.language = object.language | 0;
            if (object.hidden != null)
                message.hidden = Boolean(object.hidden);
            if (object.forum_topic_id != null)
                if ($util.Long)
                    (message.forum_topic_id = $util.Long.fromValue(object.forum_topic_id)).unsigned = false;
                else if (typeof object.forum_topic_id === "string")
                    message.forum_topic_id = parseInt(object.forum_topic_id, 10);
                else if (typeof object.forum_topic_id === "number")
                    message.forum_topic_id = object.forum_topic_id;
                else if (typeof object.forum_topic_id === "object")
                    message.forum_topic_id = new $util.LongBits(object.forum_topic_id.low >>> 0, object.forum_topic_id.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CCommunity_ClanAnnouncementInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {CCommunity_ClanAnnouncementInfo} message CCommunity_ClanAnnouncementInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCommunity_ClanAnnouncementInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tags = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.gid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.clanid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.clanid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.posterid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.posterid = options.longs === String ? "0" : 0;
                object.headline = "";
                object.posttime = 0;
                object.updatetime = 0;
                object.body = "";
                object.commentcount = 0;
                object.language = 0;
                object.hidden = false;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.forum_topic_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.forum_topic_id = options.longs === String ? "0" : 0;
            }
            if (message.gid != null && message.hasOwnProperty("gid"))
                if (typeof message.gid === "number")
                    object.gid = options.longs === String ? String(message.gid) : message.gid;
                else
                    object.gid = options.longs === String ? $util.Long.prototype.toString.call(message.gid) : options.longs === Number ? new $util.LongBits(message.gid.low >>> 0, message.gid.high >>> 0).toNumber(true) : message.gid;
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                if (typeof message.clanid === "number")
                    object.clanid = options.longs === String ? String(message.clanid) : message.clanid;
                else
                    object.clanid = options.longs === String ? $util.Long.prototype.toString.call(message.clanid) : options.longs === Number ? new $util.LongBits(message.clanid.low >>> 0, message.clanid.high >>> 0).toNumber(true) : message.clanid;
            if (message.posterid != null && message.hasOwnProperty("posterid"))
                if (typeof message.posterid === "number")
                    object.posterid = options.longs === String ? String(message.posterid) : message.posterid;
                else
                    object.posterid = options.longs === String ? $util.Long.prototype.toString.call(message.posterid) : options.longs === Number ? new $util.LongBits(message.posterid.low >>> 0, message.posterid.high >>> 0).toNumber(true) : message.posterid;
            if (message.headline != null && message.hasOwnProperty("headline"))
                object.headline = message.headline;
            if (message.posttime != null && message.hasOwnProperty("posttime"))
                object.posttime = message.posttime;
            if (message.updatetime != null && message.hasOwnProperty("updatetime"))
                object.updatetime = message.updatetime;
            if (message.body != null && message.hasOwnProperty("body"))
                object.body = message.body;
            if (message.commentcount != null && message.hasOwnProperty("commentcount"))
                object.commentcount = message.commentcount;
            if (message.tags && message.tags.length) {
                object.tags = [];
                for (var j = 0; j < message.tags.length; ++j)
                    object.tags[j] = message.tags[j];
            }
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                object.hidden = message.hidden;
            if (message.forum_topic_id != null && message.hasOwnProperty("forum_topic_id"))
                if (typeof message.forum_topic_id === "number")
                    object.forum_topic_id = options.longs === String ? String(message.forum_topic_id) : message.forum_topic_id;
                else
                    object.forum_topic_id = options.longs === String ? $util.Long.prototype.toString.call(message.forum_topic_id) : options.longs === Number ? new $util.LongBits(message.forum_topic_id.low >>> 0, message.forum_topic_id.high >>> 0).toNumber() : message.forum_topic_id;
            return object;
        };
    
        /**
         * Converts this CCommunity_ClanAnnouncementInfo to JSON.
         * @function toJSON
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCommunity_ClanAnnouncementInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCommunity_ClanAnnouncementInfo;
    })();
    
    $root.CClanEventData = (function() {
    
        /**
         * Properties of a CClanEventData.
         * @exports ICClanEventData
         * @interface ICClanEventData
         * @property {number|Long|null} [gid] CClanEventData gid
         * @property {number|Long|null} [clan_steamid] CClanEventData clan_steamid
         * @property {string|null} [event_name] CClanEventData event_name
         * @property {EProtoClanEventType|null} [event_type] CClanEventData event_type
         * @property {number|null} [appid] CClanEventData appid
         * @property {string|null} [server_address] CClanEventData server_address
         * @property {string|null} [server_password] CClanEventData server_password
         * @property {number|null} [rtime32_start_time] CClanEventData rtime32_start_time
         * @property {number|null} [rtime32_end_time] CClanEventData rtime32_end_time
         * @property {number|null} [comment_count] CClanEventData comment_count
         * @property {number|Long|null} [creator_steamid] CClanEventData creator_steamid
         * @property {number|Long|null} [last_update_steamid] CClanEventData last_update_steamid
         * @property {string|null} [event_notes] CClanEventData event_notes
         * @property {string|null} [jsondata] CClanEventData jsondata
         * @property {ICCommunity_ClanAnnouncementInfo|null} [announcement_body] CClanEventData announcement_body
         * @property {boolean|null} [published] CClanEventData published
         * @property {boolean|null} [hidden] CClanEventData hidden
         * @property {number|null} [rtime32_visibility_start] CClanEventData rtime32_visibility_start
         * @property {number|null} [rtime32_visibility_end] CClanEventData rtime32_visibility_end
         * @property {number|null} [broadcaster_accountid] CClanEventData broadcaster_accountid
         * @property {number|null} [follower_count] CClanEventData follower_count
         * @property {number|null} [ignore_count] CClanEventData ignore_count
         * @property {number|Long|null} [forum_topic_id] CClanEventData forum_topic_id
         * @property {number|null} [rtime32_last_modified] CClanEventData rtime32_last_modified
         */
    
        /**
         * Constructs a new CClanEventData.
         * @exports CClanEventData
         * @classdesc Represents a CClanEventData.
         * @implements ICClanEventData
         * @constructor
         * @param {ICClanEventData=} [properties] Properties to set
         */
        function CClanEventData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CClanEventData gid.
         * @member {number|Long} gid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.gid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventData clan_steamid.
         * @member {number|Long} clan_steamid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.clan_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventData event_name.
         * @member {string} event_name
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.event_name = "";
    
        /**
         * CClanEventData event_type.
         * @member {EProtoClanEventType} event_type
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.event_type = 1;
    
        /**
         * CClanEventData appid.
         * @member {number} appid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.appid = 0;
    
        /**
         * CClanEventData server_address.
         * @member {string} server_address
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.server_address = "";
    
        /**
         * CClanEventData server_password.
         * @member {string} server_password
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.server_password = "";
    
        /**
         * CClanEventData rtime32_start_time.
         * @member {number} rtime32_start_time
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.rtime32_start_time = 0;
    
        /**
         * CClanEventData rtime32_end_time.
         * @member {number} rtime32_end_time
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.rtime32_end_time = 0;
    
        /**
         * CClanEventData comment_count.
         * @member {number} comment_count
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.comment_count = 0;
    
        /**
         * CClanEventData creator_steamid.
         * @member {number|Long} creator_steamid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.creator_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventData last_update_steamid.
         * @member {number|Long} last_update_steamid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.last_update_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventData event_notes.
         * @member {string} event_notes
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.event_notes = "";
    
        /**
         * CClanEventData jsondata.
         * @member {string} jsondata
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.jsondata = "";
    
        /**
         * CClanEventData announcement_body.
         * @member {ICCommunity_ClanAnnouncementInfo|null|undefined} announcement_body
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.announcement_body = null;
    
        /**
         * CClanEventData published.
         * @member {boolean} published
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.published = false;
    
        /**
         * CClanEventData hidden.
         * @member {boolean} hidden
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.hidden = false;
    
        /**
         * CClanEventData rtime32_visibility_start.
         * @member {number} rtime32_visibility_start
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.rtime32_visibility_start = 0;
    
        /**
         * CClanEventData rtime32_visibility_end.
         * @member {number} rtime32_visibility_end
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.rtime32_visibility_end = 0;
    
        /**
         * CClanEventData broadcaster_accountid.
         * @member {number} broadcaster_accountid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.broadcaster_accountid = 0;
    
        /**
         * CClanEventData follower_count.
         * @member {number} follower_count
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.follower_count = 0;
    
        /**
         * CClanEventData ignore_count.
         * @member {number} ignore_count
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.ignore_count = 0;
    
        /**
         * CClanEventData forum_topic_id.
         * @member {number|Long} forum_topic_id
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.forum_topic_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventData rtime32_last_modified.
         * @member {number} rtime32_last_modified
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.rtime32_last_modified = 0;
    
        /**
         * Creates a new CClanEventData instance using the specified properties.
         * @function create
         * @memberof CClanEventData
         * @static
         * @param {ICClanEventData=} [properties] Properties to set
         * @returns {CClanEventData} CClanEventData instance
         */
        CClanEventData.create = function create(properties) {
            return new CClanEventData(properties);
        };
    
        /**
         * Encodes the specified CClanEventData message. Does not implicitly {@link CClanEventData.verify|verify} messages.
         * @function encode
         * @memberof CClanEventData
         * @static
         * @param {ICClanEventData} message CClanEventData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClanEventData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gid != null && message.hasOwnProperty("gid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.gid);
            if (message.clan_steamid != null && message.hasOwnProperty("clan_steamid"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.clan_steamid);
            if (message.event_name != null && message.hasOwnProperty("event_name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.event_name);
            if (message.event_type != null && message.hasOwnProperty("event_type"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.event_type);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.appid);
            if (message.server_address != null && message.hasOwnProperty("server_address"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.server_address);
            if (message.server_password != null && message.hasOwnProperty("server_password"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.server_password);
            if (message.rtime32_start_time != null && message.hasOwnProperty("rtime32_start_time"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.rtime32_start_time);
            if (message.rtime32_end_time != null && message.hasOwnProperty("rtime32_end_time"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.rtime32_end_time);
            if (message.comment_count != null && message.hasOwnProperty("comment_count"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.comment_count);
            if (message.creator_steamid != null && message.hasOwnProperty("creator_steamid"))
                writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.creator_steamid);
            if (message.last_update_steamid != null && message.hasOwnProperty("last_update_steamid"))
                writer.uint32(/* id 12, wireType 1 =*/97).fixed64(message.last_update_steamid);
            if (message.event_notes != null && message.hasOwnProperty("event_notes"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.event_notes);
            if (message.jsondata != null && message.hasOwnProperty("jsondata"))
                writer.uint32(/* id 14, wireType 2 =*/114).string(message.jsondata);
            if (message.announcement_body != null && message.hasOwnProperty("announcement_body"))
                $root.CCommunity_ClanAnnouncementInfo.encode(message.announcement_body, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            if (message.published != null && message.hasOwnProperty("published"))
                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.published);
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                writer.uint32(/* id 17, wireType 0 =*/136).bool(message.hidden);
            if (message.rtime32_visibility_start != null && message.hasOwnProperty("rtime32_visibility_start"))
                writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.rtime32_visibility_start);
            if (message.rtime32_visibility_end != null && message.hasOwnProperty("rtime32_visibility_end"))
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.rtime32_visibility_end);
            if (message.broadcaster_accountid != null && message.hasOwnProperty("broadcaster_accountid"))
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.broadcaster_accountid);
            if (message.follower_count != null && message.hasOwnProperty("follower_count"))
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.follower_count);
            if (message.ignore_count != null && message.hasOwnProperty("ignore_count"))
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.ignore_count);
            if (message.forum_topic_id != null && message.hasOwnProperty("forum_topic_id"))
                writer.uint32(/* id 23, wireType 1 =*/185).fixed64(message.forum_topic_id);
            if (message.rtime32_last_modified != null && message.hasOwnProperty("rtime32_last_modified"))
                writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.rtime32_last_modified);
            return writer;
        };
    
        /**
         * Encodes the specified CClanEventData message, length delimited. Does not implicitly {@link CClanEventData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CClanEventData
         * @static
         * @param {ICClanEventData} message CClanEventData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClanEventData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CClanEventData message from the specified reader or buffer.
         * @function decode
         * @memberof CClanEventData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CClanEventData} CClanEventData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClanEventData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CClanEventData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gid = reader.fixed64();
                    break;
                case 2:
                    message.clan_steamid = reader.fixed64();
                    break;
                case 3:
                    message.event_name = reader.string();
                    break;
                case 4:
                    message.event_type = reader.int32();
                    break;
                case 5:
                    message.appid = reader.uint32();
                    break;
                case 6:
                    message.server_address = reader.string();
                    break;
                case 7:
                    message.server_password = reader.string();
                    break;
                case 8:
                    message.rtime32_start_time = reader.uint32();
                    break;
                case 9:
                    message.rtime32_end_time = reader.uint32();
                    break;
                case 10:
                    message.comment_count = reader.int32();
                    break;
                case 11:
                    message.creator_steamid = reader.fixed64();
                    break;
                case 12:
                    message.last_update_steamid = reader.fixed64();
                    break;
                case 13:
                    message.event_notes = reader.string();
                    break;
                case 14:
                    message.jsondata = reader.string();
                    break;
                case 15:
                    message.announcement_body = $root.CCommunity_ClanAnnouncementInfo.decode(reader, reader.uint32());
                    break;
                case 16:
                    message.published = reader.bool();
                    break;
                case 17:
                    message.hidden = reader.bool();
                    break;
                case 18:
                    message.rtime32_visibility_start = reader.uint32();
                    break;
                case 19:
                    message.rtime32_visibility_end = reader.uint32();
                    break;
                case 20:
                    message.broadcaster_accountid = reader.uint32();
                    break;
                case 21:
                    message.follower_count = reader.uint32();
                    break;
                case 22:
                    message.ignore_count = reader.uint32();
                    break;
                case 23:
                    message.forum_topic_id = reader.fixed64();
                    break;
                case 24:
                    message.rtime32_last_modified = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CClanEventData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CClanEventData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CClanEventData} CClanEventData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClanEventData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CClanEventData message.
         * @function verify
         * @memberof CClanEventData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CClanEventData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gid != null && message.hasOwnProperty("gid"))
                if (!$util.isInteger(message.gid) && !(message.gid && $util.isInteger(message.gid.low) && $util.isInteger(message.gid.high)))
                    return "gid: integer|Long expected";
            if (message.clan_steamid != null && message.hasOwnProperty("clan_steamid"))
                if (!$util.isInteger(message.clan_steamid) && !(message.clan_steamid && $util.isInteger(message.clan_steamid.low) && $util.isInteger(message.clan_steamid.high)))
                    return "clan_steamid: integer|Long expected";
            if (message.event_name != null && message.hasOwnProperty("event_name"))
                if (!$util.isString(message.event_name))
                    return "event_name: string expected";
            if (message.event_type != null && message.hasOwnProperty("event_type"))
                switch (message.event_type) {
                default:
                    return "event_type: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                    break;
                }
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.server_address != null && message.hasOwnProperty("server_address"))
                if (!$util.isString(message.server_address))
                    return "server_address: string expected";
            if (message.server_password != null && message.hasOwnProperty("server_password"))
                if (!$util.isString(message.server_password))
                    return "server_password: string expected";
            if (message.rtime32_start_time != null && message.hasOwnProperty("rtime32_start_time"))
                if (!$util.isInteger(message.rtime32_start_time))
                    return "rtime32_start_time: integer expected";
            if (message.rtime32_end_time != null && message.hasOwnProperty("rtime32_end_time"))
                if (!$util.isInteger(message.rtime32_end_time))
                    return "rtime32_end_time: integer expected";
            if (message.comment_count != null && message.hasOwnProperty("comment_count"))
                if (!$util.isInteger(message.comment_count))
                    return "comment_count: integer expected";
            if (message.creator_steamid != null && message.hasOwnProperty("creator_steamid"))
                if (!$util.isInteger(message.creator_steamid) && !(message.creator_steamid && $util.isInteger(message.creator_steamid.low) && $util.isInteger(message.creator_steamid.high)))
                    return "creator_steamid: integer|Long expected";
            if (message.last_update_steamid != null && message.hasOwnProperty("last_update_steamid"))
                if (!$util.isInteger(message.last_update_steamid) && !(message.last_update_steamid && $util.isInteger(message.last_update_steamid.low) && $util.isInteger(message.last_update_steamid.high)))
                    return "last_update_steamid: integer|Long expected";
            if (message.event_notes != null && message.hasOwnProperty("event_notes"))
                if (!$util.isString(message.event_notes))
                    return "event_notes: string expected";
            if (message.jsondata != null && message.hasOwnProperty("jsondata"))
                if (!$util.isString(message.jsondata))
                    return "jsondata: string expected";
            if (message.announcement_body != null && message.hasOwnProperty("announcement_body")) {
                var error = $root.CCommunity_ClanAnnouncementInfo.verify(message.announcement_body);
                if (error)
                    return "announcement_body." + error;
            }
            if (message.published != null && message.hasOwnProperty("published"))
                if (typeof message.published !== "boolean")
                    return "published: boolean expected";
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                if (typeof message.hidden !== "boolean")
                    return "hidden: boolean expected";
            if (message.rtime32_visibility_start != null && message.hasOwnProperty("rtime32_visibility_start"))
                if (!$util.isInteger(message.rtime32_visibility_start))
                    return "rtime32_visibility_start: integer expected";
            if (message.rtime32_visibility_end != null && message.hasOwnProperty("rtime32_visibility_end"))
                if (!$util.isInteger(message.rtime32_visibility_end))
                    return "rtime32_visibility_end: integer expected";
            if (message.broadcaster_accountid != null && message.hasOwnProperty("broadcaster_accountid"))
                if (!$util.isInteger(message.broadcaster_accountid))
                    return "broadcaster_accountid: integer expected";
            if (message.follower_count != null && message.hasOwnProperty("follower_count"))
                if (!$util.isInteger(message.follower_count))
                    return "follower_count: integer expected";
            if (message.ignore_count != null && message.hasOwnProperty("ignore_count"))
                if (!$util.isInteger(message.ignore_count))
                    return "ignore_count: integer expected";
            if (message.forum_topic_id != null && message.hasOwnProperty("forum_topic_id"))
                if (!$util.isInteger(message.forum_topic_id) && !(message.forum_topic_id && $util.isInteger(message.forum_topic_id.low) && $util.isInteger(message.forum_topic_id.high)))
                    return "forum_topic_id: integer|Long expected";
            if (message.rtime32_last_modified != null && message.hasOwnProperty("rtime32_last_modified"))
                if (!$util.isInteger(message.rtime32_last_modified))
                    return "rtime32_last_modified: integer expected";
            return null;
        };
    
        /**
         * Creates a CClanEventData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CClanEventData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CClanEventData} CClanEventData
         */
        CClanEventData.fromObject = function fromObject(object) {
            if (object instanceof $root.CClanEventData)
                return object;
            var message = new $root.CClanEventData();
            if (object.gid != null)
                if ($util.Long)
                    (message.gid = $util.Long.fromValue(object.gid)).unsigned = false;
                else if (typeof object.gid === "string")
                    message.gid = parseInt(object.gid, 10);
                else if (typeof object.gid === "number")
                    message.gid = object.gid;
                else if (typeof object.gid === "object")
                    message.gid = new $util.LongBits(object.gid.low >>> 0, object.gid.high >>> 0).toNumber();
            if (object.clan_steamid != null)
                if ($util.Long)
                    (message.clan_steamid = $util.Long.fromValue(object.clan_steamid)).unsigned = false;
                else if (typeof object.clan_steamid === "string")
                    message.clan_steamid = parseInt(object.clan_steamid, 10);
                else if (typeof object.clan_steamid === "number")
                    message.clan_steamid = object.clan_steamid;
                else if (typeof object.clan_steamid === "object")
                    message.clan_steamid = new $util.LongBits(object.clan_steamid.low >>> 0, object.clan_steamid.high >>> 0).toNumber();
            if (object.event_name != null)
                message.event_name = String(object.event_name);
            switch (object.event_type) {
            case "k_EClanOtherEvent":
            case 1:
                message.event_type = 1;
                break;
            case "k_EClanGameEvent":
            case 2:
                message.event_type = 2;
                break;
            case "k_EClanPartyEvent":
            case 3:
                message.event_type = 3;
                break;
            case "k_EClanMeetingEvent":
            case 4:
                message.event_type = 4;
                break;
            case "k_EClanSpecialCauseEvent":
            case 5:
                message.event_type = 5;
                break;
            case "k_EClanMusicAndArtsEvent":
            case 6:
                message.event_type = 6;
                break;
            case "k_EClanSportsEvent":
            case 7:
                message.event_type = 7;
                break;
            case "k_EClanTripEvent":
            case 8:
                message.event_type = 8;
                break;
            case "k_EClanChatEvent":
            case 9:
                message.event_type = 9;
                break;
            case "k_EClanGameReleaseEvent":
            case 10:
                message.event_type = 10;
                break;
            case "k_EClanBroadcastEvent":
            case 11:
                message.event_type = 11;
                break;
            case "k_EClanSmallUpdateEvent":
            case 12:
                message.event_type = 12;
                break;
            case "k_EClanPreAnnounceMajorUpdateEvent":
            case 13:
                message.event_type = 13;
                break;
            case "k_EClanMajorUpdateEvent":
            case 14:
                message.event_type = 14;
                break;
            case "k_EClanDLCReleaseEvent":
            case 15:
                message.event_type = 15;
                break;
            case "k_EClanFutureReleaseEvent":
            case 16:
                message.event_type = 16;
                break;
            case "k_EClanESportTournamentStreamEvent":
            case 17:
                message.event_type = 17;
                break;
            case "k_EClanDevStreamEvent":
            case 18:
                message.event_type = 18;
                break;
            case "k_EClanFamousStreamEvent":
            case 19:
                message.event_type = 19;
                break;
            case "k_EClanGameSalesEvent":
            case 20:
                message.event_type = 20;
                break;
            case "k_EClanGameItemSalesEvent":
            case 21:
                message.event_type = 21;
                break;
            case "k_EClanInGameBonusXPEvent":
            case 22:
                message.event_type = 22;
                break;
            case "k_EClanInGameLootEvent":
            case 23:
                message.event_type = 23;
                break;
            case "k_EClanInGamePerksEvent":
            case 24:
                message.event_type = 24;
                break;
            case "k_EClanInGameChallengeEvent":
            case 25:
                message.event_type = 25;
                break;
            case "k_EClanInGameContestEvent":
            case 26:
                message.event_type = 26;
                break;
            case "k_EClanIRLEvent":
            case 27:
                message.event_type = 27;
                break;
            case "k_EClanNewsEvent":
            case 28:
                message.event_type = 28;
                break;
            case "k_EClanBetaReleaseEvent":
            case 29:
                message.event_type = 29;
                break;
            case "k_EClanInGameContentReleaseEvent":
            case 30:
                message.event_type = 30;
                break;
            case "k_EClanFreeTrial":
            case 31:
                message.event_type = 31;
                break;
            case "k_EClanSeasonRelease":
            case 32:
                message.event_type = 32;
                break;
            case "k_EClanSeasonUpdate":
            case 33:
                message.event_type = 33;
                break;
            }
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.server_address != null)
                message.server_address = String(object.server_address);
            if (object.server_password != null)
                message.server_password = String(object.server_password);
            if (object.rtime32_start_time != null)
                message.rtime32_start_time = object.rtime32_start_time >>> 0;
            if (object.rtime32_end_time != null)
                message.rtime32_end_time = object.rtime32_end_time >>> 0;
            if (object.comment_count != null)
                message.comment_count = object.comment_count | 0;
            if (object.creator_steamid != null)
                if ($util.Long)
                    (message.creator_steamid = $util.Long.fromValue(object.creator_steamid)).unsigned = false;
                else if (typeof object.creator_steamid === "string")
                    message.creator_steamid = parseInt(object.creator_steamid, 10);
                else if (typeof object.creator_steamid === "number")
                    message.creator_steamid = object.creator_steamid;
                else if (typeof object.creator_steamid === "object")
                    message.creator_steamid = new $util.LongBits(object.creator_steamid.low >>> 0, object.creator_steamid.high >>> 0).toNumber();
            if (object.last_update_steamid != null)
                if ($util.Long)
                    (message.last_update_steamid = $util.Long.fromValue(object.last_update_steamid)).unsigned = false;
                else if (typeof object.last_update_steamid === "string")
                    message.last_update_steamid = parseInt(object.last_update_steamid, 10);
                else if (typeof object.last_update_steamid === "number")
                    message.last_update_steamid = object.last_update_steamid;
                else if (typeof object.last_update_steamid === "object")
                    message.last_update_steamid = new $util.LongBits(object.last_update_steamid.low >>> 0, object.last_update_steamid.high >>> 0).toNumber();
            if (object.event_notes != null)
                message.event_notes = String(object.event_notes);
            if (object.jsondata != null)
                message.jsondata = String(object.jsondata);
            if (object.announcement_body != null) {
                if (typeof object.announcement_body !== "object")
                    throw TypeError(".CClanEventData.announcement_body: object expected");
                message.announcement_body = $root.CCommunity_ClanAnnouncementInfo.fromObject(object.announcement_body);
            }
            if (object.published != null)
                message.published = Boolean(object.published);
            if (object.hidden != null)
                message.hidden = Boolean(object.hidden);
            if (object.rtime32_visibility_start != null)
                message.rtime32_visibility_start = object.rtime32_visibility_start >>> 0;
            if (object.rtime32_visibility_end != null)
                message.rtime32_visibility_end = object.rtime32_visibility_end >>> 0;
            if (object.broadcaster_accountid != null)
                message.broadcaster_accountid = object.broadcaster_accountid >>> 0;
            if (object.follower_count != null)
                message.follower_count = object.follower_count >>> 0;
            if (object.ignore_count != null)
                message.ignore_count = object.ignore_count >>> 0;
            if (object.forum_topic_id != null)
                if ($util.Long)
                    (message.forum_topic_id = $util.Long.fromValue(object.forum_topic_id)).unsigned = false;
                else if (typeof object.forum_topic_id === "string")
                    message.forum_topic_id = parseInt(object.forum_topic_id, 10);
                else if (typeof object.forum_topic_id === "number")
                    message.forum_topic_id = object.forum_topic_id;
                else if (typeof object.forum_topic_id === "object")
                    message.forum_topic_id = new $util.LongBits(object.forum_topic_id.low >>> 0, object.forum_topic_id.high >>> 0).toNumber();
            if (object.rtime32_last_modified != null)
                message.rtime32_last_modified = object.rtime32_last_modified >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CClanEventData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CClanEventData
         * @static
         * @param {CClanEventData} message CClanEventData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CClanEventData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.gid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.clan_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.clan_steamid = options.longs === String ? "0" : 0;
                object.event_name = "";
                object.event_type = options.enums === String ? "k_EClanOtherEvent" : 1;
                object.appid = 0;
                object.server_address = "";
                object.server_password = "";
                object.rtime32_start_time = 0;
                object.rtime32_end_time = 0;
                object.comment_count = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.creator_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.creator_steamid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.last_update_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.last_update_steamid = options.longs === String ? "0" : 0;
                object.event_notes = "";
                object.jsondata = "";
                object.announcement_body = null;
                object.published = false;
                object.hidden = false;
                object.rtime32_visibility_start = 0;
                object.rtime32_visibility_end = 0;
                object.broadcaster_accountid = 0;
                object.follower_count = 0;
                object.ignore_count = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.forum_topic_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.forum_topic_id = options.longs === String ? "0" : 0;
                object.rtime32_last_modified = 0;
            }
            if (message.gid != null && message.hasOwnProperty("gid"))
                if (typeof message.gid === "number")
                    object.gid = options.longs === String ? String(message.gid) : message.gid;
                else
                    object.gid = options.longs === String ? $util.Long.prototype.toString.call(message.gid) : options.longs === Number ? new $util.LongBits(message.gid.low >>> 0, message.gid.high >>> 0).toNumber() : message.gid;
            if (message.clan_steamid != null && message.hasOwnProperty("clan_steamid"))
                if (typeof message.clan_steamid === "number")
                    object.clan_steamid = options.longs === String ? String(message.clan_steamid) : message.clan_steamid;
                else
                    object.clan_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.clan_steamid) : options.longs === Number ? new $util.LongBits(message.clan_steamid.low >>> 0, message.clan_steamid.high >>> 0).toNumber() : message.clan_steamid;
            if (message.event_name != null && message.hasOwnProperty("event_name"))
                object.event_name = message.event_name;
            if (message.event_type != null && message.hasOwnProperty("event_type"))
                object.event_type = options.enums === String ? $root.EProtoClanEventType[message.event_type] : message.event_type;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.server_address != null && message.hasOwnProperty("server_address"))
                object.server_address = message.server_address;
            if (message.server_password != null && message.hasOwnProperty("server_password"))
                object.server_password = message.server_password;
            if (message.rtime32_start_time != null && message.hasOwnProperty("rtime32_start_time"))
                object.rtime32_start_time = message.rtime32_start_time;
            if (message.rtime32_end_time != null && message.hasOwnProperty("rtime32_end_time"))
                object.rtime32_end_time = message.rtime32_end_time;
            if (message.comment_count != null && message.hasOwnProperty("comment_count"))
                object.comment_count = message.comment_count;
            if (message.creator_steamid != null && message.hasOwnProperty("creator_steamid"))
                if (typeof message.creator_steamid === "number")
                    object.creator_steamid = options.longs === String ? String(message.creator_steamid) : message.creator_steamid;
                else
                    object.creator_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.creator_steamid) : options.longs === Number ? new $util.LongBits(message.creator_steamid.low >>> 0, message.creator_steamid.high >>> 0).toNumber() : message.creator_steamid;
            if (message.last_update_steamid != null && message.hasOwnProperty("last_update_steamid"))
                if (typeof message.last_update_steamid === "number")
                    object.last_update_steamid = options.longs === String ? String(message.last_update_steamid) : message.last_update_steamid;
                else
                    object.last_update_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.last_update_steamid) : options.longs === Number ? new $util.LongBits(message.last_update_steamid.low >>> 0, message.last_update_steamid.high >>> 0).toNumber() : message.last_update_steamid;
            if (message.event_notes != null && message.hasOwnProperty("event_notes"))
                object.event_notes = message.event_notes;
            if (message.jsondata != null && message.hasOwnProperty("jsondata"))
                object.jsondata = message.jsondata;
            if (message.announcement_body != null && message.hasOwnProperty("announcement_body"))
                object.announcement_body = $root.CCommunity_ClanAnnouncementInfo.toObject(message.announcement_body, options);
            if (message.published != null && message.hasOwnProperty("published"))
                object.published = message.published;
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                object.hidden = message.hidden;
            if (message.rtime32_visibility_start != null && message.hasOwnProperty("rtime32_visibility_start"))
                object.rtime32_visibility_start = message.rtime32_visibility_start;
            if (message.rtime32_visibility_end != null && message.hasOwnProperty("rtime32_visibility_end"))
                object.rtime32_visibility_end = message.rtime32_visibility_end;
            if (message.broadcaster_accountid != null && message.hasOwnProperty("broadcaster_accountid"))
                object.broadcaster_accountid = message.broadcaster_accountid;
            if (message.follower_count != null && message.hasOwnProperty("follower_count"))
                object.follower_count = message.follower_count;
            if (message.ignore_count != null && message.hasOwnProperty("ignore_count"))
                object.ignore_count = message.ignore_count;
            if (message.forum_topic_id != null && message.hasOwnProperty("forum_topic_id"))
                if (typeof message.forum_topic_id === "number")
                    object.forum_topic_id = options.longs === String ? String(message.forum_topic_id) : message.forum_topic_id;
                else
                    object.forum_topic_id = options.longs === String ? $util.Long.prototype.toString.call(message.forum_topic_id) : options.longs === Number ? new $util.LongBits(message.forum_topic_id.low >>> 0, message.forum_topic_id.high >>> 0).toNumber() : message.forum_topic_id;
            if (message.rtime32_last_modified != null && message.hasOwnProperty("rtime32_last_modified"))
                object.rtime32_last_modified = message.rtime32_last_modified;
            return object;
        };
    
        /**
         * Converts this CClanEventData to JSON.
         * @function toJSON
         * @memberof CClanEventData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CClanEventData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CClanEventData;
    })();
    
    $root.CMsgClientFriendMsg = (function() {
    
        /**
         * Properties of a CMsgClientFriendMsg.
         * @exports ICMsgClientFriendMsg
         * @interface ICMsgClientFriendMsg
         * @property {number|Long|null} [steamid] CMsgClientFriendMsg steamid
         * @property {number|null} [chat_entry_type] CMsgClientFriendMsg chat_entry_type
         * @property {Uint8Array|null} [message] CMsgClientFriendMsg message
         * @property {number|null} [rtime32_server_timestamp] CMsgClientFriendMsg rtime32_server_timestamp
         * @property {boolean|null} [echo_to_sender] CMsgClientFriendMsg echo_to_sender
         */
    
        /**
         * Constructs a new CMsgClientFriendMsg.
         * @exports CMsgClientFriendMsg
         * @classdesc Represents a CMsgClientFriendMsg.
         * @implements ICMsgClientFriendMsg
         * @constructor
         * @param {ICMsgClientFriendMsg=} [properties] Properties to set
         */
        function CMsgClientFriendMsg(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientFriendMsg steamid.
         * @member {number|Long} steamid
         * @memberof CMsgClientFriendMsg
         * @instance
         */
        CMsgClientFriendMsg.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgClientFriendMsg chat_entry_type.
         * @member {number} chat_entry_type
         * @memberof CMsgClientFriendMsg
         * @instance
         */
        CMsgClientFriendMsg.prototype.chat_entry_type = 0;
    
        /**
         * CMsgClientFriendMsg message.
         * @member {Uint8Array} message
         * @memberof CMsgClientFriendMsg
         * @instance
         */
        CMsgClientFriendMsg.prototype.message = $util.newBuffer([]);
    
        /**
         * CMsgClientFriendMsg rtime32_server_timestamp.
         * @member {number} rtime32_server_timestamp
         * @memberof CMsgClientFriendMsg
         * @instance
         */
        CMsgClientFriendMsg.prototype.rtime32_server_timestamp = 0;
    
        /**
         * CMsgClientFriendMsg echo_to_sender.
         * @member {boolean} echo_to_sender
         * @memberof CMsgClientFriendMsg
         * @instance
         */
        CMsgClientFriendMsg.prototype.echo_to_sender = false;
    
        /**
         * Creates a new CMsgClientFriendMsg instance using the specified properties.
         * @function create
         * @memberof CMsgClientFriendMsg
         * @static
         * @param {ICMsgClientFriendMsg=} [properties] Properties to set
         * @returns {CMsgClientFriendMsg} CMsgClientFriendMsg instance
         */
        CMsgClientFriendMsg.create = function create(properties) {
            return new CMsgClientFriendMsg(properties);
        };
    
        /**
         * Encodes the specified CMsgClientFriendMsg message. Does not implicitly {@link CMsgClientFriendMsg.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientFriendMsg
         * @static
         * @param {ICMsgClientFriendMsg} message CMsgClientFriendMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientFriendMsg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.chat_entry_type != null && message.hasOwnProperty("chat_entry_type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.chat_entry_type);
            if (message.message != null && message.hasOwnProperty("message"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.message);
            if (message.rtime32_server_timestamp != null && message.hasOwnProperty("rtime32_server_timestamp"))
                writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.rtime32_server_timestamp);
            if (message.echo_to_sender != null && message.hasOwnProperty("echo_to_sender"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.echo_to_sender);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientFriendMsg message, length delimited. Does not implicitly {@link CMsgClientFriendMsg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientFriendMsg
         * @static
         * @param {ICMsgClientFriendMsg} message CMsgClientFriendMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientFriendMsg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientFriendMsg message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientFriendMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientFriendMsg} CMsgClientFriendMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientFriendMsg.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientFriendMsg();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.chat_entry_type = reader.int32();
                    break;
                case 3:
                    message.message = reader.bytes();
                    break;
                case 4:
                    message.rtime32_server_timestamp = reader.fixed32();
                    break;
                case 5:
                    message.echo_to_sender = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientFriendMsg message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientFriendMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientFriendMsg} CMsgClientFriendMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientFriendMsg.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientFriendMsg message.
         * @function verify
         * @memberof CMsgClientFriendMsg
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientFriendMsg.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.chat_entry_type != null && message.hasOwnProperty("chat_entry_type"))
                if (!$util.isInteger(message.chat_entry_type))
                    return "chat_entry_type: integer expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!(message.message && typeof message.message.length === "number" || $util.isString(message.message)))
                    return "message: buffer expected";
            if (message.rtime32_server_timestamp != null && message.hasOwnProperty("rtime32_server_timestamp"))
                if (!$util.isInteger(message.rtime32_server_timestamp))
                    return "rtime32_server_timestamp: integer expected";
            if (message.echo_to_sender != null && message.hasOwnProperty("echo_to_sender"))
                if (typeof message.echo_to_sender !== "boolean")
                    return "echo_to_sender: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientFriendMsg message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientFriendMsg
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientFriendMsg} CMsgClientFriendMsg
         */
        CMsgClientFriendMsg.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientFriendMsg)
                return object;
            var message = new $root.CMsgClientFriendMsg();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.chat_entry_type != null)
                message.chat_entry_type = object.chat_entry_type | 0;
            if (object.message != null)
                if (typeof object.message === "string")
                    $util.base64.decode(object.message, message.message = $util.newBuffer($util.base64.length(object.message)), 0);
                else if (object.message.length)
                    message.message = object.message;
            if (object.rtime32_server_timestamp != null)
                message.rtime32_server_timestamp = object.rtime32_server_timestamp >>> 0;
            if (object.echo_to_sender != null)
                message.echo_to_sender = Boolean(object.echo_to_sender);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientFriendMsg message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientFriendMsg
         * @static
         * @param {CMsgClientFriendMsg} message CMsgClientFriendMsg
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientFriendMsg.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.chat_entry_type = 0;
                if (options.bytes === String)
                    object.message = "";
                else {
                    object.message = [];
                    if (options.bytes !== Array)
                        object.message = $util.newBuffer(object.message);
                }
                object.rtime32_server_timestamp = 0;
                object.echo_to_sender = false;
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.chat_entry_type != null && message.hasOwnProperty("chat_entry_type"))
                object.chat_entry_type = message.chat_entry_type;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = options.bytes === String ? $util.base64.encode(message.message, 0, message.message.length) : options.bytes === Array ? Array.prototype.slice.call(message.message) : message.message;
            if (message.rtime32_server_timestamp != null && message.hasOwnProperty("rtime32_server_timestamp"))
                object.rtime32_server_timestamp = message.rtime32_server_timestamp;
            if (message.echo_to_sender != null && message.hasOwnProperty("echo_to_sender"))
                object.echo_to_sender = message.echo_to_sender;
            return object;
        };
    
        /**
         * Converts this CMsgClientFriendMsg to JSON.
         * @function toJSON
         * @memberof CMsgClientFriendMsg
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientFriendMsg.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientFriendMsg;
    })();
    
    $root.CMsgClientFriendMsgIncoming = (function() {
    
        /**
         * Properties of a CMsgClientFriendMsgIncoming.
         * @exports ICMsgClientFriendMsgIncoming
         * @interface ICMsgClientFriendMsgIncoming
         * @property {number|Long|null} [steamid_from] CMsgClientFriendMsgIncoming steamid_from
         * @property {number|null} [chat_entry_type] CMsgClientFriendMsgIncoming chat_entry_type
         * @property {boolean|null} [from_limited_account] CMsgClientFriendMsgIncoming from_limited_account
         * @property {Uint8Array|null} [message] CMsgClientFriendMsgIncoming message
         * @property {number|null} [rtime32_server_timestamp] CMsgClientFriendMsgIncoming rtime32_server_timestamp
         */
    
        /**
         * Constructs a new CMsgClientFriendMsgIncoming.
         * @exports CMsgClientFriendMsgIncoming
         * @classdesc Represents a CMsgClientFriendMsgIncoming.
         * @implements ICMsgClientFriendMsgIncoming
         * @constructor
         * @param {ICMsgClientFriendMsgIncoming=} [properties] Properties to set
         */
        function CMsgClientFriendMsgIncoming(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientFriendMsgIncoming steamid_from.
         * @member {number|Long} steamid_from
         * @memberof CMsgClientFriendMsgIncoming
         * @instance
         */
        CMsgClientFriendMsgIncoming.prototype.steamid_from = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgClientFriendMsgIncoming chat_entry_type.
         * @member {number} chat_entry_type
         * @memberof CMsgClientFriendMsgIncoming
         * @instance
         */
        CMsgClientFriendMsgIncoming.prototype.chat_entry_type = 0;
    
        /**
         * CMsgClientFriendMsgIncoming from_limited_account.
         * @member {boolean} from_limited_account
         * @memberof CMsgClientFriendMsgIncoming
         * @instance
         */
        CMsgClientFriendMsgIncoming.prototype.from_limited_account = false;
    
        /**
         * CMsgClientFriendMsgIncoming message.
         * @member {Uint8Array} message
         * @memberof CMsgClientFriendMsgIncoming
         * @instance
         */
        CMsgClientFriendMsgIncoming.prototype.message = $util.newBuffer([]);
    
        /**
         * CMsgClientFriendMsgIncoming rtime32_server_timestamp.
         * @member {number} rtime32_server_timestamp
         * @memberof CMsgClientFriendMsgIncoming
         * @instance
         */
        CMsgClientFriendMsgIncoming.prototype.rtime32_server_timestamp = 0;
    
        /**
         * Creates a new CMsgClientFriendMsgIncoming instance using the specified properties.
         * @function create
         * @memberof CMsgClientFriendMsgIncoming
         * @static
         * @param {ICMsgClientFriendMsgIncoming=} [properties] Properties to set
         * @returns {CMsgClientFriendMsgIncoming} CMsgClientFriendMsgIncoming instance
         */
        CMsgClientFriendMsgIncoming.create = function create(properties) {
            return new CMsgClientFriendMsgIncoming(properties);
        };
    
        /**
         * Encodes the specified CMsgClientFriendMsgIncoming message. Does not implicitly {@link CMsgClientFriendMsgIncoming.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientFriendMsgIncoming
         * @static
         * @param {ICMsgClientFriendMsgIncoming} message CMsgClientFriendMsgIncoming message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientFriendMsgIncoming.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid_from != null && message.hasOwnProperty("steamid_from"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid_from);
            if (message.chat_entry_type != null && message.hasOwnProperty("chat_entry_type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.chat_entry_type);
            if (message.from_limited_account != null && message.hasOwnProperty("from_limited_account"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.from_limited_account);
            if (message.message != null && message.hasOwnProperty("message"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.message);
            if (message.rtime32_server_timestamp != null && message.hasOwnProperty("rtime32_server_timestamp"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.rtime32_server_timestamp);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientFriendMsgIncoming message, length delimited. Does not implicitly {@link CMsgClientFriendMsgIncoming.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientFriendMsgIncoming
         * @static
         * @param {ICMsgClientFriendMsgIncoming} message CMsgClientFriendMsgIncoming message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientFriendMsgIncoming.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientFriendMsgIncoming message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientFriendMsgIncoming
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientFriendMsgIncoming} CMsgClientFriendMsgIncoming
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientFriendMsgIncoming.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientFriendMsgIncoming();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid_from = reader.fixed64();
                    break;
                case 2:
                    message.chat_entry_type = reader.int32();
                    break;
                case 3:
                    message.from_limited_account = reader.bool();
                    break;
                case 4:
                    message.message = reader.bytes();
                    break;
                case 5:
                    message.rtime32_server_timestamp = reader.fixed32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientFriendMsgIncoming message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientFriendMsgIncoming
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientFriendMsgIncoming} CMsgClientFriendMsgIncoming
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientFriendMsgIncoming.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientFriendMsgIncoming message.
         * @function verify
         * @memberof CMsgClientFriendMsgIncoming
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientFriendMsgIncoming.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid_from != null && message.hasOwnProperty("steamid_from"))
                if (!$util.isInteger(message.steamid_from) && !(message.steamid_from && $util.isInteger(message.steamid_from.low) && $util.isInteger(message.steamid_from.high)))
                    return "steamid_from: integer|Long expected";
            if (message.chat_entry_type != null && message.hasOwnProperty("chat_entry_type"))
                if (!$util.isInteger(message.chat_entry_type))
                    return "chat_entry_type: integer expected";
            if (message.from_limited_account != null && message.hasOwnProperty("from_limited_account"))
                if (typeof message.from_limited_account !== "boolean")
                    return "from_limited_account: boolean expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!(message.message && typeof message.message.length === "number" || $util.isString(message.message)))
                    return "message: buffer expected";
            if (message.rtime32_server_timestamp != null && message.hasOwnProperty("rtime32_server_timestamp"))
                if (!$util.isInteger(message.rtime32_server_timestamp))
                    return "rtime32_server_timestamp: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientFriendMsgIncoming message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientFriendMsgIncoming
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientFriendMsgIncoming} CMsgClientFriendMsgIncoming
         */
        CMsgClientFriendMsgIncoming.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientFriendMsgIncoming)
                return object;
            var message = new $root.CMsgClientFriendMsgIncoming();
            if (object.steamid_from != null)
                if ($util.Long)
                    (message.steamid_from = $util.Long.fromValue(object.steamid_from)).unsigned = false;
                else if (typeof object.steamid_from === "string")
                    message.steamid_from = parseInt(object.steamid_from, 10);
                else if (typeof object.steamid_from === "number")
                    message.steamid_from = object.steamid_from;
                else if (typeof object.steamid_from === "object")
                    message.steamid_from = new $util.LongBits(object.steamid_from.low >>> 0, object.steamid_from.high >>> 0).toNumber();
            if (object.chat_entry_type != null)
                message.chat_entry_type = object.chat_entry_type | 0;
            if (object.from_limited_account != null)
                message.from_limited_account = Boolean(object.from_limited_account);
            if (object.message != null)
                if (typeof object.message === "string")
                    $util.base64.decode(object.message, message.message = $util.newBuffer($util.base64.length(object.message)), 0);
                else if (object.message.length)
                    message.message = object.message;
            if (object.rtime32_server_timestamp != null)
                message.rtime32_server_timestamp = object.rtime32_server_timestamp >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientFriendMsgIncoming message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientFriendMsgIncoming
         * @static
         * @param {CMsgClientFriendMsgIncoming} message CMsgClientFriendMsgIncoming
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientFriendMsgIncoming.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid_from = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid_from = options.longs === String ? "0" : 0;
                object.chat_entry_type = 0;
                object.from_limited_account = false;
                if (options.bytes === String)
                    object.message = "";
                else {
                    object.message = [];
                    if (options.bytes !== Array)
                        object.message = $util.newBuffer(object.message);
                }
                object.rtime32_server_timestamp = 0;
            }
            if (message.steamid_from != null && message.hasOwnProperty("steamid_from"))
                if (typeof message.steamid_from === "number")
                    object.steamid_from = options.longs === String ? String(message.steamid_from) : message.steamid_from;
                else
                    object.steamid_from = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_from) : options.longs === Number ? new $util.LongBits(message.steamid_from.low >>> 0, message.steamid_from.high >>> 0).toNumber() : message.steamid_from;
            if (message.chat_entry_type != null && message.hasOwnProperty("chat_entry_type"))
                object.chat_entry_type = message.chat_entry_type;
            if (message.from_limited_account != null && message.hasOwnProperty("from_limited_account"))
                object.from_limited_account = message.from_limited_account;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = options.bytes === String ? $util.base64.encode(message.message, 0, message.message.length) : options.bytes === Array ? Array.prototype.slice.call(message.message) : message.message;
            if (message.rtime32_server_timestamp != null && message.hasOwnProperty("rtime32_server_timestamp"))
                object.rtime32_server_timestamp = message.rtime32_server_timestamp;
            return object;
        };
    
        /**
         * Converts this CMsgClientFriendMsgIncoming to JSON.
         * @function toJSON
         * @memberof CMsgClientFriendMsgIncoming
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientFriendMsgIncoming.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientFriendMsgIncoming;
    })();
    
    $root.CMsgClientAddFriend = (function() {
    
        /**
         * Properties of a CMsgClientAddFriend.
         * @exports ICMsgClientAddFriend
         * @interface ICMsgClientAddFriend
         * @property {number|Long|null} [steamid_to_add] CMsgClientAddFriend steamid_to_add
         * @property {string|null} [accountname_or_email_to_add] CMsgClientAddFriend accountname_or_email_to_add
         */
    
        /**
         * Constructs a new CMsgClientAddFriend.
         * @exports CMsgClientAddFriend
         * @classdesc Represents a CMsgClientAddFriend.
         * @implements ICMsgClientAddFriend
         * @constructor
         * @param {ICMsgClientAddFriend=} [properties] Properties to set
         */
        function CMsgClientAddFriend(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientAddFriend steamid_to_add.
         * @member {number|Long} steamid_to_add
         * @memberof CMsgClientAddFriend
         * @instance
         */
        CMsgClientAddFriend.prototype.steamid_to_add = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgClientAddFriend accountname_or_email_to_add.
         * @member {string} accountname_or_email_to_add
         * @memberof CMsgClientAddFriend
         * @instance
         */
        CMsgClientAddFriend.prototype.accountname_or_email_to_add = "";
    
        /**
         * Creates a new CMsgClientAddFriend instance using the specified properties.
         * @function create
         * @memberof CMsgClientAddFriend
         * @static
         * @param {ICMsgClientAddFriend=} [properties] Properties to set
         * @returns {CMsgClientAddFriend} CMsgClientAddFriend instance
         */
        CMsgClientAddFriend.create = function create(properties) {
            return new CMsgClientAddFriend(properties);
        };
    
        /**
         * Encodes the specified CMsgClientAddFriend message. Does not implicitly {@link CMsgClientAddFriend.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientAddFriend
         * @static
         * @param {ICMsgClientAddFriend} message CMsgClientAddFriend message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientAddFriend.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid_to_add != null && message.hasOwnProperty("steamid_to_add"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid_to_add);
            if (message.accountname_or_email_to_add != null && message.hasOwnProperty("accountname_or_email_to_add"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountname_or_email_to_add);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientAddFriend message, length delimited. Does not implicitly {@link CMsgClientAddFriend.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientAddFriend
         * @static
         * @param {ICMsgClientAddFriend} message CMsgClientAddFriend message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientAddFriend.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientAddFriend message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientAddFriend
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientAddFriend} CMsgClientAddFriend
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientAddFriend.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientAddFriend();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid_to_add = reader.fixed64();
                    break;
                case 2:
                    message.accountname_or_email_to_add = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientAddFriend message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientAddFriend
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientAddFriend} CMsgClientAddFriend
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientAddFriend.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientAddFriend message.
         * @function verify
         * @memberof CMsgClientAddFriend
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientAddFriend.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid_to_add != null && message.hasOwnProperty("steamid_to_add"))
                if (!$util.isInteger(message.steamid_to_add) && !(message.steamid_to_add && $util.isInteger(message.steamid_to_add.low) && $util.isInteger(message.steamid_to_add.high)))
                    return "steamid_to_add: integer|Long expected";
            if (message.accountname_or_email_to_add != null && message.hasOwnProperty("accountname_or_email_to_add"))
                if (!$util.isString(message.accountname_or_email_to_add))
                    return "accountname_or_email_to_add: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientAddFriend message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientAddFriend
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientAddFriend} CMsgClientAddFriend
         */
        CMsgClientAddFriend.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientAddFriend)
                return object;
            var message = new $root.CMsgClientAddFriend();
            if (object.steamid_to_add != null)
                if ($util.Long)
                    (message.steamid_to_add = $util.Long.fromValue(object.steamid_to_add)).unsigned = false;
                else if (typeof object.steamid_to_add === "string")
                    message.steamid_to_add = parseInt(object.steamid_to_add, 10);
                else if (typeof object.steamid_to_add === "number")
                    message.steamid_to_add = object.steamid_to_add;
                else if (typeof object.steamid_to_add === "object")
                    message.steamid_to_add = new $util.LongBits(object.steamid_to_add.low >>> 0, object.steamid_to_add.high >>> 0).toNumber();
            if (object.accountname_or_email_to_add != null)
                message.accountname_or_email_to_add = String(object.accountname_or_email_to_add);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientAddFriend message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientAddFriend
         * @static
         * @param {CMsgClientAddFriend} message CMsgClientAddFriend
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientAddFriend.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid_to_add = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid_to_add = options.longs === String ? "0" : 0;
                object.accountname_or_email_to_add = "";
            }
            if (message.steamid_to_add != null && message.hasOwnProperty("steamid_to_add"))
                if (typeof message.steamid_to_add === "number")
                    object.steamid_to_add = options.longs === String ? String(message.steamid_to_add) : message.steamid_to_add;
                else
                    object.steamid_to_add = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_to_add) : options.longs === Number ? new $util.LongBits(message.steamid_to_add.low >>> 0, message.steamid_to_add.high >>> 0).toNumber() : message.steamid_to_add;
            if (message.accountname_or_email_to_add != null && message.hasOwnProperty("accountname_or_email_to_add"))
                object.accountname_or_email_to_add = message.accountname_or_email_to_add;
            return object;
        };
    
        /**
         * Converts this CMsgClientAddFriend to JSON.
         * @function toJSON
         * @memberof CMsgClientAddFriend
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientAddFriend.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientAddFriend;
    })();
    
    $root.CMsgClientAddFriendResponse = (function() {
    
        /**
         * Properties of a CMsgClientAddFriendResponse.
         * @exports ICMsgClientAddFriendResponse
         * @interface ICMsgClientAddFriendResponse
         * @property {number|null} [eresult] CMsgClientAddFriendResponse eresult
         * @property {number|Long|null} [steam_id_added] CMsgClientAddFriendResponse steam_id_added
         * @property {string|null} [persona_name_added] CMsgClientAddFriendResponse persona_name_added
         */
    
        /**
         * Constructs a new CMsgClientAddFriendResponse.
         * @exports CMsgClientAddFriendResponse
         * @classdesc Represents a CMsgClientAddFriendResponse.
         * @implements ICMsgClientAddFriendResponse
         * @constructor
         * @param {ICMsgClientAddFriendResponse=} [properties] Properties to set
         */
        function CMsgClientAddFriendResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientAddFriendResponse eresult.
         * @member {number} eresult
         * @memberof CMsgClientAddFriendResponse
         * @instance
         */
        CMsgClientAddFriendResponse.prototype.eresult = 2;
    
        /**
         * CMsgClientAddFriendResponse steam_id_added.
         * @member {number|Long} steam_id_added
         * @memberof CMsgClientAddFriendResponse
         * @instance
         */
        CMsgClientAddFriendResponse.prototype.steam_id_added = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgClientAddFriendResponse persona_name_added.
         * @member {string} persona_name_added
         * @memberof CMsgClientAddFriendResponse
         * @instance
         */
        CMsgClientAddFriendResponse.prototype.persona_name_added = "";
    
        /**
         * Creates a new CMsgClientAddFriendResponse instance using the specified properties.
         * @function create
         * @memberof CMsgClientAddFriendResponse
         * @static
         * @param {ICMsgClientAddFriendResponse=} [properties] Properties to set
         * @returns {CMsgClientAddFriendResponse} CMsgClientAddFriendResponse instance
         */
        CMsgClientAddFriendResponse.create = function create(properties) {
            return new CMsgClientAddFriendResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgClientAddFriendResponse message. Does not implicitly {@link CMsgClientAddFriendResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientAddFriendResponse
         * @static
         * @param {ICMsgClientAddFriendResponse} message CMsgClientAddFriendResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientAddFriendResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eresult);
            if (message.steam_id_added != null && message.hasOwnProperty("steam_id_added"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.steam_id_added);
            if (message.persona_name_added != null && message.hasOwnProperty("persona_name_added"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.persona_name_added);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientAddFriendResponse message, length delimited. Does not implicitly {@link CMsgClientAddFriendResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientAddFriendResponse
         * @static
         * @param {ICMsgClientAddFriendResponse} message CMsgClientAddFriendResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientAddFriendResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientAddFriendResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientAddFriendResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientAddFriendResponse} CMsgClientAddFriendResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientAddFriendResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientAddFriendResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.int32();
                    break;
                case 2:
                    message.steam_id_added = reader.fixed64();
                    break;
                case 3:
                    message.persona_name_added = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientAddFriendResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientAddFriendResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientAddFriendResponse} CMsgClientAddFriendResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientAddFriendResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientAddFriendResponse message.
         * @function verify
         * @memberof CMsgClientAddFriendResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientAddFriendResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            if (message.steam_id_added != null && message.hasOwnProperty("steam_id_added"))
                if (!$util.isInteger(message.steam_id_added) && !(message.steam_id_added && $util.isInteger(message.steam_id_added.low) && $util.isInteger(message.steam_id_added.high)))
                    return "steam_id_added: integer|Long expected";
            if (message.persona_name_added != null && message.hasOwnProperty("persona_name_added"))
                if (!$util.isString(message.persona_name_added))
                    return "persona_name_added: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientAddFriendResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientAddFriendResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientAddFriendResponse} CMsgClientAddFriendResponse
         */
        CMsgClientAddFriendResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientAddFriendResponse)
                return object;
            var message = new $root.CMsgClientAddFriendResponse();
            if (object.eresult != null)
                message.eresult = object.eresult | 0;
            if (object.steam_id_added != null)
                if ($util.Long)
                    (message.steam_id_added = $util.Long.fromValue(object.steam_id_added)).unsigned = false;
                else if (typeof object.steam_id_added === "string")
                    message.steam_id_added = parseInt(object.steam_id_added, 10);
                else if (typeof object.steam_id_added === "number")
                    message.steam_id_added = object.steam_id_added;
                else if (typeof object.steam_id_added === "object")
                    message.steam_id_added = new $util.LongBits(object.steam_id_added.low >>> 0, object.steam_id_added.high >>> 0).toNumber();
            if (object.persona_name_added != null)
                message.persona_name_added = String(object.persona_name_added);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientAddFriendResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientAddFriendResponse
         * @static
         * @param {CMsgClientAddFriendResponse} message CMsgClientAddFriendResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientAddFriendResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eresult = 2;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steam_id_added = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steam_id_added = options.longs === String ? "0" : 0;
                object.persona_name_added = "";
            }
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            if (message.steam_id_added != null && message.hasOwnProperty("steam_id_added"))
                if (typeof message.steam_id_added === "number")
                    object.steam_id_added = options.longs === String ? String(message.steam_id_added) : message.steam_id_added;
                else
                    object.steam_id_added = options.longs === String ? $util.Long.prototype.toString.call(message.steam_id_added) : options.longs === Number ? new $util.LongBits(message.steam_id_added.low >>> 0, message.steam_id_added.high >>> 0).toNumber() : message.steam_id_added;
            if (message.persona_name_added != null && message.hasOwnProperty("persona_name_added"))
                object.persona_name_added = message.persona_name_added;
            return object;
        };
    
        /**
         * Converts this CMsgClientAddFriendResponse to JSON.
         * @function toJSON
         * @memberof CMsgClientAddFriendResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientAddFriendResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientAddFriendResponse;
    })();
    
    $root.CMsgClientRemoveFriend = (function() {
    
        /**
         * Properties of a CMsgClientRemoveFriend.
         * @exports ICMsgClientRemoveFriend
         * @interface ICMsgClientRemoveFriend
         * @property {number|Long|null} [friendid] CMsgClientRemoveFriend friendid
         */
    
        /**
         * Constructs a new CMsgClientRemoveFriend.
         * @exports CMsgClientRemoveFriend
         * @classdesc Represents a CMsgClientRemoveFriend.
         * @implements ICMsgClientRemoveFriend
         * @constructor
         * @param {ICMsgClientRemoveFriend=} [properties] Properties to set
         */
        function CMsgClientRemoveFriend(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientRemoveFriend friendid.
         * @member {number|Long} friendid
         * @memberof CMsgClientRemoveFriend
         * @instance
         */
        CMsgClientRemoveFriend.prototype.friendid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgClientRemoveFriend instance using the specified properties.
         * @function create
         * @memberof CMsgClientRemoveFriend
         * @static
         * @param {ICMsgClientRemoveFriend=} [properties] Properties to set
         * @returns {CMsgClientRemoveFriend} CMsgClientRemoveFriend instance
         */
        CMsgClientRemoveFriend.create = function create(properties) {
            return new CMsgClientRemoveFriend(properties);
        };
    
        /**
         * Encodes the specified CMsgClientRemoveFriend message. Does not implicitly {@link CMsgClientRemoveFriend.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientRemoveFriend
         * @static
         * @param {ICMsgClientRemoveFriend} message CMsgClientRemoveFriend message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientRemoveFriend.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.friendid != null && message.hasOwnProperty("friendid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.friendid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientRemoveFriend message, length delimited. Does not implicitly {@link CMsgClientRemoveFriend.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientRemoveFriend
         * @static
         * @param {ICMsgClientRemoveFriend} message CMsgClientRemoveFriend message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientRemoveFriend.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientRemoveFriend message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientRemoveFriend
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientRemoveFriend} CMsgClientRemoveFriend
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientRemoveFriend.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientRemoveFriend();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.friendid = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientRemoveFriend message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientRemoveFriend
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientRemoveFriend} CMsgClientRemoveFriend
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientRemoveFriend.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientRemoveFriend message.
         * @function verify
         * @memberof CMsgClientRemoveFriend
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientRemoveFriend.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.friendid != null && message.hasOwnProperty("friendid"))
                if (!$util.isInteger(message.friendid) && !(message.friendid && $util.isInteger(message.friendid.low) && $util.isInteger(message.friendid.high)))
                    return "friendid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientRemoveFriend message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientRemoveFriend
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientRemoveFriend} CMsgClientRemoveFriend
         */
        CMsgClientRemoveFriend.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientRemoveFriend)
                return object;
            var message = new $root.CMsgClientRemoveFriend();
            if (object.friendid != null)
                if ($util.Long)
                    (message.friendid = $util.Long.fromValue(object.friendid)).unsigned = false;
                else if (typeof object.friendid === "string")
                    message.friendid = parseInt(object.friendid, 10);
                else if (typeof object.friendid === "number")
                    message.friendid = object.friendid;
                else if (typeof object.friendid === "object")
                    message.friendid = new $util.LongBits(object.friendid.low >>> 0, object.friendid.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientRemoveFriend message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientRemoveFriend
         * @static
         * @param {CMsgClientRemoveFriend} message CMsgClientRemoveFriend
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientRemoveFriend.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.friendid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.friendid = options.longs === String ? "0" : 0;
            if (message.friendid != null && message.hasOwnProperty("friendid"))
                if (typeof message.friendid === "number")
                    object.friendid = options.longs === String ? String(message.friendid) : message.friendid;
                else
                    object.friendid = options.longs === String ? $util.Long.prototype.toString.call(message.friendid) : options.longs === Number ? new $util.LongBits(message.friendid.low >>> 0, message.friendid.high >>> 0).toNumber() : message.friendid;
            return object;
        };
    
        /**
         * Converts this CMsgClientRemoveFriend to JSON.
         * @function toJSON
         * @memberof CMsgClientRemoveFriend
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientRemoveFriend.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientRemoveFriend;
    })();
    
    $root.CMsgClientHideFriend = (function() {
    
        /**
         * Properties of a CMsgClientHideFriend.
         * @exports ICMsgClientHideFriend
         * @interface ICMsgClientHideFriend
         * @property {number|Long|null} [friendid] CMsgClientHideFriend friendid
         * @property {boolean|null} [hide] CMsgClientHideFriend hide
         */
    
        /**
         * Constructs a new CMsgClientHideFriend.
         * @exports CMsgClientHideFriend
         * @classdesc Represents a CMsgClientHideFriend.
         * @implements ICMsgClientHideFriend
         * @constructor
         * @param {ICMsgClientHideFriend=} [properties] Properties to set
         */
        function CMsgClientHideFriend(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientHideFriend friendid.
         * @member {number|Long} friendid
         * @memberof CMsgClientHideFriend
         * @instance
         */
        CMsgClientHideFriend.prototype.friendid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgClientHideFriend hide.
         * @member {boolean} hide
         * @memberof CMsgClientHideFriend
         * @instance
         */
        CMsgClientHideFriend.prototype.hide = false;
    
        /**
         * Creates a new CMsgClientHideFriend instance using the specified properties.
         * @function create
         * @memberof CMsgClientHideFriend
         * @static
         * @param {ICMsgClientHideFriend=} [properties] Properties to set
         * @returns {CMsgClientHideFriend} CMsgClientHideFriend instance
         */
        CMsgClientHideFriend.create = function create(properties) {
            return new CMsgClientHideFriend(properties);
        };
    
        /**
         * Encodes the specified CMsgClientHideFriend message. Does not implicitly {@link CMsgClientHideFriend.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientHideFriend
         * @static
         * @param {ICMsgClientHideFriend} message CMsgClientHideFriend message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientHideFriend.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.friendid != null && message.hasOwnProperty("friendid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.friendid);
            if (message.hide != null && message.hasOwnProperty("hide"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.hide);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientHideFriend message, length delimited. Does not implicitly {@link CMsgClientHideFriend.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientHideFriend
         * @static
         * @param {ICMsgClientHideFriend} message CMsgClientHideFriend message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientHideFriend.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientHideFriend message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientHideFriend
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientHideFriend} CMsgClientHideFriend
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientHideFriend.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientHideFriend();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.friendid = reader.fixed64();
                    break;
                case 2:
                    message.hide = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientHideFriend message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientHideFriend
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientHideFriend} CMsgClientHideFriend
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientHideFriend.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientHideFriend message.
         * @function verify
         * @memberof CMsgClientHideFriend
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientHideFriend.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.friendid != null && message.hasOwnProperty("friendid"))
                if (!$util.isInteger(message.friendid) && !(message.friendid && $util.isInteger(message.friendid.low) && $util.isInteger(message.friendid.high)))
                    return "friendid: integer|Long expected";
            if (message.hide != null && message.hasOwnProperty("hide"))
                if (typeof message.hide !== "boolean")
                    return "hide: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientHideFriend message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientHideFriend
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientHideFriend} CMsgClientHideFriend
         */
        CMsgClientHideFriend.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientHideFriend)
                return object;
            var message = new $root.CMsgClientHideFriend();
            if (object.friendid != null)
                if ($util.Long)
                    (message.friendid = $util.Long.fromValue(object.friendid)).unsigned = false;
                else if (typeof object.friendid === "string")
                    message.friendid = parseInt(object.friendid, 10);
                else if (typeof object.friendid === "number")
                    message.friendid = object.friendid;
                else if (typeof object.friendid === "object")
                    message.friendid = new $util.LongBits(object.friendid.low >>> 0, object.friendid.high >>> 0).toNumber();
            if (object.hide != null)
                message.hide = Boolean(object.hide);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientHideFriend message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientHideFriend
         * @static
         * @param {CMsgClientHideFriend} message CMsgClientHideFriend
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientHideFriend.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.friendid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.friendid = options.longs === String ? "0" : 0;
                object.hide = false;
            }
            if (message.friendid != null && message.hasOwnProperty("friendid"))
                if (typeof message.friendid === "number")
                    object.friendid = options.longs === String ? String(message.friendid) : message.friendid;
                else
                    object.friendid = options.longs === String ? $util.Long.prototype.toString.call(message.friendid) : options.longs === Number ? new $util.LongBits(message.friendid.low >>> 0, message.friendid.high >>> 0).toNumber() : message.friendid;
            if (message.hide != null && message.hasOwnProperty("hide"))
                object.hide = message.hide;
            return object;
        };
    
        /**
         * Converts this CMsgClientHideFriend to JSON.
         * @function toJSON
         * @memberof CMsgClientHideFriend
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientHideFriend.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientHideFriend;
    })();
    
    $root.CMsgClientFriendsList = (function() {
    
        /**
         * Properties of a CMsgClientFriendsList.
         * @exports ICMsgClientFriendsList
         * @interface ICMsgClientFriendsList
         * @property {boolean|null} [bincremental] CMsgClientFriendsList bincremental
         * @property {Array.<CMsgClientFriendsList.IFriend>|null} [friends] CMsgClientFriendsList friends
         * @property {number|null} [max_friend_count] CMsgClientFriendsList max_friend_count
         * @property {number|null} [active_friend_count] CMsgClientFriendsList active_friend_count
         * @property {boolean|null} [friends_limit_hit] CMsgClientFriendsList friends_limit_hit
         */
    
        /**
         * Constructs a new CMsgClientFriendsList.
         * @exports CMsgClientFriendsList
         * @classdesc Represents a CMsgClientFriendsList.
         * @implements ICMsgClientFriendsList
         * @constructor
         * @param {ICMsgClientFriendsList=} [properties] Properties to set
         */
        function CMsgClientFriendsList(properties) {
            this.friends = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientFriendsList bincremental.
         * @member {boolean} bincremental
         * @memberof CMsgClientFriendsList
         * @instance
         */
        CMsgClientFriendsList.prototype.bincremental = false;
    
        /**
         * CMsgClientFriendsList friends.
         * @member {Array.<CMsgClientFriendsList.IFriend>} friends
         * @memberof CMsgClientFriendsList
         * @instance
         */
        CMsgClientFriendsList.prototype.friends = $util.emptyArray;
    
        /**
         * CMsgClientFriendsList max_friend_count.
         * @member {number} max_friend_count
         * @memberof CMsgClientFriendsList
         * @instance
         */
        CMsgClientFriendsList.prototype.max_friend_count = 0;
    
        /**
         * CMsgClientFriendsList active_friend_count.
         * @member {number} active_friend_count
         * @memberof CMsgClientFriendsList
         * @instance
         */
        CMsgClientFriendsList.prototype.active_friend_count = 0;
    
        /**
         * CMsgClientFriendsList friends_limit_hit.
         * @member {boolean} friends_limit_hit
         * @memberof CMsgClientFriendsList
         * @instance
         */
        CMsgClientFriendsList.prototype.friends_limit_hit = false;
    
        /**
         * Creates a new CMsgClientFriendsList instance using the specified properties.
         * @function create
         * @memberof CMsgClientFriendsList
         * @static
         * @param {ICMsgClientFriendsList=} [properties] Properties to set
         * @returns {CMsgClientFriendsList} CMsgClientFriendsList instance
         */
        CMsgClientFriendsList.create = function create(properties) {
            return new CMsgClientFriendsList(properties);
        };
    
        /**
         * Encodes the specified CMsgClientFriendsList message. Does not implicitly {@link CMsgClientFriendsList.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientFriendsList
         * @static
         * @param {ICMsgClientFriendsList} message CMsgClientFriendsList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientFriendsList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bincremental != null && message.hasOwnProperty("bincremental"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.bincremental);
            if (message.friends != null && message.friends.length)
                for (var i = 0; i < message.friends.length; ++i)
                    $root.CMsgClientFriendsList.Friend.encode(message.friends[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.max_friend_count != null && message.hasOwnProperty("max_friend_count"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.max_friend_count);
            if (message.active_friend_count != null && message.hasOwnProperty("active_friend_count"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.active_friend_count);
            if (message.friends_limit_hit != null && message.hasOwnProperty("friends_limit_hit"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.friends_limit_hit);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientFriendsList message, length delimited. Does not implicitly {@link CMsgClientFriendsList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientFriendsList
         * @static
         * @param {ICMsgClientFriendsList} message CMsgClientFriendsList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientFriendsList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientFriendsList message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientFriendsList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientFriendsList} CMsgClientFriendsList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientFriendsList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientFriendsList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.bincremental = reader.bool();
                    break;
                case 2:
                    if (!(message.friends && message.friends.length))
                        message.friends = [];
                    message.friends.push($root.CMsgClientFriendsList.Friend.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.max_friend_count = reader.uint32();
                    break;
                case 4:
                    message.active_friend_count = reader.uint32();
                    break;
                case 5:
                    message.friends_limit_hit = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientFriendsList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientFriendsList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientFriendsList} CMsgClientFriendsList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientFriendsList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientFriendsList message.
         * @function verify
         * @memberof CMsgClientFriendsList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientFriendsList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bincremental != null && message.hasOwnProperty("bincremental"))
                if (typeof message.bincremental !== "boolean")
                    return "bincremental: boolean expected";
            if (message.friends != null && message.hasOwnProperty("friends")) {
                if (!Array.isArray(message.friends))
                    return "friends: array expected";
                for (var i = 0; i < message.friends.length; ++i) {
                    var error = $root.CMsgClientFriendsList.Friend.verify(message.friends[i]);
                    if (error)
                        return "friends." + error;
                }
            }
            if (message.max_friend_count != null && message.hasOwnProperty("max_friend_count"))
                if (!$util.isInteger(message.max_friend_count))
                    return "max_friend_count: integer expected";
            if (message.active_friend_count != null && message.hasOwnProperty("active_friend_count"))
                if (!$util.isInteger(message.active_friend_count))
                    return "active_friend_count: integer expected";
            if (message.friends_limit_hit != null && message.hasOwnProperty("friends_limit_hit"))
                if (typeof message.friends_limit_hit !== "boolean")
                    return "friends_limit_hit: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientFriendsList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientFriendsList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientFriendsList} CMsgClientFriendsList
         */
        CMsgClientFriendsList.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientFriendsList)
                return object;
            var message = new $root.CMsgClientFriendsList();
            if (object.bincremental != null)
                message.bincremental = Boolean(object.bincremental);
            if (object.friends) {
                if (!Array.isArray(object.friends))
                    throw TypeError(".CMsgClientFriendsList.friends: array expected");
                message.friends = [];
                for (var i = 0; i < object.friends.length; ++i) {
                    if (typeof object.friends[i] !== "object")
                        throw TypeError(".CMsgClientFriendsList.friends: object expected");
                    message.friends[i] = $root.CMsgClientFriendsList.Friend.fromObject(object.friends[i]);
                }
            }
            if (object.max_friend_count != null)
                message.max_friend_count = object.max_friend_count >>> 0;
            if (object.active_friend_count != null)
                message.active_friend_count = object.active_friend_count >>> 0;
            if (object.friends_limit_hit != null)
                message.friends_limit_hit = Boolean(object.friends_limit_hit);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientFriendsList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientFriendsList
         * @static
         * @param {CMsgClientFriendsList} message CMsgClientFriendsList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientFriendsList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.friends = [];
            if (options.defaults) {
                object.bincremental = false;
                object.max_friend_count = 0;
                object.active_friend_count = 0;
                object.friends_limit_hit = false;
            }
            if (message.bincremental != null && message.hasOwnProperty("bincremental"))
                object.bincremental = message.bincremental;
            if (message.friends && message.friends.length) {
                object.friends = [];
                for (var j = 0; j < message.friends.length; ++j)
                    object.friends[j] = $root.CMsgClientFriendsList.Friend.toObject(message.friends[j], options);
            }
            if (message.max_friend_count != null && message.hasOwnProperty("max_friend_count"))
                object.max_friend_count = message.max_friend_count;
            if (message.active_friend_count != null && message.hasOwnProperty("active_friend_count"))
                object.active_friend_count = message.active_friend_count;
            if (message.friends_limit_hit != null && message.hasOwnProperty("friends_limit_hit"))
                object.friends_limit_hit = message.friends_limit_hit;
            return object;
        };
    
        /**
         * Converts this CMsgClientFriendsList to JSON.
         * @function toJSON
         * @memberof CMsgClientFriendsList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientFriendsList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgClientFriendsList.Friend = (function() {
    
            /**
             * Properties of a Friend.
             * @memberof CMsgClientFriendsList
             * @interface IFriend
             * @property {number|Long|null} [ulfriendid] Friend ulfriendid
             * @property {number|null} [efriendrelationship] Friend efriendrelationship
             */
    
            /**
             * Constructs a new Friend.
             * @memberof CMsgClientFriendsList
             * @classdesc Represents a Friend.
             * @implements IFriend
             * @constructor
             * @param {CMsgClientFriendsList.IFriend=} [properties] Properties to set
             */
            function Friend(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Friend ulfriendid.
             * @member {number|Long} ulfriendid
             * @memberof CMsgClientFriendsList.Friend
             * @instance
             */
            Friend.prototype.ulfriendid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * Friend efriendrelationship.
             * @member {number} efriendrelationship
             * @memberof CMsgClientFriendsList.Friend
             * @instance
             */
            Friend.prototype.efriendrelationship = 0;
    
            /**
             * Creates a new Friend instance using the specified properties.
             * @function create
             * @memberof CMsgClientFriendsList.Friend
             * @static
             * @param {CMsgClientFriendsList.IFriend=} [properties] Properties to set
             * @returns {CMsgClientFriendsList.Friend} Friend instance
             */
            Friend.create = function create(properties) {
                return new Friend(properties);
            };
    
            /**
             * Encodes the specified Friend message. Does not implicitly {@link CMsgClientFriendsList.Friend.verify|verify} messages.
             * @function encode
             * @memberof CMsgClientFriendsList.Friend
             * @static
             * @param {CMsgClientFriendsList.IFriend} message Friend message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Friend.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ulfriendid != null && message.hasOwnProperty("ulfriendid"))
                    writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.ulfriendid);
                if (message.efriendrelationship != null && message.hasOwnProperty("efriendrelationship"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.efriendrelationship);
                return writer;
            };
    
            /**
             * Encodes the specified Friend message, length delimited. Does not implicitly {@link CMsgClientFriendsList.Friend.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgClientFriendsList.Friend
             * @static
             * @param {CMsgClientFriendsList.IFriend} message Friend message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Friend.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Friend message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgClientFriendsList.Friend
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgClientFriendsList.Friend} Friend
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Friend.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientFriendsList.Friend();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ulfriendid = reader.fixed64();
                        break;
                    case 2:
                        message.efriendrelationship = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Friend message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgClientFriendsList.Friend
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgClientFriendsList.Friend} Friend
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Friend.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Friend message.
             * @function verify
             * @memberof CMsgClientFriendsList.Friend
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Friend.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ulfriendid != null && message.hasOwnProperty("ulfriendid"))
                    if (!$util.isInteger(message.ulfriendid) && !(message.ulfriendid && $util.isInteger(message.ulfriendid.low) && $util.isInteger(message.ulfriendid.high)))
                        return "ulfriendid: integer|Long expected";
                if (message.efriendrelationship != null && message.hasOwnProperty("efriendrelationship"))
                    if (!$util.isInteger(message.efriendrelationship))
                        return "efriendrelationship: integer expected";
                return null;
            };
    
            /**
             * Creates a Friend message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgClientFriendsList.Friend
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgClientFriendsList.Friend} Friend
             */
            Friend.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgClientFriendsList.Friend)
                    return object;
                var message = new $root.CMsgClientFriendsList.Friend();
                if (object.ulfriendid != null)
                    if ($util.Long)
                        (message.ulfriendid = $util.Long.fromValue(object.ulfriendid)).unsigned = false;
                    else if (typeof object.ulfriendid === "string")
                        message.ulfriendid = parseInt(object.ulfriendid, 10);
                    else if (typeof object.ulfriendid === "number")
                        message.ulfriendid = object.ulfriendid;
                    else if (typeof object.ulfriendid === "object")
                        message.ulfriendid = new $util.LongBits(object.ulfriendid.low >>> 0, object.ulfriendid.high >>> 0).toNumber();
                if (object.efriendrelationship != null)
                    message.efriendrelationship = object.efriendrelationship >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Friend message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgClientFriendsList.Friend
             * @static
             * @param {CMsgClientFriendsList.Friend} message Friend
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Friend.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.ulfriendid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ulfriendid = options.longs === String ? "0" : 0;
                    object.efriendrelationship = 0;
                }
                if (message.ulfriendid != null && message.hasOwnProperty("ulfriendid"))
                    if (typeof message.ulfriendid === "number")
                        object.ulfriendid = options.longs === String ? String(message.ulfriendid) : message.ulfriendid;
                    else
                        object.ulfriendid = options.longs === String ? $util.Long.prototype.toString.call(message.ulfriendid) : options.longs === Number ? new $util.LongBits(message.ulfriendid.low >>> 0, message.ulfriendid.high >>> 0).toNumber() : message.ulfriendid;
                if (message.efriendrelationship != null && message.hasOwnProperty("efriendrelationship"))
                    object.efriendrelationship = message.efriendrelationship;
                return object;
            };
    
            /**
             * Converts this Friend to JSON.
             * @function toJSON
             * @memberof CMsgClientFriendsList.Friend
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Friend.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Friend;
        })();
    
        return CMsgClientFriendsList;
    })();
    
    $root.CMsgClientFriendsGroupsList = (function() {
    
        /**
         * Properties of a CMsgClientFriendsGroupsList.
         * @exports ICMsgClientFriendsGroupsList
         * @interface ICMsgClientFriendsGroupsList
         * @property {boolean|null} [bremoval] CMsgClientFriendsGroupsList bremoval
         * @property {boolean|null} [bincremental] CMsgClientFriendsGroupsList bincremental
         * @property {Array.<CMsgClientFriendsGroupsList.IFriendGroup>|null} [friendGroups] CMsgClientFriendsGroupsList friendGroups
         * @property {Array.<CMsgClientFriendsGroupsList.IFriendGroupsMembership>|null} [memberships] CMsgClientFriendsGroupsList memberships
         */
    
        /**
         * Constructs a new CMsgClientFriendsGroupsList.
         * @exports CMsgClientFriendsGroupsList
         * @classdesc Represents a CMsgClientFriendsGroupsList.
         * @implements ICMsgClientFriendsGroupsList
         * @constructor
         * @param {ICMsgClientFriendsGroupsList=} [properties] Properties to set
         */
        function CMsgClientFriendsGroupsList(properties) {
            this.friendGroups = [];
            this.memberships = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientFriendsGroupsList bremoval.
         * @member {boolean} bremoval
         * @memberof CMsgClientFriendsGroupsList
         * @instance
         */
        CMsgClientFriendsGroupsList.prototype.bremoval = false;
    
        /**
         * CMsgClientFriendsGroupsList bincremental.
         * @member {boolean} bincremental
         * @memberof CMsgClientFriendsGroupsList
         * @instance
         */
        CMsgClientFriendsGroupsList.prototype.bincremental = false;
    
        /**
         * CMsgClientFriendsGroupsList friendGroups.
         * @member {Array.<CMsgClientFriendsGroupsList.IFriendGroup>} friendGroups
         * @memberof CMsgClientFriendsGroupsList
         * @instance
         */
        CMsgClientFriendsGroupsList.prototype.friendGroups = $util.emptyArray;
    
        /**
         * CMsgClientFriendsGroupsList memberships.
         * @member {Array.<CMsgClientFriendsGroupsList.IFriendGroupsMembership>} memberships
         * @memberof CMsgClientFriendsGroupsList
         * @instance
         */
        CMsgClientFriendsGroupsList.prototype.memberships = $util.emptyArray;
    
        /**
         * Creates a new CMsgClientFriendsGroupsList instance using the specified properties.
         * @function create
         * @memberof CMsgClientFriendsGroupsList
         * @static
         * @param {ICMsgClientFriendsGroupsList=} [properties] Properties to set
         * @returns {CMsgClientFriendsGroupsList} CMsgClientFriendsGroupsList instance
         */
        CMsgClientFriendsGroupsList.create = function create(properties) {
            return new CMsgClientFriendsGroupsList(properties);
        };
    
        /**
         * Encodes the specified CMsgClientFriendsGroupsList message. Does not implicitly {@link CMsgClientFriendsGroupsList.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientFriendsGroupsList
         * @static
         * @param {ICMsgClientFriendsGroupsList} message CMsgClientFriendsGroupsList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientFriendsGroupsList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bremoval != null && message.hasOwnProperty("bremoval"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.bremoval);
            if (message.bincremental != null && message.hasOwnProperty("bincremental"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.bincremental);
            if (message.friendGroups != null && message.friendGroups.length)
                for (var i = 0; i < message.friendGroups.length; ++i)
                    $root.CMsgClientFriendsGroupsList.FriendGroup.encode(message.friendGroups[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.memberships != null && message.memberships.length)
                for (var i = 0; i < message.memberships.length; ++i)
                    $root.CMsgClientFriendsGroupsList.FriendGroupsMembership.encode(message.memberships[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientFriendsGroupsList message, length delimited. Does not implicitly {@link CMsgClientFriendsGroupsList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientFriendsGroupsList
         * @static
         * @param {ICMsgClientFriendsGroupsList} message CMsgClientFriendsGroupsList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientFriendsGroupsList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientFriendsGroupsList message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientFriendsGroupsList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientFriendsGroupsList} CMsgClientFriendsGroupsList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientFriendsGroupsList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientFriendsGroupsList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.bremoval = reader.bool();
                    break;
                case 2:
                    message.bincremental = reader.bool();
                    break;
                case 3:
                    if (!(message.friendGroups && message.friendGroups.length))
                        message.friendGroups = [];
                    message.friendGroups.push($root.CMsgClientFriendsGroupsList.FriendGroup.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.memberships && message.memberships.length))
                        message.memberships = [];
                    message.memberships.push($root.CMsgClientFriendsGroupsList.FriendGroupsMembership.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientFriendsGroupsList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientFriendsGroupsList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientFriendsGroupsList} CMsgClientFriendsGroupsList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientFriendsGroupsList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientFriendsGroupsList message.
         * @function verify
         * @memberof CMsgClientFriendsGroupsList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientFriendsGroupsList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bremoval != null && message.hasOwnProperty("bremoval"))
                if (typeof message.bremoval !== "boolean")
                    return "bremoval: boolean expected";
            if (message.bincremental != null && message.hasOwnProperty("bincremental"))
                if (typeof message.bincremental !== "boolean")
                    return "bincremental: boolean expected";
            if (message.friendGroups != null && message.hasOwnProperty("friendGroups")) {
                if (!Array.isArray(message.friendGroups))
                    return "friendGroups: array expected";
                for (var i = 0; i < message.friendGroups.length; ++i) {
                    var error = $root.CMsgClientFriendsGroupsList.FriendGroup.verify(message.friendGroups[i]);
                    if (error)
                        return "friendGroups." + error;
                }
            }
            if (message.memberships != null && message.hasOwnProperty("memberships")) {
                if (!Array.isArray(message.memberships))
                    return "memberships: array expected";
                for (var i = 0; i < message.memberships.length; ++i) {
                    var error = $root.CMsgClientFriendsGroupsList.FriendGroupsMembership.verify(message.memberships[i]);
                    if (error)
                        return "memberships." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgClientFriendsGroupsList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientFriendsGroupsList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientFriendsGroupsList} CMsgClientFriendsGroupsList
         */
        CMsgClientFriendsGroupsList.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientFriendsGroupsList)
                return object;
            var message = new $root.CMsgClientFriendsGroupsList();
            if (object.bremoval != null)
                message.bremoval = Boolean(object.bremoval);
            if (object.bincremental != null)
                message.bincremental = Boolean(object.bincremental);
            if (object.friendGroups) {
                if (!Array.isArray(object.friendGroups))
                    throw TypeError(".CMsgClientFriendsGroupsList.friendGroups: array expected");
                message.friendGroups = [];
                for (var i = 0; i < object.friendGroups.length; ++i) {
                    if (typeof object.friendGroups[i] !== "object")
                        throw TypeError(".CMsgClientFriendsGroupsList.friendGroups: object expected");
                    message.friendGroups[i] = $root.CMsgClientFriendsGroupsList.FriendGroup.fromObject(object.friendGroups[i]);
                }
            }
            if (object.memberships) {
                if (!Array.isArray(object.memberships))
                    throw TypeError(".CMsgClientFriendsGroupsList.memberships: array expected");
                message.memberships = [];
                for (var i = 0; i < object.memberships.length; ++i) {
                    if (typeof object.memberships[i] !== "object")
                        throw TypeError(".CMsgClientFriendsGroupsList.memberships: object expected");
                    message.memberships[i] = $root.CMsgClientFriendsGroupsList.FriendGroupsMembership.fromObject(object.memberships[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientFriendsGroupsList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientFriendsGroupsList
         * @static
         * @param {CMsgClientFriendsGroupsList} message CMsgClientFriendsGroupsList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientFriendsGroupsList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.friendGroups = [];
                object.memberships = [];
            }
            if (options.defaults) {
                object.bremoval = false;
                object.bincremental = false;
            }
            if (message.bremoval != null && message.hasOwnProperty("bremoval"))
                object.bremoval = message.bremoval;
            if (message.bincremental != null && message.hasOwnProperty("bincremental"))
                object.bincremental = message.bincremental;
            if (message.friendGroups && message.friendGroups.length) {
                object.friendGroups = [];
                for (var j = 0; j < message.friendGroups.length; ++j)
                    object.friendGroups[j] = $root.CMsgClientFriendsGroupsList.FriendGroup.toObject(message.friendGroups[j], options);
            }
            if (message.memberships && message.memberships.length) {
                object.memberships = [];
                for (var j = 0; j < message.memberships.length; ++j)
                    object.memberships[j] = $root.CMsgClientFriendsGroupsList.FriendGroupsMembership.toObject(message.memberships[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgClientFriendsGroupsList to JSON.
         * @function toJSON
         * @memberof CMsgClientFriendsGroupsList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientFriendsGroupsList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgClientFriendsGroupsList.FriendGroup = (function() {
    
            /**
             * Properties of a FriendGroup.
             * @memberof CMsgClientFriendsGroupsList
             * @interface IFriendGroup
             * @property {number|null} [nGroupID] FriendGroup nGroupID
             * @property {string|null} [strGroupName] FriendGroup strGroupName
             */
    
            /**
             * Constructs a new FriendGroup.
             * @memberof CMsgClientFriendsGroupsList
             * @classdesc Represents a FriendGroup.
             * @implements IFriendGroup
             * @constructor
             * @param {CMsgClientFriendsGroupsList.IFriendGroup=} [properties] Properties to set
             */
            function FriendGroup(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FriendGroup nGroupID.
             * @member {number} nGroupID
             * @memberof CMsgClientFriendsGroupsList.FriendGroup
             * @instance
             */
            FriendGroup.prototype.nGroupID = 0;
    
            /**
             * FriendGroup strGroupName.
             * @member {string} strGroupName
             * @memberof CMsgClientFriendsGroupsList.FriendGroup
             * @instance
             */
            FriendGroup.prototype.strGroupName = "";
    
            /**
             * Creates a new FriendGroup instance using the specified properties.
             * @function create
             * @memberof CMsgClientFriendsGroupsList.FriendGroup
             * @static
             * @param {CMsgClientFriendsGroupsList.IFriendGroup=} [properties] Properties to set
             * @returns {CMsgClientFriendsGroupsList.FriendGroup} FriendGroup instance
             */
            FriendGroup.create = function create(properties) {
                return new FriendGroup(properties);
            };
    
            /**
             * Encodes the specified FriendGroup message. Does not implicitly {@link CMsgClientFriendsGroupsList.FriendGroup.verify|verify} messages.
             * @function encode
             * @memberof CMsgClientFriendsGroupsList.FriendGroup
             * @static
             * @param {CMsgClientFriendsGroupsList.IFriendGroup} message FriendGroup message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendGroup.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nGroupID != null && message.hasOwnProperty("nGroupID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nGroupID);
                if (message.strGroupName != null && message.hasOwnProperty("strGroupName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.strGroupName);
                return writer;
            };
    
            /**
             * Encodes the specified FriendGroup message, length delimited. Does not implicitly {@link CMsgClientFriendsGroupsList.FriendGroup.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgClientFriendsGroupsList.FriendGroup
             * @static
             * @param {CMsgClientFriendsGroupsList.IFriendGroup} message FriendGroup message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendGroup.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FriendGroup message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgClientFriendsGroupsList.FriendGroup
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgClientFriendsGroupsList.FriendGroup} FriendGroup
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendGroup.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientFriendsGroupsList.FriendGroup();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nGroupID = reader.int32();
                        break;
                    case 2:
                        message.strGroupName = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FriendGroup message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgClientFriendsGroupsList.FriendGroup
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgClientFriendsGroupsList.FriendGroup} FriendGroup
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendGroup.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FriendGroup message.
             * @function verify
             * @memberof CMsgClientFriendsGroupsList.FriendGroup
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendGroup.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nGroupID != null && message.hasOwnProperty("nGroupID"))
                    if (!$util.isInteger(message.nGroupID))
                        return "nGroupID: integer expected";
                if (message.strGroupName != null && message.hasOwnProperty("strGroupName"))
                    if (!$util.isString(message.strGroupName))
                        return "strGroupName: string expected";
                return null;
            };
    
            /**
             * Creates a FriendGroup message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgClientFriendsGroupsList.FriendGroup
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgClientFriendsGroupsList.FriendGroup} FriendGroup
             */
            FriendGroup.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgClientFriendsGroupsList.FriendGroup)
                    return object;
                var message = new $root.CMsgClientFriendsGroupsList.FriendGroup();
                if (object.nGroupID != null)
                    message.nGroupID = object.nGroupID | 0;
                if (object.strGroupName != null)
                    message.strGroupName = String(object.strGroupName);
                return message;
            };
    
            /**
             * Creates a plain object from a FriendGroup message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgClientFriendsGroupsList.FriendGroup
             * @static
             * @param {CMsgClientFriendsGroupsList.FriendGroup} message FriendGroup
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendGroup.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.nGroupID = 0;
                    object.strGroupName = "";
                }
                if (message.nGroupID != null && message.hasOwnProperty("nGroupID"))
                    object.nGroupID = message.nGroupID;
                if (message.strGroupName != null && message.hasOwnProperty("strGroupName"))
                    object.strGroupName = message.strGroupName;
                return object;
            };
    
            /**
             * Converts this FriendGroup to JSON.
             * @function toJSON
             * @memberof CMsgClientFriendsGroupsList.FriendGroup
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendGroup.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FriendGroup;
        })();
    
        CMsgClientFriendsGroupsList.FriendGroupsMembership = (function() {
    
            /**
             * Properties of a FriendGroupsMembership.
             * @memberof CMsgClientFriendsGroupsList
             * @interface IFriendGroupsMembership
             * @property {number|Long|null} [ulSteamID] FriendGroupsMembership ulSteamID
             * @property {number|null} [nGroupID] FriendGroupsMembership nGroupID
             */
    
            /**
             * Constructs a new FriendGroupsMembership.
             * @memberof CMsgClientFriendsGroupsList
             * @classdesc Represents a FriendGroupsMembership.
             * @implements IFriendGroupsMembership
             * @constructor
             * @param {CMsgClientFriendsGroupsList.IFriendGroupsMembership=} [properties] Properties to set
             */
            function FriendGroupsMembership(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FriendGroupsMembership ulSteamID.
             * @member {number|Long} ulSteamID
             * @memberof CMsgClientFriendsGroupsList.FriendGroupsMembership
             * @instance
             */
            FriendGroupsMembership.prototype.ulSteamID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * FriendGroupsMembership nGroupID.
             * @member {number} nGroupID
             * @memberof CMsgClientFriendsGroupsList.FriendGroupsMembership
             * @instance
             */
            FriendGroupsMembership.prototype.nGroupID = 0;
    
            /**
             * Creates a new FriendGroupsMembership instance using the specified properties.
             * @function create
             * @memberof CMsgClientFriendsGroupsList.FriendGroupsMembership
             * @static
             * @param {CMsgClientFriendsGroupsList.IFriendGroupsMembership=} [properties] Properties to set
             * @returns {CMsgClientFriendsGroupsList.FriendGroupsMembership} FriendGroupsMembership instance
             */
            FriendGroupsMembership.create = function create(properties) {
                return new FriendGroupsMembership(properties);
            };
    
            /**
             * Encodes the specified FriendGroupsMembership message. Does not implicitly {@link CMsgClientFriendsGroupsList.FriendGroupsMembership.verify|verify} messages.
             * @function encode
             * @memberof CMsgClientFriendsGroupsList.FriendGroupsMembership
             * @static
             * @param {CMsgClientFriendsGroupsList.IFriendGroupsMembership} message FriendGroupsMembership message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendGroupsMembership.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ulSteamID != null && message.hasOwnProperty("ulSteamID"))
                    writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.ulSteamID);
                if (message.nGroupID != null && message.hasOwnProperty("nGroupID"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nGroupID);
                return writer;
            };
    
            /**
             * Encodes the specified FriendGroupsMembership message, length delimited. Does not implicitly {@link CMsgClientFriendsGroupsList.FriendGroupsMembership.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgClientFriendsGroupsList.FriendGroupsMembership
             * @static
             * @param {CMsgClientFriendsGroupsList.IFriendGroupsMembership} message FriendGroupsMembership message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendGroupsMembership.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FriendGroupsMembership message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgClientFriendsGroupsList.FriendGroupsMembership
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgClientFriendsGroupsList.FriendGroupsMembership} FriendGroupsMembership
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendGroupsMembership.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientFriendsGroupsList.FriendGroupsMembership();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ulSteamID = reader.fixed64();
                        break;
                    case 2:
                        message.nGroupID = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FriendGroupsMembership message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgClientFriendsGroupsList.FriendGroupsMembership
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgClientFriendsGroupsList.FriendGroupsMembership} FriendGroupsMembership
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendGroupsMembership.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FriendGroupsMembership message.
             * @function verify
             * @memberof CMsgClientFriendsGroupsList.FriendGroupsMembership
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendGroupsMembership.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ulSteamID != null && message.hasOwnProperty("ulSteamID"))
                    if (!$util.isInteger(message.ulSteamID) && !(message.ulSteamID && $util.isInteger(message.ulSteamID.low) && $util.isInteger(message.ulSteamID.high)))
                        return "ulSteamID: integer|Long expected";
                if (message.nGroupID != null && message.hasOwnProperty("nGroupID"))
                    if (!$util.isInteger(message.nGroupID))
                        return "nGroupID: integer expected";
                return null;
            };
    
            /**
             * Creates a FriendGroupsMembership message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgClientFriendsGroupsList.FriendGroupsMembership
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgClientFriendsGroupsList.FriendGroupsMembership} FriendGroupsMembership
             */
            FriendGroupsMembership.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgClientFriendsGroupsList.FriendGroupsMembership)
                    return object;
                var message = new $root.CMsgClientFriendsGroupsList.FriendGroupsMembership();
                if (object.ulSteamID != null)
                    if ($util.Long)
                        (message.ulSteamID = $util.Long.fromValue(object.ulSteamID)).unsigned = false;
                    else if (typeof object.ulSteamID === "string")
                        message.ulSteamID = parseInt(object.ulSteamID, 10);
                    else if (typeof object.ulSteamID === "number")
                        message.ulSteamID = object.ulSteamID;
                    else if (typeof object.ulSteamID === "object")
                        message.ulSteamID = new $util.LongBits(object.ulSteamID.low >>> 0, object.ulSteamID.high >>> 0).toNumber();
                if (object.nGroupID != null)
                    message.nGroupID = object.nGroupID | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a FriendGroupsMembership message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgClientFriendsGroupsList.FriendGroupsMembership
             * @static
             * @param {CMsgClientFriendsGroupsList.FriendGroupsMembership} message FriendGroupsMembership
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendGroupsMembership.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.ulSteamID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ulSteamID = options.longs === String ? "0" : 0;
                    object.nGroupID = 0;
                }
                if (message.ulSteamID != null && message.hasOwnProperty("ulSteamID"))
                    if (typeof message.ulSteamID === "number")
                        object.ulSteamID = options.longs === String ? String(message.ulSteamID) : message.ulSteamID;
                    else
                        object.ulSteamID = options.longs === String ? $util.Long.prototype.toString.call(message.ulSteamID) : options.longs === Number ? new $util.LongBits(message.ulSteamID.low >>> 0, message.ulSteamID.high >>> 0).toNumber() : message.ulSteamID;
                if (message.nGroupID != null && message.hasOwnProperty("nGroupID"))
                    object.nGroupID = message.nGroupID;
                return object;
            };
    
            /**
             * Converts this FriendGroupsMembership to JSON.
             * @function toJSON
             * @memberof CMsgClientFriendsGroupsList.FriendGroupsMembership
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendGroupsMembership.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FriendGroupsMembership;
        })();
    
        return CMsgClientFriendsGroupsList;
    })();
    
    $root.CMsgClientPlayerNicknameList = (function() {
    
        /**
         * Properties of a CMsgClientPlayerNicknameList.
         * @exports ICMsgClientPlayerNicknameList
         * @interface ICMsgClientPlayerNicknameList
         * @property {boolean|null} [removal] CMsgClientPlayerNicknameList removal
         * @property {boolean|null} [incremental] CMsgClientPlayerNicknameList incremental
         * @property {Array.<CMsgClientPlayerNicknameList.IPlayerNickname>|null} [nicknames] CMsgClientPlayerNicknameList nicknames
         */
    
        /**
         * Constructs a new CMsgClientPlayerNicknameList.
         * @exports CMsgClientPlayerNicknameList
         * @classdesc Represents a CMsgClientPlayerNicknameList.
         * @implements ICMsgClientPlayerNicknameList
         * @constructor
         * @param {ICMsgClientPlayerNicknameList=} [properties] Properties to set
         */
        function CMsgClientPlayerNicknameList(properties) {
            this.nicknames = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientPlayerNicknameList removal.
         * @member {boolean} removal
         * @memberof CMsgClientPlayerNicknameList
         * @instance
         */
        CMsgClientPlayerNicknameList.prototype.removal = false;
    
        /**
         * CMsgClientPlayerNicknameList incremental.
         * @member {boolean} incremental
         * @memberof CMsgClientPlayerNicknameList
         * @instance
         */
        CMsgClientPlayerNicknameList.prototype.incremental = false;
    
        /**
         * CMsgClientPlayerNicknameList nicknames.
         * @member {Array.<CMsgClientPlayerNicknameList.IPlayerNickname>} nicknames
         * @memberof CMsgClientPlayerNicknameList
         * @instance
         */
        CMsgClientPlayerNicknameList.prototype.nicknames = $util.emptyArray;
    
        /**
         * Creates a new CMsgClientPlayerNicknameList instance using the specified properties.
         * @function create
         * @memberof CMsgClientPlayerNicknameList
         * @static
         * @param {ICMsgClientPlayerNicknameList=} [properties] Properties to set
         * @returns {CMsgClientPlayerNicknameList} CMsgClientPlayerNicknameList instance
         */
        CMsgClientPlayerNicknameList.create = function create(properties) {
            return new CMsgClientPlayerNicknameList(properties);
        };
    
        /**
         * Encodes the specified CMsgClientPlayerNicknameList message. Does not implicitly {@link CMsgClientPlayerNicknameList.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientPlayerNicknameList
         * @static
         * @param {ICMsgClientPlayerNicknameList} message CMsgClientPlayerNicknameList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientPlayerNicknameList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.removal != null && message.hasOwnProperty("removal"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.removal);
            if (message.incremental != null && message.hasOwnProperty("incremental"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.incremental);
            if (message.nicknames != null && message.nicknames.length)
                for (var i = 0; i < message.nicknames.length; ++i)
                    $root.CMsgClientPlayerNicknameList.PlayerNickname.encode(message.nicknames[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientPlayerNicknameList message, length delimited. Does not implicitly {@link CMsgClientPlayerNicknameList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientPlayerNicknameList
         * @static
         * @param {ICMsgClientPlayerNicknameList} message CMsgClientPlayerNicknameList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientPlayerNicknameList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientPlayerNicknameList message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientPlayerNicknameList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientPlayerNicknameList} CMsgClientPlayerNicknameList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientPlayerNicknameList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientPlayerNicknameList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.removal = reader.bool();
                    break;
                case 2:
                    message.incremental = reader.bool();
                    break;
                case 3:
                    if (!(message.nicknames && message.nicknames.length))
                        message.nicknames = [];
                    message.nicknames.push($root.CMsgClientPlayerNicknameList.PlayerNickname.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientPlayerNicknameList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientPlayerNicknameList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientPlayerNicknameList} CMsgClientPlayerNicknameList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientPlayerNicknameList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientPlayerNicknameList message.
         * @function verify
         * @memberof CMsgClientPlayerNicknameList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientPlayerNicknameList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.removal != null && message.hasOwnProperty("removal"))
                if (typeof message.removal !== "boolean")
                    return "removal: boolean expected";
            if (message.incremental != null && message.hasOwnProperty("incremental"))
                if (typeof message.incremental !== "boolean")
                    return "incremental: boolean expected";
            if (message.nicknames != null && message.hasOwnProperty("nicknames")) {
                if (!Array.isArray(message.nicknames))
                    return "nicknames: array expected";
                for (var i = 0; i < message.nicknames.length; ++i) {
                    var error = $root.CMsgClientPlayerNicknameList.PlayerNickname.verify(message.nicknames[i]);
                    if (error)
                        return "nicknames." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgClientPlayerNicknameList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientPlayerNicknameList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientPlayerNicknameList} CMsgClientPlayerNicknameList
         */
        CMsgClientPlayerNicknameList.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientPlayerNicknameList)
                return object;
            var message = new $root.CMsgClientPlayerNicknameList();
            if (object.removal != null)
                message.removal = Boolean(object.removal);
            if (object.incremental != null)
                message.incremental = Boolean(object.incremental);
            if (object.nicknames) {
                if (!Array.isArray(object.nicknames))
                    throw TypeError(".CMsgClientPlayerNicknameList.nicknames: array expected");
                message.nicknames = [];
                for (var i = 0; i < object.nicknames.length; ++i) {
                    if (typeof object.nicknames[i] !== "object")
                        throw TypeError(".CMsgClientPlayerNicknameList.nicknames: object expected");
                    message.nicknames[i] = $root.CMsgClientPlayerNicknameList.PlayerNickname.fromObject(object.nicknames[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientPlayerNicknameList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientPlayerNicknameList
         * @static
         * @param {CMsgClientPlayerNicknameList} message CMsgClientPlayerNicknameList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientPlayerNicknameList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.nicknames = [];
            if (options.defaults) {
                object.removal = false;
                object.incremental = false;
            }
            if (message.removal != null && message.hasOwnProperty("removal"))
                object.removal = message.removal;
            if (message.incremental != null && message.hasOwnProperty("incremental"))
                object.incremental = message.incremental;
            if (message.nicknames && message.nicknames.length) {
                object.nicknames = [];
                for (var j = 0; j < message.nicknames.length; ++j)
                    object.nicknames[j] = $root.CMsgClientPlayerNicknameList.PlayerNickname.toObject(message.nicknames[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgClientPlayerNicknameList to JSON.
         * @function toJSON
         * @memberof CMsgClientPlayerNicknameList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientPlayerNicknameList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgClientPlayerNicknameList.PlayerNickname = (function() {
    
            /**
             * Properties of a PlayerNickname.
             * @memberof CMsgClientPlayerNicknameList
             * @interface IPlayerNickname
             * @property {number|Long|null} [steamid] PlayerNickname steamid
             * @property {string|null} [nickname] PlayerNickname nickname
             */
    
            /**
             * Constructs a new PlayerNickname.
             * @memberof CMsgClientPlayerNicknameList
             * @classdesc Represents a PlayerNickname.
             * @implements IPlayerNickname
             * @constructor
             * @param {CMsgClientPlayerNicknameList.IPlayerNickname=} [properties] Properties to set
             */
            function PlayerNickname(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PlayerNickname steamid.
             * @member {number|Long} steamid
             * @memberof CMsgClientPlayerNicknameList.PlayerNickname
             * @instance
             */
            PlayerNickname.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * PlayerNickname nickname.
             * @member {string} nickname
             * @memberof CMsgClientPlayerNicknameList.PlayerNickname
             * @instance
             */
            PlayerNickname.prototype.nickname = "";
    
            /**
             * Creates a new PlayerNickname instance using the specified properties.
             * @function create
             * @memberof CMsgClientPlayerNicknameList.PlayerNickname
             * @static
             * @param {CMsgClientPlayerNicknameList.IPlayerNickname=} [properties] Properties to set
             * @returns {CMsgClientPlayerNicknameList.PlayerNickname} PlayerNickname instance
             */
            PlayerNickname.create = function create(properties) {
                return new PlayerNickname(properties);
            };
    
            /**
             * Encodes the specified PlayerNickname message. Does not implicitly {@link CMsgClientPlayerNicknameList.PlayerNickname.verify|verify} messages.
             * @function encode
             * @memberof CMsgClientPlayerNicknameList.PlayerNickname
             * @static
             * @param {CMsgClientPlayerNicknameList.IPlayerNickname} message PlayerNickname message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerNickname.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.nickname);
                return writer;
            };
    
            /**
             * Encodes the specified PlayerNickname message, length delimited. Does not implicitly {@link CMsgClientPlayerNicknameList.PlayerNickname.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgClientPlayerNicknameList.PlayerNickname
             * @static
             * @param {CMsgClientPlayerNicknameList.IPlayerNickname} message PlayerNickname message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerNickname.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PlayerNickname message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgClientPlayerNicknameList.PlayerNickname
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgClientPlayerNicknameList.PlayerNickname} PlayerNickname
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerNickname.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientPlayerNicknameList.PlayerNickname();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.steamid = reader.fixed64();
                        break;
                    case 3:
                        message.nickname = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PlayerNickname message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgClientPlayerNicknameList.PlayerNickname
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgClientPlayerNicknameList.PlayerNickname} PlayerNickname
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerNickname.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PlayerNickname message.
             * @function verify
             * @memberof CMsgClientPlayerNicknameList.PlayerNickname
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerNickname.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                        return "steamid: integer|Long expected";
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    if (!$util.isString(message.nickname))
                        return "nickname: string expected";
                return null;
            };
    
            /**
             * Creates a PlayerNickname message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgClientPlayerNicknameList.PlayerNickname
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgClientPlayerNicknameList.PlayerNickname} PlayerNickname
             */
            PlayerNickname.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgClientPlayerNicknameList.PlayerNickname)
                    return object;
                var message = new $root.CMsgClientPlayerNicknameList.PlayerNickname();
                if (object.steamid != null)
                    if ($util.Long)
                        (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                    else if (typeof object.steamid === "string")
                        message.steamid = parseInt(object.steamid, 10);
                    else if (typeof object.steamid === "number")
                        message.steamid = object.steamid;
                    else if (typeof object.steamid === "object")
                        message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
                if (object.nickname != null)
                    message.nickname = String(object.nickname);
                return message;
            };
    
            /**
             * Creates a plain object from a PlayerNickname message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgClientPlayerNicknameList.PlayerNickname
             * @static
             * @param {CMsgClientPlayerNicknameList.PlayerNickname} message PlayerNickname
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerNickname.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.steamid = options.longs === String ? "0" : 0;
                    object.nickname = "";
                }
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    if (typeof message.steamid === "number")
                        object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                    else
                        object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    object.nickname = message.nickname;
                return object;
            };
    
            /**
             * Converts this PlayerNickname to JSON.
             * @function toJSON
             * @memberof CMsgClientPlayerNicknameList.PlayerNickname
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerNickname.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PlayerNickname;
        })();
    
        return CMsgClientPlayerNicknameList;
    })();
    
    $root.CMsgClientSetPlayerNickname = (function() {
    
        /**
         * Properties of a CMsgClientSetPlayerNickname.
         * @exports ICMsgClientSetPlayerNickname
         * @interface ICMsgClientSetPlayerNickname
         * @property {number|Long|null} [steamid] CMsgClientSetPlayerNickname steamid
         * @property {string|null} [nickname] CMsgClientSetPlayerNickname nickname
         */
    
        /**
         * Constructs a new CMsgClientSetPlayerNickname.
         * @exports CMsgClientSetPlayerNickname
         * @classdesc Represents a CMsgClientSetPlayerNickname.
         * @implements ICMsgClientSetPlayerNickname
         * @constructor
         * @param {ICMsgClientSetPlayerNickname=} [properties] Properties to set
         */
        function CMsgClientSetPlayerNickname(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientSetPlayerNickname steamid.
         * @member {number|Long} steamid
         * @memberof CMsgClientSetPlayerNickname
         * @instance
         */
        CMsgClientSetPlayerNickname.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgClientSetPlayerNickname nickname.
         * @member {string} nickname
         * @memberof CMsgClientSetPlayerNickname
         * @instance
         */
        CMsgClientSetPlayerNickname.prototype.nickname = "";
    
        /**
         * Creates a new CMsgClientSetPlayerNickname instance using the specified properties.
         * @function create
         * @memberof CMsgClientSetPlayerNickname
         * @static
         * @param {ICMsgClientSetPlayerNickname=} [properties] Properties to set
         * @returns {CMsgClientSetPlayerNickname} CMsgClientSetPlayerNickname instance
         */
        CMsgClientSetPlayerNickname.create = function create(properties) {
            return new CMsgClientSetPlayerNickname(properties);
        };
    
        /**
         * Encodes the specified CMsgClientSetPlayerNickname message. Does not implicitly {@link CMsgClientSetPlayerNickname.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientSetPlayerNickname
         * @static
         * @param {ICMsgClientSetPlayerNickname} message CMsgClientSetPlayerNickname message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientSetPlayerNickname.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientSetPlayerNickname message, length delimited. Does not implicitly {@link CMsgClientSetPlayerNickname.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientSetPlayerNickname
         * @static
         * @param {ICMsgClientSetPlayerNickname} message CMsgClientSetPlayerNickname message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientSetPlayerNickname.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientSetPlayerNickname message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientSetPlayerNickname
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientSetPlayerNickname} CMsgClientSetPlayerNickname
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientSetPlayerNickname.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientSetPlayerNickname();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.nickname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientSetPlayerNickname message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientSetPlayerNickname
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientSetPlayerNickname} CMsgClientSetPlayerNickname
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientSetPlayerNickname.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientSetPlayerNickname message.
         * @function verify
         * @memberof CMsgClientSetPlayerNickname
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientSetPlayerNickname.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientSetPlayerNickname message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientSetPlayerNickname
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientSetPlayerNickname} CMsgClientSetPlayerNickname
         */
        CMsgClientSetPlayerNickname.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientSetPlayerNickname)
                return object;
            var message = new $root.CMsgClientSetPlayerNickname();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientSetPlayerNickname message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientSetPlayerNickname
         * @static
         * @param {CMsgClientSetPlayerNickname} message CMsgClientSetPlayerNickname
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientSetPlayerNickname.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.nickname = "";
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            return object;
        };
    
        /**
         * Converts this CMsgClientSetPlayerNickname to JSON.
         * @function toJSON
         * @memberof CMsgClientSetPlayerNickname
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientSetPlayerNickname.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientSetPlayerNickname;
    })();
    
    $root.CMsgClientSetPlayerNicknameResponse = (function() {
    
        /**
         * Properties of a CMsgClientSetPlayerNicknameResponse.
         * @exports ICMsgClientSetPlayerNicknameResponse
         * @interface ICMsgClientSetPlayerNicknameResponse
         * @property {number|null} [eresult] CMsgClientSetPlayerNicknameResponse eresult
         */
    
        /**
         * Constructs a new CMsgClientSetPlayerNicknameResponse.
         * @exports CMsgClientSetPlayerNicknameResponse
         * @classdesc Represents a CMsgClientSetPlayerNicknameResponse.
         * @implements ICMsgClientSetPlayerNicknameResponse
         * @constructor
         * @param {ICMsgClientSetPlayerNicknameResponse=} [properties] Properties to set
         */
        function CMsgClientSetPlayerNicknameResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientSetPlayerNicknameResponse eresult.
         * @member {number} eresult
         * @memberof CMsgClientSetPlayerNicknameResponse
         * @instance
         */
        CMsgClientSetPlayerNicknameResponse.prototype.eresult = 0;
    
        /**
         * Creates a new CMsgClientSetPlayerNicknameResponse instance using the specified properties.
         * @function create
         * @memberof CMsgClientSetPlayerNicknameResponse
         * @static
         * @param {ICMsgClientSetPlayerNicknameResponse=} [properties] Properties to set
         * @returns {CMsgClientSetPlayerNicknameResponse} CMsgClientSetPlayerNicknameResponse instance
         */
        CMsgClientSetPlayerNicknameResponse.create = function create(properties) {
            return new CMsgClientSetPlayerNicknameResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgClientSetPlayerNicknameResponse message. Does not implicitly {@link CMsgClientSetPlayerNicknameResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientSetPlayerNicknameResponse
         * @static
         * @param {ICMsgClientSetPlayerNicknameResponse} message CMsgClientSetPlayerNicknameResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientSetPlayerNicknameResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eresult);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientSetPlayerNicknameResponse message, length delimited. Does not implicitly {@link CMsgClientSetPlayerNicknameResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientSetPlayerNicknameResponse
         * @static
         * @param {ICMsgClientSetPlayerNicknameResponse} message CMsgClientSetPlayerNicknameResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientSetPlayerNicknameResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientSetPlayerNicknameResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientSetPlayerNicknameResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientSetPlayerNicknameResponse} CMsgClientSetPlayerNicknameResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientSetPlayerNicknameResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientSetPlayerNicknameResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientSetPlayerNicknameResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientSetPlayerNicknameResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientSetPlayerNicknameResponse} CMsgClientSetPlayerNicknameResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientSetPlayerNicknameResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientSetPlayerNicknameResponse message.
         * @function verify
         * @memberof CMsgClientSetPlayerNicknameResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientSetPlayerNicknameResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientSetPlayerNicknameResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientSetPlayerNicknameResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientSetPlayerNicknameResponse} CMsgClientSetPlayerNicknameResponse
         */
        CMsgClientSetPlayerNicknameResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientSetPlayerNicknameResponse)
                return object;
            var message = new $root.CMsgClientSetPlayerNicknameResponse();
            if (object.eresult != null)
                message.eresult = object.eresult >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientSetPlayerNicknameResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientSetPlayerNicknameResponse
         * @static
         * @param {CMsgClientSetPlayerNicknameResponse} message CMsgClientSetPlayerNicknameResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientSetPlayerNicknameResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eresult = 0;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            return object;
        };
    
        /**
         * Converts this CMsgClientSetPlayerNicknameResponse to JSON.
         * @function toJSON
         * @memberof CMsgClientSetPlayerNicknameResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientSetPlayerNicknameResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientSetPlayerNicknameResponse;
    })();
    
    $root.CMsgClientRequestFriendData = (function() {
    
        /**
         * Properties of a CMsgClientRequestFriendData.
         * @exports ICMsgClientRequestFriendData
         * @interface ICMsgClientRequestFriendData
         * @property {number|null} [persona_state_requested] CMsgClientRequestFriendData persona_state_requested
         * @property {Array.<number|Long>|null} [friends] CMsgClientRequestFriendData friends
         */
    
        /**
         * Constructs a new CMsgClientRequestFriendData.
         * @exports CMsgClientRequestFriendData
         * @classdesc Represents a CMsgClientRequestFriendData.
         * @implements ICMsgClientRequestFriendData
         * @constructor
         * @param {ICMsgClientRequestFriendData=} [properties] Properties to set
         */
        function CMsgClientRequestFriendData(properties) {
            this.friends = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientRequestFriendData persona_state_requested.
         * @member {number} persona_state_requested
         * @memberof CMsgClientRequestFriendData
         * @instance
         */
        CMsgClientRequestFriendData.prototype.persona_state_requested = 0;
    
        /**
         * CMsgClientRequestFriendData friends.
         * @member {Array.<number|Long>} friends
         * @memberof CMsgClientRequestFriendData
         * @instance
         */
        CMsgClientRequestFriendData.prototype.friends = $util.emptyArray;
    
        /**
         * Creates a new CMsgClientRequestFriendData instance using the specified properties.
         * @function create
         * @memberof CMsgClientRequestFriendData
         * @static
         * @param {ICMsgClientRequestFriendData=} [properties] Properties to set
         * @returns {CMsgClientRequestFriendData} CMsgClientRequestFriendData instance
         */
        CMsgClientRequestFriendData.create = function create(properties) {
            return new CMsgClientRequestFriendData(properties);
        };
    
        /**
         * Encodes the specified CMsgClientRequestFriendData message. Does not implicitly {@link CMsgClientRequestFriendData.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientRequestFriendData
         * @static
         * @param {ICMsgClientRequestFriendData} message CMsgClientRequestFriendData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientRequestFriendData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.persona_state_requested != null && message.hasOwnProperty("persona_state_requested"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.persona_state_requested);
            if (message.friends != null && message.friends.length)
                for (var i = 0; i < message.friends.length; ++i)
                    writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.friends[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientRequestFriendData message, length delimited. Does not implicitly {@link CMsgClientRequestFriendData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientRequestFriendData
         * @static
         * @param {ICMsgClientRequestFriendData} message CMsgClientRequestFriendData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientRequestFriendData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientRequestFriendData message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientRequestFriendData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientRequestFriendData} CMsgClientRequestFriendData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientRequestFriendData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientRequestFriendData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.persona_state_requested = reader.uint32();
                    break;
                case 2:
                    if (!(message.friends && message.friends.length))
                        message.friends = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.friends.push(reader.fixed64());
                    } else
                        message.friends.push(reader.fixed64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientRequestFriendData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientRequestFriendData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientRequestFriendData} CMsgClientRequestFriendData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientRequestFriendData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientRequestFriendData message.
         * @function verify
         * @memberof CMsgClientRequestFriendData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientRequestFriendData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.persona_state_requested != null && message.hasOwnProperty("persona_state_requested"))
                if (!$util.isInteger(message.persona_state_requested))
                    return "persona_state_requested: integer expected";
            if (message.friends != null && message.hasOwnProperty("friends")) {
                if (!Array.isArray(message.friends))
                    return "friends: array expected";
                for (var i = 0; i < message.friends.length; ++i)
                    if (!$util.isInteger(message.friends[i]) && !(message.friends[i] && $util.isInteger(message.friends[i].low) && $util.isInteger(message.friends[i].high)))
                        return "friends: integer|Long[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgClientRequestFriendData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientRequestFriendData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientRequestFriendData} CMsgClientRequestFriendData
         */
        CMsgClientRequestFriendData.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientRequestFriendData)
                return object;
            var message = new $root.CMsgClientRequestFriendData();
            if (object.persona_state_requested != null)
                message.persona_state_requested = object.persona_state_requested >>> 0;
            if (object.friends) {
                if (!Array.isArray(object.friends))
                    throw TypeError(".CMsgClientRequestFriendData.friends: array expected");
                message.friends = [];
                for (var i = 0; i < object.friends.length; ++i)
                    if ($util.Long)
                        (message.friends[i] = $util.Long.fromValue(object.friends[i])).unsigned = false;
                    else if (typeof object.friends[i] === "string")
                        message.friends[i] = parseInt(object.friends[i], 10);
                    else if (typeof object.friends[i] === "number")
                        message.friends[i] = object.friends[i];
                    else if (typeof object.friends[i] === "object")
                        message.friends[i] = new $util.LongBits(object.friends[i].low >>> 0, object.friends[i].high >>> 0).toNumber();
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientRequestFriendData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientRequestFriendData
         * @static
         * @param {CMsgClientRequestFriendData} message CMsgClientRequestFriendData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientRequestFriendData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.friends = [];
            if (options.defaults)
                object.persona_state_requested = 0;
            if (message.persona_state_requested != null && message.hasOwnProperty("persona_state_requested"))
                object.persona_state_requested = message.persona_state_requested;
            if (message.friends && message.friends.length) {
                object.friends = [];
                for (var j = 0; j < message.friends.length; ++j)
                    if (typeof message.friends[j] === "number")
                        object.friends[j] = options.longs === String ? String(message.friends[j]) : message.friends[j];
                    else
                        object.friends[j] = options.longs === String ? $util.Long.prototype.toString.call(message.friends[j]) : options.longs === Number ? new $util.LongBits(message.friends[j].low >>> 0, message.friends[j].high >>> 0).toNumber() : message.friends[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgClientRequestFriendData to JSON.
         * @function toJSON
         * @memberof CMsgClientRequestFriendData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientRequestFriendData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientRequestFriendData;
    })();
    
    $root.CMsgClientChangeStatus = (function() {
    
        /**
         * Properties of a CMsgClientChangeStatus.
         * @exports ICMsgClientChangeStatus
         * @interface ICMsgClientChangeStatus
         * @property {number|null} [persona_state] CMsgClientChangeStatus persona_state
         * @property {string|null} [player_name] CMsgClientChangeStatus player_name
         * @property {boolean|null} [is_auto_generated_name] CMsgClientChangeStatus is_auto_generated_name
         * @property {boolean|null} [high_priority] CMsgClientChangeStatus high_priority
         * @property {boolean|null} [persona_set_by_user] CMsgClientChangeStatus persona_set_by_user
         * @property {number|null} [persona_state_flags] CMsgClientChangeStatus persona_state_flags
         * @property {boolean|null} [need_persona_response] CMsgClientChangeStatus need_persona_response
         * @property {boolean|null} [is_client_idle] CMsgClientChangeStatus is_client_idle
         */
    
        /**
         * Constructs a new CMsgClientChangeStatus.
         * @exports CMsgClientChangeStatus
         * @classdesc Represents a CMsgClientChangeStatus.
         * @implements ICMsgClientChangeStatus
         * @constructor
         * @param {ICMsgClientChangeStatus=} [properties] Properties to set
         */
        function CMsgClientChangeStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientChangeStatus persona_state.
         * @member {number} persona_state
         * @memberof CMsgClientChangeStatus
         * @instance
         */
        CMsgClientChangeStatus.prototype.persona_state = 0;
    
        /**
         * CMsgClientChangeStatus player_name.
         * @member {string} player_name
         * @memberof CMsgClientChangeStatus
         * @instance
         */
        CMsgClientChangeStatus.prototype.player_name = "";
    
        /**
         * CMsgClientChangeStatus is_auto_generated_name.
         * @member {boolean} is_auto_generated_name
         * @memberof CMsgClientChangeStatus
         * @instance
         */
        CMsgClientChangeStatus.prototype.is_auto_generated_name = false;
    
        /**
         * CMsgClientChangeStatus high_priority.
         * @member {boolean} high_priority
         * @memberof CMsgClientChangeStatus
         * @instance
         */
        CMsgClientChangeStatus.prototype.high_priority = false;
    
        /**
         * CMsgClientChangeStatus persona_set_by_user.
         * @member {boolean} persona_set_by_user
         * @memberof CMsgClientChangeStatus
         * @instance
         */
        CMsgClientChangeStatus.prototype.persona_set_by_user = false;
    
        /**
         * CMsgClientChangeStatus persona_state_flags.
         * @member {number} persona_state_flags
         * @memberof CMsgClientChangeStatus
         * @instance
         */
        CMsgClientChangeStatus.prototype.persona_state_flags = 0;
    
        /**
         * CMsgClientChangeStatus need_persona_response.
         * @member {boolean} need_persona_response
         * @memberof CMsgClientChangeStatus
         * @instance
         */
        CMsgClientChangeStatus.prototype.need_persona_response = false;
    
        /**
         * CMsgClientChangeStatus is_client_idle.
         * @member {boolean} is_client_idle
         * @memberof CMsgClientChangeStatus
         * @instance
         */
        CMsgClientChangeStatus.prototype.is_client_idle = false;
    
        /**
         * Creates a new CMsgClientChangeStatus instance using the specified properties.
         * @function create
         * @memberof CMsgClientChangeStatus
         * @static
         * @param {ICMsgClientChangeStatus=} [properties] Properties to set
         * @returns {CMsgClientChangeStatus} CMsgClientChangeStatus instance
         */
        CMsgClientChangeStatus.create = function create(properties) {
            return new CMsgClientChangeStatus(properties);
        };
    
        /**
         * Encodes the specified CMsgClientChangeStatus message. Does not implicitly {@link CMsgClientChangeStatus.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientChangeStatus
         * @static
         * @param {ICMsgClientChangeStatus} message CMsgClientChangeStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientChangeStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.persona_state != null && message.hasOwnProperty("persona_state"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.persona_state);
            if (message.player_name != null && message.hasOwnProperty("player_name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.player_name);
            if (message.is_auto_generated_name != null && message.hasOwnProperty("is_auto_generated_name"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.is_auto_generated_name);
            if (message.high_priority != null && message.hasOwnProperty("high_priority"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.high_priority);
            if (message.persona_set_by_user != null && message.hasOwnProperty("persona_set_by_user"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.persona_set_by_user);
            if (message.persona_state_flags != null && message.hasOwnProperty("persona_state_flags"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.persona_state_flags);
            if (message.need_persona_response != null && message.hasOwnProperty("need_persona_response"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.need_persona_response);
            if (message.is_client_idle != null && message.hasOwnProperty("is_client_idle"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.is_client_idle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientChangeStatus message, length delimited. Does not implicitly {@link CMsgClientChangeStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientChangeStatus
         * @static
         * @param {ICMsgClientChangeStatus} message CMsgClientChangeStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientChangeStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientChangeStatus message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientChangeStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientChangeStatus} CMsgClientChangeStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientChangeStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientChangeStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.persona_state = reader.uint32();
                    break;
                case 2:
                    message.player_name = reader.string();
                    break;
                case 3:
                    message.is_auto_generated_name = reader.bool();
                    break;
                case 4:
                    message.high_priority = reader.bool();
                    break;
                case 5:
                    message.persona_set_by_user = reader.bool();
                    break;
                case 6:
                    message.persona_state_flags = reader.uint32();
                    break;
                case 7:
                    message.need_persona_response = reader.bool();
                    break;
                case 8:
                    message.is_client_idle = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientChangeStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientChangeStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientChangeStatus} CMsgClientChangeStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientChangeStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientChangeStatus message.
         * @function verify
         * @memberof CMsgClientChangeStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientChangeStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.persona_state != null && message.hasOwnProperty("persona_state"))
                if (!$util.isInteger(message.persona_state))
                    return "persona_state: integer expected";
            if (message.player_name != null && message.hasOwnProperty("player_name"))
                if (!$util.isString(message.player_name))
                    return "player_name: string expected";
            if (message.is_auto_generated_name != null && message.hasOwnProperty("is_auto_generated_name"))
                if (typeof message.is_auto_generated_name !== "boolean")
                    return "is_auto_generated_name: boolean expected";
            if (message.high_priority != null && message.hasOwnProperty("high_priority"))
                if (typeof message.high_priority !== "boolean")
                    return "high_priority: boolean expected";
            if (message.persona_set_by_user != null && message.hasOwnProperty("persona_set_by_user"))
                if (typeof message.persona_set_by_user !== "boolean")
                    return "persona_set_by_user: boolean expected";
            if (message.persona_state_flags != null && message.hasOwnProperty("persona_state_flags"))
                if (!$util.isInteger(message.persona_state_flags))
                    return "persona_state_flags: integer expected";
            if (message.need_persona_response != null && message.hasOwnProperty("need_persona_response"))
                if (typeof message.need_persona_response !== "boolean")
                    return "need_persona_response: boolean expected";
            if (message.is_client_idle != null && message.hasOwnProperty("is_client_idle"))
                if (typeof message.is_client_idle !== "boolean")
                    return "is_client_idle: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientChangeStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientChangeStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientChangeStatus} CMsgClientChangeStatus
         */
        CMsgClientChangeStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientChangeStatus)
                return object;
            var message = new $root.CMsgClientChangeStatus();
            if (object.persona_state != null)
                message.persona_state = object.persona_state >>> 0;
            if (object.player_name != null)
                message.player_name = String(object.player_name);
            if (object.is_auto_generated_name != null)
                message.is_auto_generated_name = Boolean(object.is_auto_generated_name);
            if (object.high_priority != null)
                message.high_priority = Boolean(object.high_priority);
            if (object.persona_set_by_user != null)
                message.persona_set_by_user = Boolean(object.persona_set_by_user);
            if (object.persona_state_flags != null)
                message.persona_state_flags = object.persona_state_flags >>> 0;
            if (object.need_persona_response != null)
                message.need_persona_response = Boolean(object.need_persona_response);
            if (object.is_client_idle != null)
                message.is_client_idle = Boolean(object.is_client_idle);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientChangeStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientChangeStatus
         * @static
         * @param {CMsgClientChangeStatus} message CMsgClientChangeStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientChangeStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.persona_state = 0;
                object.player_name = "";
                object.is_auto_generated_name = false;
                object.high_priority = false;
                object.persona_set_by_user = false;
                object.persona_state_flags = 0;
                object.need_persona_response = false;
                object.is_client_idle = false;
            }
            if (message.persona_state != null && message.hasOwnProperty("persona_state"))
                object.persona_state = message.persona_state;
            if (message.player_name != null && message.hasOwnProperty("player_name"))
                object.player_name = message.player_name;
            if (message.is_auto_generated_name != null && message.hasOwnProperty("is_auto_generated_name"))
                object.is_auto_generated_name = message.is_auto_generated_name;
            if (message.high_priority != null && message.hasOwnProperty("high_priority"))
                object.high_priority = message.high_priority;
            if (message.persona_set_by_user != null && message.hasOwnProperty("persona_set_by_user"))
                object.persona_set_by_user = message.persona_set_by_user;
            if (message.persona_state_flags != null && message.hasOwnProperty("persona_state_flags"))
                object.persona_state_flags = message.persona_state_flags;
            if (message.need_persona_response != null && message.hasOwnProperty("need_persona_response"))
                object.need_persona_response = message.need_persona_response;
            if (message.is_client_idle != null && message.hasOwnProperty("is_client_idle"))
                object.is_client_idle = message.is_client_idle;
            return object;
        };
    
        /**
         * Converts this CMsgClientChangeStatus to JSON.
         * @function toJSON
         * @memberof CMsgClientChangeStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientChangeStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientChangeStatus;
    })();
    
    $root.CMsgPersonaChangeResponse = (function() {
    
        /**
         * Properties of a CMsgPersonaChangeResponse.
         * @exports ICMsgPersonaChangeResponse
         * @interface ICMsgPersonaChangeResponse
         * @property {number|null} [result] CMsgPersonaChangeResponse result
         * @property {string|null} [player_name] CMsgPersonaChangeResponse player_name
         */
    
        /**
         * Constructs a new CMsgPersonaChangeResponse.
         * @exports CMsgPersonaChangeResponse
         * @classdesc Represents a CMsgPersonaChangeResponse.
         * @implements ICMsgPersonaChangeResponse
         * @constructor
         * @param {ICMsgPersonaChangeResponse=} [properties] Properties to set
         */
        function CMsgPersonaChangeResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgPersonaChangeResponse result.
         * @member {number} result
         * @memberof CMsgPersonaChangeResponse
         * @instance
         */
        CMsgPersonaChangeResponse.prototype.result = 0;
    
        /**
         * CMsgPersonaChangeResponse player_name.
         * @member {string} player_name
         * @memberof CMsgPersonaChangeResponse
         * @instance
         */
        CMsgPersonaChangeResponse.prototype.player_name = "";
    
        /**
         * Creates a new CMsgPersonaChangeResponse instance using the specified properties.
         * @function create
         * @memberof CMsgPersonaChangeResponse
         * @static
         * @param {ICMsgPersonaChangeResponse=} [properties] Properties to set
         * @returns {CMsgPersonaChangeResponse} CMsgPersonaChangeResponse instance
         */
        CMsgPersonaChangeResponse.create = function create(properties) {
            return new CMsgPersonaChangeResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgPersonaChangeResponse message. Does not implicitly {@link CMsgPersonaChangeResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgPersonaChangeResponse
         * @static
         * @param {ICMsgPersonaChangeResponse} message CMsgPersonaChangeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPersonaChangeResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result);
            if (message.player_name != null && message.hasOwnProperty("player_name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.player_name);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgPersonaChangeResponse message, length delimited. Does not implicitly {@link CMsgPersonaChangeResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgPersonaChangeResponse
         * @static
         * @param {ICMsgPersonaChangeResponse} message CMsgPersonaChangeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPersonaChangeResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgPersonaChangeResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgPersonaChangeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgPersonaChangeResponse} CMsgPersonaChangeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPersonaChangeResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgPersonaChangeResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result = reader.uint32();
                    break;
                case 2:
                    message.player_name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgPersonaChangeResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgPersonaChangeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgPersonaChangeResponse} CMsgPersonaChangeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPersonaChangeResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgPersonaChangeResponse message.
         * @function verify
         * @memberof CMsgPersonaChangeResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgPersonaChangeResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.player_name != null && message.hasOwnProperty("player_name"))
                if (!$util.isString(message.player_name))
                    return "player_name: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgPersonaChangeResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgPersonaChangeResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgPersonaChangeResponse} CMsgPersonaChangeResponse
         */
        CMsgPersonaChangeResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgPersonaChangeResponse)
                return object;
            var message = new $root.CMsgPersonaChangeResponse();
            if (object.result != null)
                message.result = object.result >>> 0;
            if (object.player_name != null)
                message.player_name = String(object.player_name);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgPersonaChangeResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgPersonaChangeResponse
         * @static
         * @param {CMsgPersonaChangeResponse} message CMsgPersonaChangeResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgPersonaChangeResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.player_name = "";
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.player_name != null && message.hasOwnProperty("player_name"))
                object.player_name = message.player_name;
            return object;
        };
    
        /**
         * Converts this CMsgPersonaChangeResponse to JSON.
         * @function toJSON
         * @memberof CMsgPersonaChangeResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgPersonaChangeResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgPersonaChangeResponse;
    })();
    
    $root.CMsgClientPersonaState = (function() {
    
        /**
         * Properties of a CMsgClientPersonaState.
         * @exports ICMsgClientPersonaState
         * @interface ICMsgClientPersonaState
         * @property {number|null} [status_flags] CMsgClientPersonaState status_flags
         * @property {Array.<CMsgClientPersonaState.IFriend>|null} [friends] CMsgClientPersonaState friends
         */
    
        /**
         * Constructs a new CMsgClientPersonaState.
         * @exports CMsgClientPersonaState
         * @classdesc Represents a CMsgClientPersonaState.
         * @implements ICMsgClientPersonaState
         * @constructor
         * @param {ICMsgClientPersonaState=} [properties] Properties to set
         */
        function CMsgClientPersonaState(properties) {
            this.friends = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientPersonaState status_flags.
         * @member {number} status_flags
         * @memberof CMsgClientPersonaState
         * @instance
         */
        CMsgClientPersonaState.prototype.status_flags = 0;
    
        /**
         * CMsgClientPersonaState friends.
         * @member {Array.<CMsgClientPersonaState.IFriend>} friends
         * @memberof CMsgClientPersonaState
         * @instance
         */
        CMsgClientPersonaState.prototype.friends = $util.emptyArray;
    
        /**
         * Creates a new CMsgClientPersonaState instance using the specified properties.
         * @function create
         * @memberof CMsgClientPersonaState
         * @static
         * @param {ICMsgClientPersonaState=} [properties] Properties to set
         * @returns {CMsgClientPersonaState} CMsgClientPersonaState instance
         */
        CMsgClientPersonaState.create = function create(properties) {
            return new CMsgClientPersonaState(properties);
        };
    
        /**
         * Encodes the specified CMsgClientPersonaState message. Does not implicitly {@link CMsgClientPersonaState.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientPersonaState
         * @static
         * @param {ICMsgClientPersonaState} message CMsgClientPersonaState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientPersonaState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.status_flags != null && message.hasOwnProperty("status_flags"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.status_flags);
            if (message.friends != null && message.friends.length)
                for (var i = 0; i < message.friends.length; ++i)
                    $root.CMsgClientPersonaState.Friend.encode(message.friends[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientPersonaState message, length delimited. Does not implicitly {@link CMsgClientPersonaState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientPersonaState
         * @static
         * @param {ICMsgClientPersonaState} message CMsgClientPersonaState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientPersonaState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientPersonaState message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientPersonaState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientPersonaState} CMsgClientPersonaState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientPersonaState.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientPersonaState();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.status_flags = reader.uint32();
                    break;
                case 2:
                    if (!(message.friends && message.friends.length))
                        message.friends = [];
                    message.friends.push($root.CMsgClientPersonaState.Friend.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientPersonaState message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientPersonaState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientPersonaState} CMsgClientPersonaState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientPersonaState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientPersonaState message.
         * @function verify
         * @memberof CMsgClientPersonaState
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientPersonaState.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.status_flags != null && message.hasOwnProperty("status_flags"))
                if (!$util.isInteger(message.status_flags))
                    return "status_flags: integer expected";
            if (message.friends != null && message.hasOwnProperty("friends")) {
                if (!Array.isArray(message.friends))
                    return "friends: array expected";
                for (var i = 0; i < message.friends.length; ++i) {
                    var error = $root.CMsgClientPersonaState.Friend.verify(message.friends[i]);
                    if (error)
                        return "friends." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgClientPersonaState message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientPersonaState
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientPersonaState} CMsgClientPersonaState
         */
        CMsgClientPersonaState.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientPersonaState)
                return object;
            var message = new $root.CMsgClientPersonaState();
            if (object.status_flags != null)
                message.status_flags = object.status_flags >>> 0;
            if (object.friends) {
                if (!Array.isArray(object.friends))
                    throw TypeError(".CMsgClientPersonaState.friends: array expected");
                message.friends = [];
                for (var i = 0; i < object.friends.length; ++i) {
                    if (typeof object.friends[i] !== "object")
                        throw TypeError(".CMsgClientPersonaState.friends: object expected");
                    message.friends[i] = $root.CMsgClientPersonaState.Friend.fromObject(object.friends[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientPersonaState message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientPersonaState
         * @static
         * @param {CMsgClientPersonaState} message CMsgClientPersonaState
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientPersonaState.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.friends = [];
            if (options.defaults)
                object.status_flags = 0;
            if (message.status_flags != null && message.hasOwnProperty("status_flags"))
                object.status_flags = message.status_flags;
            if (message.friends && message.friends.length) {
                object.friends = [];
                for (var j = 0; j < message.friends.length; ++j)
                    object.friends[j] = $root.CMsgClientPersonaState.Friend.toObject(message.friends[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgClientPersonaState to JSON.
         * @function toJSON
         * @memberof CMsgClientPersonaState
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientPersonaState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgClientPersonaState.Friend = (function() {
    
            /**
             * Properties of a Friend.
             * @memberof CMsgClientPersonaState
             * @interface IFriend
             * @property {number|Long|null} [friendid] Friend friendid
             * @property {number|null} [persona_state] Friend persona_state
             * @property {number|null} [game_played_app_id] Friend game_played_app_id
             * @property {number|null} [game_server_ip] Friend game_server_ip
             * @property {number|null} [game_server_port] Friend game_server_port
             * @property {number|null} [persona_state_flags] Friend persona_state_flags
             * @property {number|null} [online_session_instances] Friend online_session_instances
             * @property {number|null} [published_instance_id] Friend published_instance_id
             * @property {boolean|null} [persona_set_by_user] Friend persona_set_by_user
             * @property {string|null} [player_name] Friend player_name
             * @property {number|null} [query_port] Friend query_port
             * @property {number|Long|null} [steamid_source] Friend steamid_source
             * @property {Uint8Array|null} [avatar_hash] Friend avatar_hash
             * @property {number|null} [last_logoff] Friend last_logoff
             * @property {number|null} [last_logon] Friend last_logon
             * @property {number|null} [last_seen_online] Friend last_seen_online
             * @property {number|null} [clan_rank] Friend clan_rank
             * @property {string|null} [game_name] Friend game_name
             * @property {number|Long|null} [gameid] Friend gameid
             * @property {Uint8Array|null} [game_data_blob] Friend game_data_blob
             * @property {CMsgClientPersonaState.Friend.IClanData|null} [clan_data] Friend clan_data
             * @property {string|null} [clan_tag] Friend clan_tag
             * @property {Array.<CMsgClientPersonaState.Friend.IKV>|null} [rich_presence] Friend rich_presence
             * @property {number|Long|null} [broadcast_id] Friend broadcast_id
             * @property {number|Long|null} [game_lobby_id] Friend game_lobby_id
             * @property {number|null} [watching_broadcast_accountid] Friend watching_broadcast_accountid
             * @property {number|null} [watching_broadcast_appid] Friend watching_broadcast_appid
             * @property {number|null} [watching_broadcast_viewers] Friend watching_broadcast_viewers
             * @property {string|null} [watching_broadcast_title] Friend watching_broadcast_title
             */
    
            /**
             * Constructs a new Friend.
             * @memberof CMsgClientPersonaState
             * @classdesc Represents a Friend.
             * @implements IFriend
             * @constructor
             * @param {CMsgClientPersonaState.IFriend=} [properties] Properties to set
             */
            function Friend(properties) {
                this.rich_presence = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Friend friendid.
             * @member {number|Long} friendid
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.friendid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * Friend persona_state.
             * @member {number} persona_state
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.persona_state = 0;
    
            /**
             * Friend game_played_app_id.
             * @member {number} game_played_app_id
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.game_played_app_id = 0;
    
            /**
             * Friend game_server_ip.
             * @member {number} game_server_ip
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.game_server_ip = 0;
    
            /**
             * Friend game_server_port.
             * @member {number} game_server_port
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.game_server_port = 0;
    
            /**
             * Friend persona_state_flags.
             * @member {number} persona_state_flags
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.persona_state_flags = 0;
    
            /**
             * Friend online_session_instances.
             * @member {number} online_session_instances
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.online_session_instances = 0;
    
            /**
             * Friend published_instance_id.
             * @member {number} published_instance_id
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.published_instance_id = 0;
    
            /**
             * Friend persona_set_by_user.
             * @member {boolean} persona_set_by_user
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.persona_set_by_user = false;
    
            /**
             * Friend player_name.
             * @member {string} player_name
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.player_name = "";
    
            /**
             * Friend query_port.
             * @member {number} query_port
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.query_port = 0;
    
            /**
             * Friend steamid_source.
             * @member {number|Long} steamid_source
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.steamid_source = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * Friend avatar_hash.
             * @member {Uint8Array} avatar_hash
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.avatar_hash = $util.newBuffer([]);
    
            /**
             * Friend last_logoff.
             * @member {number} last_logoff
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.last_logoff = 0;
    
            /**
             * Friend last_logon.
             * @member {number} last_logon
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.last_logon = 0;
    
            /**
             * Friend last_seen_online.
             * @member {number} last_seen_online
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.last_seen_online = 0;
    
            /**
             * Friend clan_rank.
             * @member {number} clan_rank
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.clan_rank = 0;
    
            /**
             * Friend game_name.
             * @member {string} game_name
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.game_name = "";
    
            /**
             * Friend gameid.
             * @member {number|Long} gameid
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.gameid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * Friend game_data_blob.
             * @member {Uint8Array} game_data_blob
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.game_data_blob = $util.newBuffer([]);
    
            /**
             * Friend clan_data.
             * @member {CMsgClientPersonaState.Friend.IClanData|null|undefined} clan_data
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.clan_data = null;
    
            /**
             * Friend clan_tag.
             * @member {string} clan_tag
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.clan_tag = "";
    
            /**
             * Friend rich_presence.
             * @member {Array.<CMsgClientPersonaState.Friend.IKV>} rich_presence
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.rich_presence = $util.emptyArray;
    
            /**
             * Friend broadcast_id.
             * @member {number|Long} broadcast_id
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.broadcast_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * Friend game_lobby_id.
             * @member {number|Long} game_lobby_id
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.game_lobby_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * Friend watching_broadcast_accountid.
             * @member {number} watching_broadcast_accountid
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.watching_broadcast_accountid = 0;
    
            /**
             * Friend watching_broadcast_appid.
             * @member {number} watching_broadcast_appid
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.watching_broadcast_appid = 0;
    
            /**
             * Friend watching_broadcast_viewers.
             * @member {number} watching_broadcast_viewers
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.watching_broadcast_viewers = 0;
    
            /**
             * Friend watching_broadcast_title.
             * @member {string} watching_broadcast_title
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             */
            Friend.prototype.watching_broadcast_title = "";
    
            /**
             * Creates a new Friend instance using the specified properties.
             * @function create
             * @memberof CMsgClientPersonaState.Friend
             * @static
             * @param {CMsgClientPersonaState.IFriend=} [properties] Properties to set
             * @returns {CMsgClientPersonaState.Friend} Friend instance
             */
            Friend.create = function create(properties) {
                return new Friend(properties);
            };
    
            /**
             * Encodes the specified Friend message. Does not implicitly {@link CMsgClientPersonaState.Friend.verify|verify} messages.
             * @function encode
             * @memberof CMsgClientPersonaState.Friend
             * @static
             * @param {CMsgClientPersonaState.IFriend} message Friend message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Friend.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.friendid != null && message.hasOwnProperty("friendid"))
                    writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.friendid);
                if (message.persona_state != null && message.hasOwnProperty("persona_state"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.persona_state);
                if (message.game_played_app_id != null && message.hasOwnProperty("game_played_app_id"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.game_played_app_id);
                if (message.game_server_ip != null && message.hasOwnProperty("game_server_ip"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.game_server_ip);
                if (message.game_server_port != null && message.hasOwnProperty("game_server_port"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.game_server_port);
                if (message.persona_state_flags != null && message.hasOwnProperty("persona_state_flags"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.persona_state_flags);
                if (message.online_session_instances != null && message.hasOwnProperty("online_session_instances"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.online_session_instances);
                if (message.published_instance_id != null && message.hasOwnProperty("published_instance_id"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.published_instance_id);
                if (message.persona_set_by_user != null && message.hasOwnProperty("persona_set_by_user"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.persona_set_by_user);
                if (message.player_name != null && message.hasOwnProperty("player_name"))
                    writer.uint32(/* id 15, wireType 2 =*/122).string(message.player_name);
                if (message.query_port != null && message.hasOwnProperty("query_port"))
                    writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.query_port);
                if (message.steamid_source != null && message.hasOwnProperty("steamid_source"))
                    writer.uint32(/* id 25, wireType 1 =*/201).fixed64(message.steamid_source);
                if (message.avatar_hash != null && message.hasOwnProperty("avatar_hash"))
                    writer.uint32(/* id 31, wireType 2 =*/250).bytes(message.avatar_hash);
                if (message.last_logoff != null && message.hasOwnProperty("last_logoff"))
                    writer.uint32(/* id 45, wireType 0 =*/360).uint32(message.last_logoff);
                if (message.last_logon != null && message.hasOwnProperty("last_logon"))
                    writer.uint32(/* id 46, wireType 0 =*/368).uint32(message.last_logon);
                if (message.last_seen_online != null && message.hasOwnProperty("last_seen_online"))
                    writer.uint32(/* id 47, wireType 0 =*/376).uint32(message.last_seen_online);
                if (message.clan_rank != null && message.hasOwnProperty("clan_rank"))
                    writer.uint32(/* id 50, wireType 0 =*/400).uint32(message.clan_rank);
                if (message.game_name != null && message.hasOwnProperty("game_name"))
                    writer.uint32(/* id 55, wireType 2 =*/442).string(message.game_name);
                if (message.gameid != null && message.hasOwnProperty("gameid"))
                    writer.uint32(/* id 56, wireType 1 =*/449).fixed64(message.gameid);
                if (message.game_data_blob != null && message.hasOwnProperty("game_data_blob"))
                    writer.uint32(/* id 60, wireType 2 =*/482).bytes(message.game_data_blob);
                if (message.clan_data != null && message.hasOwnProperty("clan_data"))
                    $root.CMsgClientPersonaState.Friend.ClanData.encode(message.clan_data, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
                if (message.clan_tag != null && message.hasOwnProperty("clan_tag"))
                    writer.uint32(/* id 65, wireType 2 =*/522).string(message.clan_tag);
                if (message.rich_presence != null && message.rich_presence.length)
                    for (var i = 0; i < message.rich_presence.length; ++i)
                        $root.CMsgClientPersonaState.Friend.KV.encode(message.rich_presence[i], writer.uint32(/* id 71, wireType 2 =*/570).fork()).ldelim();
                if (message.broadcast_id != null && message.hasOwnProperty("broadcast_id"))
                    writer.uint32(/* id 72, wireType 1 =*/577).fixed64(message.broadcast_id);
                if (message.game_lobby_id != null && message.hasOwnProperty("game_lobby_id"))
                    writer.uint32(/* id 73, wireType 1 =*/585).fixed64(message.game_lobby_id);
                if (message.watching_broadcast_accountid != null && message.hasOwnProperty("watching_broadcast_accountid"))
                    writer.uint32(/* id 74, wireType 0 =*/592).uint32(message.watching_broadcast_accountid);
                if (message.watching_broadcast_appid != null && message.hasOwnProperty("watching_broadcast_appid"))
                    writer.uint32(/* id 75, wireType 0 =*/600).uint32(message.watching_broadcast_appid);
                if (message.watching_broadcast_viewers != null && message.hasOwnProperty("watching_broadcast_viewers"))
                    writer.uint32(/* id 76, wireType 0 =*/608).uint32(message.watching_broadcast_viewers);
                if (message.watching_broadcast_title != null && message.hasOwnProperty("watching_broadcast_title"))
                    writer.uint32(/* id 77, wireType 2 =*/618).string(message.watching_broadcast_title);
                return writer;
            };
    
            /**
             * Encodes the specified Friend message, length delimited. Does not implicitly {@link CMsgClientPersonaState.Friend.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgClientPersonaState.Friend
             * @static
             * @param {CMsgClientPersonaState.IFriend} message Friend message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Friend.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Friend message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgClientPersonaState.Friend
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgClientPersonaState.Friend} Friend
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Friend.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientPersonaState.Friend();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.friendid = reader.fixed64();
                        break;
                    case 2:
                        message.persona_state = reader.uint32();
                        break;
                    case 3:
                        message.game_played_app_id = reader.uint32();
                        break;
                    case 4:
                        message.game_server_ip = reader.uint32();
                        break;
                    case 5:
                        message.game_server_port = reader.uint32();
                        break;
                    case 6:
                        message.persona_state_flags = reader.uint32();
                        break;
                    case 7:
                        message.online_session_instances = reader.uint32();
                        break;
                    case 8:
                        message.published_instance_id = reader.uint32();
                        break;
                    case 10:
                        message.persona_set_by_user = reader.bool();
                        break;
                    case 15:
                        message.player_name = reader.string();
                        break;
                    case 20:
                        message.query_port = reader.uint32();
                        break;
                    case 25:
                        message.steamid_source = reader.fixed64();
                        break;
                    case 31:
                        message.avatar_hash = reader.bytes();
                        break;
                    case 45:
                        message.last_logoff = reader.uint32();
                        break;
                    case 46:
                        message.last_logon = reader.uint32();
                        break;
                    case 47:
                        message.last_seen_online = reader.uint32();
                        break;
                    case 50:
                        message.clan_rank = reader.uint32();
                        break;
                    case 55:
                        message.game_name = reader.string();
                        break;
                    case 56:
                        message.gameid = reader.fixed64();
                        break;
                    case 60:
                        message.game_data_blob = reader.bytes();
                        break;
                    case 64:
                        message.clan_data = $root.CMsgClientPersonaState.Friend.ClanData.decode(reader, reader.uint32());
                        break;
                    case 65:
                        message.clan_tag = reader.string();
                        break;
                    case 71:
                        if (!(message.rich_presence && message.rich_presence.length))
                            message.rich_presence = [];
                        message.rich_presence.push($root.CMsgClientPersonaState.Friend.KV.decode(reader, reader.uint32()));
                        break;
                    case 72:
                        message.broadcast_id = reader.fixed64();
                        break;
                    case 73:
                        message.game_lobby_id = reader.fixed64();
                        break;
                    case 74:
                        message.watching_broadcast_accountid = reader.uint32();
                        break;
                    case 75:
                        message.watching_broadcast_appid = reader.uint32();
                        break;
                    case 76:
                        message.watching_broadcast_viewers = reader.uint32();
                        break;
                    case 77:
                        message.watching_broadcast_title = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Friend message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgClientPersonaState.Friend
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgClientPersonaState.Friend} Friend
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Friend.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Friend message.
             * @function verify
             * @memberof CMsgClientPersonaState.Friend
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Friend.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.friendid != null && message.hasOwnProperty("friendid"))
                    if (!$util.isInteger(message.friendid) && !(message.friendid && $util.isInteger(message.friendid.low) && $util.isInteger(message.friendid.high)))
                        return "friendid: integer|Long expected";
                if (message.persona_state != null && message.hasOwnProperty("persona_state"))
                    if (!$util.isInteger(message.persona_state))
                        return "persona_state: integer expected";
                if (message.game_played_app_id != null && message.hasOwnProperty("game_played_app_id"))
                    if (!$util.isInteger(message.game_played_app_id))
                        return "game_played_app_id: integer expected";
                if (message.game_server_ip != null && message.hasOwnProperty("game_server_ip"))
                    if (!$util.isInteger(message.game_server_ip))
                        return "game_server_ip: integer expected";
                if (message.game_server_port != null && message.hasOwnProperty("game_server_port"))
                    if (!$util.isInteger(message.game_server_port))
                        return "game_server_port: integer expected";
                if (message.persona_state_flags != null && message.hasOwnProperty("persona_state_flags"))
                    if (!$util.isInteger(message.persona_state_flags))
                        return "persona_state_flags: integer expected";
                if (message.online_session_instances != null && message.hasOwnProperty("online_session_instances"))
                    if (!$util.isInteger(message.online_session_instances))
                        return "online_session_instances: integer expected";
                if (message.published_instance_id != null && message.hasOwnProperty("published_instance_id"))
                    if (!$util.isInteger(message.published_instance_id))
                        return "published_instance_id: integer expected";
                if (message.persona_set_by_user != null && message.hasOwnProperty("persona_set_by_user"))
                    if (typeof message.persona_set_by_user !== "boolean")
                        return "persona_set_by_user: boolean expected";
                if (message.player_name != null && message.hasOwnProperty("player_name"))
                    if (!$util.isString(message.player_name))
                        return "player_name: string expected";
                if (message.query_port != null && message.hasOwnProperty("query_port"))
                    if (!$util.isInteger(message.query_port))
                        return "query_port: integer expected";
                if (message.steamid_source != null && message.hasOwnProperty("steamid_source"))
                    if (!$util.isInteger(message.steamid_source) && !(message.steamid_source && $util.isInteger(message.steamid_source.low) && $util.isInteger(message.steamid_source.high)))
                        return "steamid_source: integer|Long expected";
                if (message.avatar_hash != null && message.hasOwnProperty("avatar_hash"))
                    if (!(message.avatar_hash && typeof message.avatar_hash.length === "number" || $util.isString(message.avatar_hash)))
                        return "avatar_hash: buffer expected";
                if (message.last_logoff != null && message.hasOwnProperty("last_logoff"))
                    if (!$util.isInteger(message.last_logoff))
                        return "last_logoff: integer expected";
                if (message.last_logon != null && message.hasOwnProperty("last_logon"))
                    if (!$util.isInteger(message.last_logon))
                        return "last_logon: integer expected";
                if (message.last_seen_online != null && message.hasOwnProperty("last_seen_online"))
                    if (!$util.isInteger(message.last_seen_online))
                        return "last_seen_online: integer expected";
                if (message.clan_rank != null && message.hasOwnProperty("clan_rank"))
                    if (!$util.isInteger(message.clan_rank))
                        return "clan_rank: integer expected";
                if (message.game_name != null && message.hasOwnProperty("game_name"))
                    if (!$util.isString(message.game_name))
                        return "game_name: string expected";
                if (message.gameid != null && message.hasOwnProperty("gameid"))
                    if (!$util.isInteger(message.gameid) && !(message.gameid && $util.isInteger(message.gameid.low) && $util.isInteger(message.gameid.high)))
                        return "gameid: integer|Long expected";
                if (message.game_data_blob != null && message.hasOwnProperty("game_data_blob"))
                    if (!(message.game_data_blob && typeof message.game_data_blob.length === "number" || $util.isString(message.game_data_blob)))
                        return "game_data_blob: buffer expected";
                if (message.clan_data != null && message.hasOwnProperty("clan_data")) {
                    var error = $root.CMsgClientPersonaState.Friend.ClanData.verify(message.clan_data);
                    if (error)
                        return "clan_data." + error;
                }
                if (message.clan_tag != null && message.hasOwnProperty("clan_tag"))
                    if (!$util.isString(message.clan_tag))
                        return "clan_tag: string expected";
                if (message.rich_presence != null && message.hasOwnProperty("rich_presence")) {
                    if (!Array.isArray(message.rich_presence))
                        return "rich_presence: array expected";
                    for (var i = 0; i < message.rich_presence.length; ++i) {
                        var error = $root.CMsgClientPersonaState.Friend.KV.verify(message.rich_presence[i]);
                        if (error)
                            return "rich_presence." + error;
                    }
                }
                if (message.broadcast_id != null && message.hasOwnProperty("broadcast_id"))
                    if (!$util.isInteger(message.broadcast_id) && !(message.broadcast_id && $util.isInteger(message.broadcast_id.low) && $util.isInteger(message.broadcast_id.high)))
                        return "broadcast_id: integer|Long expected";
                if (message.game_lobby_id != null && message.hasOwnProperty("game_lobby_id"))
                    if (!$util.isInteger(message.game_lobby_id) && !(message.game_lobby_id && $util.isInteger(message.game_lobby_id.low) && $util.isInteger(message.game_lobby_id.high)))
                        return "game_lobby_id: integer|Long expected";
                if (message.watching_broadcast_accountid != null && message.hasOwnProperty("watching_broadcast_accountid"))
                    if (!$util.isInteger(message.watching_broadcast_accountid))
                        return "watching_broadcast_accountid: integer expected";
                if (message.watching_broadcast_appid != null && message.hasOwnProperty("watching_broadcast_appid"))
                    if (!$util.isInteger(message.watching_broadcast_appid))
                        return "watching_broadcast_appid: integer expected";
                if (message.watching_broadcast_viewers != null && message.hasOwnProperty("watching_broadcast_viewers"))
                    if (!$util.isInteger(message.watching_broadcast_viewers))
                        return "watching_broadcast_viewers: integer expected";
                if (message.watching_broadcast_title != null && message.hasOwnProperty("watching_broadcast_title"))
                    if (!$util.isString(message.watching_broadcast_title))
                        return "watching_broadcast_title: string expected";
                return null;
            };
    
            /**
             * Creates a Friend message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgClientPersonaState.Friend
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgClientPersonaState.Friend} Friend
             */
            Friend.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgClientPersonaState.Friend)
                    return object;
                var message = new $root.CMsgClientPersonaState.Friend();
                if (object.friendid != null)
                    if ($util.Long)
                        (message.friendid = $util.Long.fromValue(object.friendid)).unsigned = false;
                    else if (typeof object.friendid === "string")
                        message.friendid = parseInt(object.friendid, 10);
                    else if (typeof object.friendid === "number")
                        message.friendid = object.friendid;
                    else if (typeof object.friendid === "object")
                        message.friendid = new $util.LongBits(object.friendid.low >>> 0, object.friendid.high >>> 0).toNumber();
                if (object.persona_state != null)
                    message.persona_state = object.persona_state >>> 0;
                if (object.game_played_app_id != null)
                    message.game_played_app_id = object.game_played_app_id >>> 0;
                if (object.game_server_ip != null)
                    message.game_server_ip = object.game_server_ip >>> 0;
                if (object.game_server_port != null)
                    message.game_server_port = object.game_server_port >>> 0;
                if (object.persona_state_flags != null)
                    message.persona_state_flags = object.persona_state_flags >>> 0;
                if (object.online_session_instances != null)
                    message.online_session_instances = object.online_session_instances >>> 0;
                if (object.published_instance_id != null)
                    message.published_instance_id = object.published_instance_id >>> 0;
                if (object.persona_set_by_user != null)
                    message.persona_set_by_user = Boolean(object.persona_set_by_user);
                if (object.player_name != null)
                    message.player_name = String(object.player_name);
                if (object.query_port != null)
                    message.query_port = object.query_port >>> 0;
                if (object.steamid_source != null)
                    if ($util.Long)
                        (message.steamid_source = $util.Long.fromValue(object.steamid_source)).unsigned = false;
                    else if (typeof object.steamid_source === "string")
                        message.steamid_source = parseInt(object.steamid_source, 10);
                    else if (typeof object.steamid_source === "number")
                        message.steamid_source = object.steamid_source;
                    else if (typeof object.steamid_source === "object")
                        message.steamid_source = new $util.LongBits(object.steamid_source.low >>> 0, object.steamid_source.high >>> 0).toNumber();
                if (object.avatar_hash != null)
                    if (typeof object.avatar_hash === "string")
                        $util.base64.decode(object.avatar_hash, message.avatar_hash = $util.newBuffer($util.base64.length(object.avatar_hash)), 0);
                    else if (object.avatar_hash.length)
                        message.avatar_hash = object.avatar_hash;
                if (object.last_logoff != null)
                    message.last_logoff = object.last_logoff >>> 0;
                if (object.last_logon != null)
                    message.last_logon = object.last_logon >>> 0;
                if (object.last_seen_online != null)
                    message.last_seen_online = object.last_seen_online >>> 0;
                if (object.clan_rank != null)
                    message.clan_rank = object.clan_rank >>> 0;
                if (object.game_name != null)
                    message.game_name = String(object.game_name);
                if (object.gameid != null)
                    if ($util.Long)
                        (message.gameid = $util.Long.fromValue(object.gameid)).unsigned = false;
                    else if (typeof object.gameid === "string")
                        message.gameid = parseInt(object.gameid, 10);
                    else if (typeof object.gameid === "number")
                        message.gameid = object.gameid;
                    else if (typeof object.gameid === "object")
                        message.gameid = new $util.LongBits(object.gameid.low >>> 0, object.gameid.high >>> 0).toNumber();
                if (object.game_data_blob != null)
                    if (typeof object.game_data_blob === "string")
                        $util.base64.decode(object.game_data_blob, message.game_data_blob = $util.newBuffer($util.base64.length(object.game_data_blob)), 0);
                    else if (object.game_data_blob.length)
                        message.game_data_blob = object.game_data_blob;
                if (object.clan_data != null) {
                    if (typeof object.clan_data !== "object")
                        throw TypeError(".CMsgClientPersonaState.Friend.clan_data: object expected");
                    message.clan_data = $root.CMsgClientPersonaState.Friend.ClanData.fromObject(object.clan_data);
                }
                if (object.clan_tag != null)
                    message.clan_tag = String(object.clan_tag);
                if (object.rich_presence) {
                    if (!Array.isArray(object.rich_presence))
                        throw TypeError(".CMsgClientPersonaState.Friend.rich_presence: array expected");
                    message.rich_presence = [];
                    for (var i = 0; i < object.rich_presence.length; ++i) {
                        if (typeof object.rich_presence[i] !== "object")
                            throw TypeError(".CMsgClientPersonaState.Friend.rich_presence: object expected");
                        message.rich_presence[i] = $root.CMsgClientPersonaState.Friend.KV.fromObject(object.rich_presence[i]);
                    }
                }
                if (object.broadcast_id != null)
                    if ($util.Long)
                        (message.broadcast_id = $util.Long.fromValue(object.broadcast_id)).unsigned = false;
                    else if (typeof object.broadcast_id === "string")
                        message.broadcast_id = parseInt(object.broadcast_id, 10);
                    else if (typeof object.broadcast_id === "number")
                        message.broadcast_id = object.broadcast_id;
                    else if (typeof object.broadcast_id === "object")
                        message.broadcast_id = new $util.LongBits(object.broadcast_id.low >>> 0, object.broadcast_id.high >>> 0).toNumber();
                if (object.game_lobby_id != null)
                    if ($util.Long)
                        (message.game_lobby_id = $util.Long.fromValue(object.game_lobby_id)).unsigned = false;
                    else if (typeof object.game_lobby_id === "string")
                        message.game_lobby_id = parseInt(object.game_lobby_id, 10);
                    else if (typeof object.game_lobby_id === "number")
                        message.game_lobby_id = object.game_lobby_id;
                    else if (typeof object.game_lobby_id === "object")
                        message.game_lobby_id = new $util.LongBits(object.game_lobby_id.low >>> 0, object.game_lobby_id.high >>> 0).toNumber();
                if (object.watching_broadcast_accountid != null)
                    message.watching_broadcast_accountid = object.watching_broadcast_accountid >>> 0;
                if (object.watching_broadcast_appid != null)
                    message.watching_broadcast_appid = object.watching_broadcast_appid >>> 0;
                if (object.watching_broadcast_viewers != null)
                    message.watching_broadcast_viewers = object.watching_broadcast_viewers >>> 0;
                if (object.watching_broadcast_title != null)
                    message.watching_broadcast_title = String(object.watching_broadcast_title);
                return message;
            };
    
            /**
             * Creates a plain object from a Friend message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgClientPersonaState.Friend
             * @static
             * @param {CMsgClientPersonaState.Friend} message Friend
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Friend.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.rich_presence = [];
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.friendid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.friendid = options.longs === String ? "0" : 0;
                    object.persona_state = 0;
                    object.game_played_app_id = 0;
                    object.game_server_ip = 0;
                    object.game_server_port = 0;
                    object.persona_state_flags = 0;
                    object.online_session_instances = 0;
                    object.published_instance_id = 0;
                    object.persona_set_by_user = false;
                    object.player_name = "";
                    object.query_port = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.steamid_source = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.steamid_source = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.avatar_hash = "";
                    else {
                        object.avatar_hash = [];
                        if (options.bytes !== Array)
                            object.avatar_hash = $util.newBuffer(object.avatar_hash);
                    }
                    object.last_logoff = 0;
                    object.last_logon = 0;
                    object.last_seen_online = 0;
                    object.clan_rank = 0;
                    object.game_name = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.gameid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gameid = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.game_data_blob = "";
                    else {
                        object.game_data_blob = [];
                        if (options.bytes !== Array)
                            object.game_data_blob = $util.newBuffer(object.game_data_blob);
                    }
                    object.clan_data = null;
                    object.clan_tag = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.broadcast_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.broadcast_id = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.game_lobby_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.game_lobby_id = options.longs === String ? "0" : 0;
                    object.watching_broadcast_accountid = 0;
                    object.watching_broadcast_appid = 0;
                    object.watching_broadcast_viewers = 0;
                    object.watching_broadcast_title = "";
                }
                if (message.friendid != null && message.hasOwnProperty("friendid"))
                    if (typeof message.friendid === "number")
                        object.friendid = options.longs === String ? String(message.friendid) : message.friendid;
                    else
                        object.friendid = options.longs === String ? $util.Long.prototype.toString.call(message.friendid) : options.longs === Number ? new $util.LongBits(message.friendid.low >>> 0, message.friendid.high >>> 0).toNumber() : message.friendid;
                if (message.persona_state != null && message.hasOwnProperty("persona_state"))
                    object.persona_state = message.persona_state;
                if (message.game_played_app_id != null && message.hasOwnProperty("game_played_app_id"))
                    object.game_played_app_id = message.game_played_app_id;
                if (message.game_server_ip != null && message.hasOwnProperty("game_server_ip"))
                    object.game_server_ip = message.game_server_ip;
                if (message.game_server_port != null && message.hasOwnProperty("game_server_port"))
                    object.game_server_port = message.game_server_port;
                if (message.persona_state_flags != null && message.hasOwnProperty("persona_state_flags"))
                    object.persona_state_flags = message.persona_state_flags;
                if (message.online_session_instances != null && message.hasOwnProperty("online_session_instances"))
                    object.online_session_instances = message.online_session_instances;
                if (message.published_instance_id != null && message.hasOwnProperty("published_instance_id"))
                    object.published_instance_id = message.published_instance_id;
                if (message.persona_set_by_user != null && message.hasOwnProperty("persona_set_by_user"))
                    object.persona_set_by_user = message.persona_set_by_user;
                if (message.player_name != null && message.hasOwnProperty("player_name"))
                    object.player_name = message.player_name;
                if (message.query_port != null && message.hasOwnProperty("query_port"))
                    object.query_port = message.query_port;
                if (message.steamid_source != null && message.hasOwnProperty("steamid_source"))
                    if (typeof message.steamid_source === "number")
                        object.steamid_source = options.longs === String ? String(message.steamid_source) : message.steamid_source;
                    else
                        object.steamid_source = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_source) : options.longs === Number ? new $util.LongBits(message.steamid_source.low >>> 0, message.steamid_source.high >>> 0).toNumber() : message.steamid_source;
                if (message.avatar_hash != null && message.hasOwnProperty("avatar_hash"))
                    object.avatar_hash = options.bytes === String ? $util.base64.encode(message.avatar_hash, 0, message.avatar_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.avatar_hash) : message.avatar_hash;
                if (message.last_logoff != null && message.hasOwnProperty("last_logoff"))
                    object.last_logoff = message.last_logoff;
                if (message.last_logon != null && message.hasOwnProperty("last_logon"))
                    object.last_logon = message.last_logon;
                if (message.last_seen_online != null && message.hasOwnProperty("last_seen_online"))
                    object.last_seen_online = message.last_seen_online;
                if (message.clan_rank != null && message.hasOwnProperty("clan_rank"))
                    object.clan_rank = message.clan_rank;
                if (message.game_name != null && message.hasOwnProperty("game_name"))
                    object.game_name = message.game_name;
                if (message.gameid != null && message.hasOwnProperty("gameid"))
                    if (typeof message.gameid === "number")
                        object.gameid = options.longs === String ? String(message.gameid) : message.gameid;
                    else
                        object.gameid = options.longs === String ? $util.Long.prototype.toString.call(message.gameid) : options.longs === Number ? new $util.LongBits(message.gameid.low >>> 0, message.gameid.high >>> 0).toNumber() : message.gameid;
                if (message.game_data_blob != null && message.hasOwnProperty("game_data_blob"))
                    object.game_data_blob = options.bytes === String ? $util.base64.encode(message.game_data_blob, 0, message.game_data_blob.length) : options.bytes === Array ? Array.prototype.slice.call(message.game_data_blob) : message.game_data_blob;
                if (message.clan_data != null && message.hasOwnProperty("clan_data"))
                    object.clan_data = $root.CMsgClientPersonaState.Friend.ClanData.toObject(message.clan_data, options);
                if (message.clan_tag != null && message.hasOwnProperty("clan_tag"))
                    object.clan_tag = message.clan_tag;
                if (message.rich_presence && message.rich_presence.length) {
                    object.rich_presence = [];
                    for (var j = 0; j < message.rich_presence.length; ++j)
                        object.rich_presence[j] = $root.CMsgClientPersonaState.Friend.KV.toObject(message.rich_presence[j], options);
                }
                if (message.broadcast_id != null && message.hasOwnProperty("broadcast_id"))
                    if (typeof message.broadcast_id === "number")
                        object.broadcast_id = options.longs === String ? String(message.broadcast_id) : message.broadcast_id;
                    else
                        object.broadcast_id = options.longs === String ? $util.Long.prototype.toString.call(message.broadcast_id) : options.longs === Number ? new $util.LongBits(message.broadcast_id.low >>> 0, message.broadcast_id.high >>> 0).toNumber() : message.broadcast_id;
                if (message.game_lobby_id != null && message.hasOwnProperty("game_lobby_id"))
                    if (typeof message.game_lobby_id === "number")
                        object.game_lobby_id = options.longs === String ? String(message.game_lobby_id) : message.game_lobby_id;
                    else
                        object.game_lobby_id = options.longs === String ? $util.Long.prototype.toString.call(message.game_lobby_id) : options.longs === Number ? new $util.LongBits(message.game_lobby_id.low >>> 0, message.game_lobby_id.high >>> 0).toNumber() : message.game_lobby_id;
                if (message.watching_broadcast_accountid != null && message.hasOwnProperty("watching_broadcast_accountid"))
                    object.watching_broadcast_accountid = message.watching_broadcast_accountid;
                if (message.watching_broadcast_appid != null && message.hasOwnProperty("watching_broadcast_appid"))
                    object.watching_broadcast_appid = message.watching_broadcast_appid;
                if (message.watching_broadcast_viewers != null && message.hasOwnProperty("watching_broadcast_viewers"))
                    object.watching_broadcast_viewers = message.watching_broadcast_viewers;
                if (message.watching_broadcast_title != null && message.hasOwnProperty("watching_broadcast_title"))
                    object.watching_broadcast_title = message.watching_broadcast_title;
                return object;
            };
    
            /**
             * Converts this Friend to JSON.
             * @function toJSON
             * @memberof CMsgClientPersonaState.Friend
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Friend.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            Friend.ClanData = (function() {
    
                /**
                 * Properties of a ClanData.
                 * @memberof CMsgClientPersonaState.Friend
                 * @interface IClanData
                 * @property {number|null} [ogg_app_id] ClanData ogg_app_id
                 * @property {number|Long|null} [chat_group_id] ClanData chat_group_id
                 */
    
                /**
                 * Constructs a new ClanData.
                 * @memberof CMsgClientPersonaState.Friend
                 * @classdesc Represents a ClanData.
                 * @implements IClanData
                 * @constructor
                 * @param {CMsgClientPersonaState.Friend.IClanData=} [properties] Properties to set
                 */
                function ClanData(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ClanData ogg_app_id.
                 * @member {number} ogg_app_id
                 * @memberof CMsgClientPersonaState.Friend.ClanData
                 * @instance
                 */
                ClanData.prototype.ogg_app_id = 0;
    
                /**
                 * ClanData chat_group_id.
                 * @member {number|Long} chat_group_id
                 * @memberof CMsgClientPersonaState.Friend.ClanData
                 * @instance
                 */
                ClanData.prototype.chat_group_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Creates a new ClanData instance using the specified properties.
                 * @function create
                 * @memberof CMsgClientPersonaState.Friend.ClanData
                 * @static
                 * @param {CMsgClientPersonaState.Friend.IClanData=} [properties] Properties to set
                 * @returns {CMsgClientPersonaState.Friend.ClanData} ClanData instance
                 */
                ClanData.create = function create(properties) {
                    return new ClanData(properties);
                };
    
                /**
                 * Encodes the specified ClanData message. Does not implicitly {@link CMsgClientPersonaState.Friend.ClanData.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgClientPersonaState.Friend.ClanData
                 * @static
                 * @param {CMsgClientPersonaState.Friend.IClanData} message ClanData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClanData.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ogg_app_id != null && message.hasOwnProperty("ogg_app_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ogg_app_id);
                    if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.chat_group_id);
                    return writer;
                };
    
                /**
                 * Encodes the specified ClanData message, length delimited. Does not implicitly {@link CMsgClientPersonaState.Friend.ClanData.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgClientPersonaState.Friend.ClanData
                 * @static
                 * @param {CMsgClientPersonaState.Friend.IClanData} message ClanData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClanData.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ClanData message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgClientPersonaState.Friend.ClanData
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgClientPersonaState.Friend.ClanData} ClanData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClanData.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientPersonaState.Friend.ClanData();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ogg_app_id = reader.uint32();
                            break;
                        case 2:
                            message.chat_group_id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ClanData message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgClientPersonaState.Friend.ClanData
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgClientPersonaState.Friend.ClanData} ClanData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClanData.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ClanData message.
                 * @function verify
                 * @memberof CMsgClientPersonaState.Friend.ClanData
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ClanData.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ogg_app_id != null && message.hasOwnProperty("ogg_app_id"))
                        if (!$util.isInteger(message.ogg_app_id))
                            return "ogg_app_id: integer expected";
                    if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                        if (!$util.isInteger(message.chat_group_id) && !(message.chat_group_id && $util.isInteger(message.chat_group_id.low) && $util.isInteger(message.chat_group_id.high)))
                            return "chat_group_id: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a ClanData message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgClientPersonaState.Friend.ClanData
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgClientPersonaState.Friend.ClanData} ClanData
                 */
                ClanData.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgClientPersonaState.Friend.ClanData)
                        return object;
                    var message = new $root.CMsgClientPersonaState.Friend.ClanData();
                    if (object.ogg_app_id != null)
                        message.ogg_app_id = object.ogg_app_id >>> 0;
                    if (object.chat_group_id != null)
                        if ($util.Long)
                            (message.chat_group_id = $util.Long.fromValue(object.chat_group_id)).unsigned = true;
                        else if (typeof object.chat_group_id === "string")
                            message.chat_group_id = parseInt(object.chat_group_id, 10);
                        else if (typeof object.chat_group_id === "number")
                            message.chat_group_id = object.chat_group_id;
                        else if (typeof object.chat_group_id === "object")
                            message.chat_group_id = new $util.LongBits(object.chat_group_id.low >>> 0, object.chat_group_id.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ClanData message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgClientPersonaState.Friend.ClanData
                 * @static
                 * @param {CMsgClientPersonaState.Friend.ClanData} message ClanData
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ClanData.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.ogg_app_id = 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.chat_group_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.chat_group_id = options.longs === String ? "0" : 0;
                    }
                    if (message.ogg_app_id != null && message.hasOwnProperty("ogg_app_id"))
                        object.ogg_app_id = message.ogg_app_id;
                    if (message.chat_group_id != null && message.hasOwnProperty("chat_group_id"))
                        if (typeof message.chat_group_id === "number")
                            object.chat_group_id = options.longs === String ? String(message.chat_group_id) : message.chat_group_id;
                        else
                            object.chat_group_id = options.longs === String ? $util.Long.prototype.toString.call(message.chat_group_id) : options.longs === Number ? new $util.LongBits(message.chat_group_id.low >>> 0, message.chat_group_id.high >>> 0).toNumber(true) : message.chat_group_id;
                    return object;
                };
    
                /**
                 * Converts this ClanData to JSON.
                 * @function toJSON
                 * @memberof CMsgClientPersonaState.Friend.ClanData
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ClanData.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ClanData;
            })();
    
            Friend.KV = (function() {
    
                /**
                 * Properties of a KV.
                 * @memberof CMsgClientPersonaState.Friend
                 * @interface IKV
                 * @property {string|null} [key] KV key
                 * @property {string|null} [value] KV value
                 */
    
                /**
                 * Constructs a new KV.
                 * @memberof CMsgClientPersonaState.Friend
                 * @classdesc Represents a KV.
                 * @implements IKV
                 * @constructor
                 * @param {CMsgClientPersonaState.Friend.IKV=} [properties] Properties to set
                 */
                function KV(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * KV key.
                 * @member {string} key
                 * @memberof CMsgClientPersonaState.Friend.KV
                 * @instance
                 */
                KV.prototype.key = "";
    
                /**
                 * KV value.
                 * @member {string} value
                 * @memberof CMsgClientPersonaState.Friend.KV
                 * @instance
                 */
                KV.prototype.value = "";
    
                /**
                 * Creates a new KV instance using the specified properties.
                 * @function create
                 * @memberof CMsgClientPersonaState.Friend.KV
                 * @static
                 * @param {CMsgClientPersonaState.Friend.IKV=} [properties] Properties to set
                 * @returns {CMsgClientPersonaState.Friend.KV} KV instance
                 */
                KV.create = function create(properties) {
                    return new KV(properties);
                };
    
                /**
                 * Encodes the specified KV message. Does not implicitly {@link CMsgClientPersonaState.Friend.KV.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgClientPersonaState.Friend.KV
                 * @static
                 * @param {CMsgClientPersonaState.Friend.IKV} message KV message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                KV.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.key != null && message.hasOwnProperty("key"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                    if (message.value != null && message.hasOwnProperty("value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified KV message, length delimited. Does not implicitly {@link CMsgClientPersonaState.Friend.KV.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgClientPersonaState.Friend.KV
                 * @static
                 * @param {CMsgClientPersonaState.Friend.IKV} message KV message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                KV.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a KV message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgClientPersonaState.Friend.KV
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgClientPersonaState.Friend.KV} KV
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                KV.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientPersonaState.Friend.KV();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.key = reader.string();
                            break;
                        case 2:
                            message.value = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a KV message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgClientPersonaState.Friend.KV
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgClientPersonaState.Friend.KV} KV
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                KV.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a KV message.
                 * @function verify
                 * @memberof CMsgClientPersonaState.Friend.KV
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                KV.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.key != null && message.hasOwnProperty("key"))
                        if (!$util.isString(message.key))
                            return "key: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isString(message.value))
                            return "value: string expected";
                    return null;
                };
    
                /**
                 * Creates a KV message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgClientPersonaState.Friend.KV
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgClientPersonaState.Friend.KV} KV
                 */
                KV.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgClientPersonaState.Friend.KV)
                        return object;
                    var message = new $root.CMsgClientPersonaState.Friend.KV();
                    if (object.key != null)
                        message.key = String(object.key);
                    if (object.value != null)
                        message.value = String(object.value);
                    return message;
                };
    
                /**
                 * Creates a plain object from a KV message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgClientPersonaState.Friend.KV
                 * @static
                 * @param {CMsgClientPersonaState.Friend.KV} message KV
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                KV.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.key = "";
                        object.value = "";
                    }
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = message.key;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };
    
                /**
                 * Converts this KV to JSON.
                 * @function toJSON
                 * @memberof CMsgClientPersonaState.Friend.KV
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                KV.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return KV;
            })();
    
            return Friend;
        })();
    
        return CMsgClientPersonaState;
    })();
    
    $root.CMsgClientFriendProfileInfo = (function() {
    
        /**
         * Properties of a CMsgClientFriendProfileInfo.
         * @exports ICMsgClientFriendProfileInfo
         * @interface ICMsgClientFriendProfileInfo
         * @property {number|Long|null} [steamid_friend] CMsgClientFriendProfileInfo steamid_friend
         */
    
        /**
         * Constructs a new CMsgClientFriendProfileInfo.
         * @exports CMsgClientFriendProfileInfo
         * @classdesc Represents a CMsgClientFriendProfileInfo.
         * @implements ICMsgClientFriendProfileInfo
         * @constructor
         * @param {ICMsgClientFriendProfileInfo=} [properties] Properties to set
         */
        function CMsgClientFriendProfileInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientFriendProfileInfo steamid_friend.
         * @member {number|Long} steamid_friend
         * @memberof CMsgClientFriendProfileInfo
         * @instance
         */
        CMsgClientFriendProfileInfo.prototype.steamid_friend = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgClientFriendProfileInfo instance using the specified properties.
         * @function create
         * @memberof CMsgClientFriendProfileInfo
         * @static
         * @param {ICMsgClientFriendProfileInfo=} [properties] Properties to set
         * @returns {CMsgClientFriendProfileInfo} CMsgClientFriendProfileInfo instance
         */
        CMsgClientFriendProfileInfo.create = function create(properties) {
            return new CMsgClientFriendProfileInfo(properties);
        };
    
        /**
         * Encodes the specified CMsgClientFriendProfileInfo message. Does not implicitly {@link CMsgClientFriendProfileInfo.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientFriendProfileInfo
         * @static
         * @param {ICMsgClientFriendProfileInfo} message CMsgClientFriendProfileInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientFriendProfileInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid_friend != null && message.hasOwnProperty("steamid_friend"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid_friend);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientFriendProfileInfo message, length delimited. Does not implicitly {@link CMsgClientFriendProfileInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientFriendProfileInfo
         * @static
         * @param {ICMsgClientFriendProfileInfo} message CMsgClientFriendProfileInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientFriendProfileInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientFriendProfileInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientFriendProfileInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientFriendProfileInfo} CMsgClientFriendProfileInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientFriendProfileInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientFriendProfileInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid_friend = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientFriendProfileInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientFriendProfileInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientFriendProfileInfo} CMsgClientFriendProfileInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientFriendProfileInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientFriendProfileInfo message.
         * @function verify
         * @memberof CMsgClientFriendProfileInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientFriendProfileInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid_friend != null && message.hasOwnProperty("steamid_friend"))
                if (!$util.isInteger(message.steamid_friend) && !(message.steamid_friend && $util.isInteger(message.steamid_friend.low) && $util.isInteger(message.steamid_friend.high)))
                    return "steamid_friend: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientFriendProfileInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientFriendProfileInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientFriendProfileInfo} CMsgClientFriendProfileInfo
         */
        CMsgClientFriendProfileInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientFriendProfileInfo)
                return object;
            var message = new $root.CMsgClientFriendProfileInfo();
            if (object.steamid_friend != null)
                if ($util.Long)
                    (message.steamid_friend = $util.Long.fromValue(object.steamid_friend)).unsigned = false;
                else if (typeof object.steamid_friend === "string")
                    message.steamid_friend = parseInt(object.steamid_friend, 10);
                else if (typeof object.steamid_friend === "number")
                    message.steamid_friend = object.steamid_friend;
                else if (typeof object.steamid_friend === "object")
                    message.steamid_friend = new $util.LongBits(object.steamid_friend.low >>> 0, object.steamid_friend.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientFriendProfileInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientFriendProfileInfo
         * @static
         * @param {CMsgClientFriendProfileInfo} message CMsgClientFriendProfileInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientFriendProfileInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid_friend = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid_friend = options.longs === String ? "0" : 0;
            if (message.steamid_friend != null && message.hasOwnProperty("steamid_friend"))
                if (typeof message.steamid_friend === "number")
                    object.steamid_friend = options.longs === String ? String(message.steamid_friend) : message.steamid_friend;
                else
                    object.steamid_friend = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_friend) : options.longs === Number ? new $util.LongBits(message.steamid_friend.low >>> 0, message.steamid_friend.high >>> 0).toNumber() : message.steamid_friend;
            return object;
        };
    
        /**
         * Converts this CMsgClientFriendProfileInfo to JSON.
         * @function toJSON
         * @memberof CMsgClientFriendProfileInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientFriendProfileInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientFriendProfileInfo;
    })();
    
    $root.CMsgClientFriendProfileInfoResponse = (function() {
    
        /**
         * Properties of a CMsgClientFriendProfileInfoResponse.
         * @exports ICMsgClientFriendProfileInfoResponse
         * @interface ICMsgClientFriendProfileInfoResponse
         * @property {number|null} [eresult] CMsgClientFriendProfileInfoResponse eresult
         * @property {number|Long|null} [steamid_friend] CMsgClientFriendProfileInfoResponse steamid_friend
         * @property {number|null} [time_created] CMsgClientFriendProfileInfoResponse time_created
         * @property {string|null} [real_name] CMsgClientFriendProfileInfoResponse real_name
         * @property {string|null} [city_name] CMsgClientFriendProfileInfoResponse city_name
         * @property {string|null} [state_name] CMsgClientFriendProfileInfoResponse state_name
         * @property {string|null} [country_name] CMsgClientFriendProfileInfoResponse country_name
         * @property {string|null} [headline] CMsgClientFriendProfileInfoResponse headline
         * @property {string|null} [summary] CMsgClientFriendProfileInfoResponse summary
         */
    
        /**
         * Constructs a new CMsgClientFriendProfileInfoResponse.
         * @exports CMsgClientFriendProfileInfoResponse
         * @classdesc Represents a CMsgClientFriendProfileInfoResponse.
         * @implements ICMsgClientFriendProfileInfoResponse
         * @constructor
         * @param {ICMsgClientFriendProfileInfoResponse=} [properties] Properties to set
         */
        function CMsgClientFriendProfileInfoResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientFriendProfileInfoResponse eresult.
         * @member {number} eresult
         * @memberof CMsgClientFriendProfileInfoResponse
         * @instance
         */
        CMsgClientFriendProfileInfoResponse.prototype.eresult = 2;
    
        /**
         * CMsgClientFriendProfileInfoResponse steamid_friend.
         * @member {number|Long} steamid_friend
         * @memberof CMsgClientFriendProfileInfoResponse
         * @instance
         */
        CMsgClientFriendProfileInfoResponse.prototype.steamid_friend = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgClientFriendProfileInfoResponse time_created.
         * @member {number} time_created
         * @memberof CMsgClientFriendProfileInfoResponse
         * @instance
         */
        CMsgClientFriendProfileInfoResponse.prototype.time_created = 0;
    
        /**
         * CMsgClientFriendProfileInfoResponse real_name.
         * @member {string} real_name
         * @memberof CMsgClientFriendProfileInfoResponse
         * @instance
         */
        CMsgClientFriendProfileInfoResponse.prototype.real_name = "";
    
        /**
         * CMsgClientFriendProfileInfoResponse city_name.
         * @member {string} city_name
         * @memberof CMsgClientFriendProfileInfoResponse
         * @instance
         */
        CMsgClientFriendProfileInfoResponse.prototype.city_name = "";
    
        /**
         * CMsgClientFriendProfileInfoResponse state_name.
         * @member {string} state_name
         * @memberof CMsgClientFriendProfileInfoResponse
         * @instance
         */
        CMsgClientFriendProfileInfoResponse.prototype.state_name = "";
    
        /**
         * CMsgClientFriendProfileInfoResponse country_name.
         * @member {string} country_name
         * @memberof CMsgClientFriendProfileInfoResponse
         * @instance
         */
        CMsgClientFriendProfileInfoResponse.prototype.country_name = "";
    
        /**
         * CMsgClientFriendProfileInfoResponse headline.
         * @member {string} headline
         * @memberof CMsgClientFriendProfileInfoResponse
         * @instance
         */
        CMsgClientFriendProfileInfoResponse.prototype.headline = "";
    
        /**
         * CMsgClientFriendProfileInfoResponse summary.
         * @member {string} summary
         * @memberof CMsgClientFriendProfileInfoResponse
         * @instance
         */
        CMsgClientFriendProfileInfoResponse.prototype.summary = "";
    
        /**
         * Creates a new CMsgClientFriendProfileInfoResponse instance using the specified properties.
         * @function create
         * @memberof CMsgClientFriendProfileInfoResponse
         * @static
         * @param {ICMsgClientFriendProfileInfoResponse=} [properties] Properties to set
         * @returns {CMsgClientFriendProfileInfoResponse} CMsgClientFriendProfileInfoResponse instance
         */
        CMsgClientFriendProfileInfoResponse.create = function create(properties) {
            return new CMsgClientFriendProfileInfoResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgClientFriendProfileInfoResponse message. Does not implicitly {@link CMsgClientFriendProfileInfoResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientFriendProfileInfoResponse
         * @static
         * @param {ICMsgClientFriendProfileInfoResponse} message CMsgClientFriendProfileInfoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientFriendProfileInfoResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eresult);
            if (message.steamid_friend != null && message.hasOwnProperty("steamid_friend"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.steamid_friend);
            if (message.time_created != null && message.hasOwnProperty("time_created"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.time_created);
            if (message.real_name != null && message.hasOwnProperty("real_name"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.real_name);
            if (message.city_name != null && message.hasOwnProperty("city_name"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.city_name);
            if (message.state_name != null && message.hasOwnProperty("state_name"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.state_name);
            if (message.country_name != null && message.hasOwnProperty("country_name"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.country_name);
            if (message.headline != null && message.hasOwnProperty("headline"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.headline);
            if (message.summary != null && message.hasOwnProperty("summary"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.summary);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientFriendProfileInfoResponse message, length delimited. Does not implicitly {@link CMsgClientFriendProfileInfoResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientFriendProfileInfoResponse
         * @static
         * @param {ICMsgClientFriendProfileInfoResponse} message CMsgClientFriendProfileInfoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientFriendProfileInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientFriendProfileInfoResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientFriendProfileInfoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientFriendProfileInfoResponse} CMsgClientFriendProfileInfoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientFriendProfileInfoResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientFriendProfileInfoResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.int32();
                    break;
                case 2:
                    message.steamid_friend = reader.fixed64();
                    break;
                case 3:
                    message.time_created = reader.uint32();
                    break;
                case 4:
                    message.real_name = reader.string();
                    break;
                case 5:
                    message.city_name = reader.string();
                    break;
                case 6:
                    message.state_name = reader.string();
                    break;
                case 7:
                    message.country_name = reader.string();
                    break;
                case 8:
                    message.headline = reader.string();
                    break;
                case 9:
                    message.summary = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientFriendProfileInfoResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientFriendProfileInfoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientFriendProfileInfoResponse} CMsgClientFriendProfileInfoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientFriendProfileInfoResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientFriendProfileInfoResponse message.
         * @function verify
         * @memberof CMsgClientFriendProfileInfoResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientFriendProfileInfoResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            if (message.steamid_friend != null && message.hasOwnProperty("steamid_friend"))
                if (!$util.isInteger(message.steamid_friend) && !(message.steamid_friend && $util.isInteger(message.steamid_friend.low) && $util.isInteger(message.steamid_friend.high)))
                    return "steamid_friend: integer|Long expected";
            if (message.time_created != null && message.hasOwnProperty("time_created"))
                if (!$util.isInteger(message.time_created))
                    return "time_created: integer expected";
            if (message.real_name != null && message.hasOwnProperty("real_name"))
                if (!$util.isString(message.real_name))
                    return "real_name: string expected";
            if (message.city_name != null && message.hasOwnProperty("city_name"))
                if (!$util.isString(message.city_name))
                    return "city_name: string expected";
            if (message.state_name != null && message.hasOwnProperty("state_name"))
                if (!$util.isString(message.state_name))
                    return "state_name: string expected";
            if (message.country_name != null && message.hasOwnProperty("country_name"))
                if (!$util.isString(message.country_name))
                    return "country_name: string expected";
            if (message.headline != null && message.hasOwnProperty("headline"))
                if (!$util.isString(message.headline))
                    return "headline: string expected";
            if (message.summary != null && message.hasOwnProperty("summary"))
                if (!$util.isString(message.summary))
                    return "summary: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientFriendProfileInfoResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientFriendProfileInfoResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientFriendProfileInfoResponse} CMsgClientFriendProfileInfoResponse
         */
        CMsgClientFriendProfileInfoResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientFriendProfileInfoResponse)
                return object;
            var message = new $root.CMsgClientFriendProfileInfoResponse();
            if (object.eresult != null)
                message.eresult = object.eresult | 0;
            if (object.steamid_friend != null)
                if ($util.Long)
                    (message.steamid_friend = $util.Long.fromValue(object.steamid_friend)).unsigned = false;
                else if (typeof object.steamid_friend === "string")
                    message.steamid_friend = parseInt(object.steamid_friend, 10);
                else if (typeof object.steamid_friend === "number")
                    message.steamid_friend = object.steamid_friend;
                else if (typeof object.steamid_friend === "object")
                    message.steamid_friend = new $util.LongBits(object.steamid_friend.low >>> 0, object.steamid_friend.high >>> 0).toNumber();
            if (object.time_created != null)
                message.time_created = object.time_created >>> 0;
            if (object.real_name != null)
                message.real_name = String(object.real_name);
            if (object.city_name != null)
                message.city_name = String(object.city_name);
            if (object.state_name != null)
                message.state_name = String(object.state_name);
            if (object.country_name != null)
                message.country_name = String(object.country_name);
            if (object.headline != null)
                message.headline = String(object.headline);
            if (object.summary != null)
                message.summary = String(object.summary);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientFriendProfileInfoResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientFriendProfileInfoResponse
         * @static
         * @param {CMsgClientFriendProfileInfoResponse} message CMsgClientFriendProfileInfoResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientFriendProfileInfoResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eresult = 2;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid_friend = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid_friend = options.longs === String ? "0" : 0;
                object.time_created = 0;
                object.real_name = "";
                object.city_name = "";
                object.state_name = "";
                object.country_name = "";
                object.headline = "";
                object.summary = "";
            }
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            if (message.steamid_friend != null && message.hasOwnProperty("steamid_friend"))
                if (typeof message.steamid_friend === "number")
                    object.steamid_friend = options.longs === String ? String(message.steamid_friend) : message.steamid_friend;
                else
                    object.steamid_friend = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_friend) : options.longs === Number ? new $util.LongBits(message.steamid_friend.low >>> 0, message.steamid_friend.high >>> 0).toNumber() : message.steamid_friend;
            if (message.time_created != null && message.hasOwnProperty("time_created"))
                object.time_created = message.time_created;
            if (message.real_name != null && message.hasOwnProperty("real_name"))
                object.real_name = message.real_name;
            if (message.city_name != null && message.hasOwnProperty("city_name"))
                object.city_name = message.city_name;
            if (message.state_name != null && message.hasOwnProperty("state_name"))
                object.state_name = message.state_name;
            if (message.country_name != null && message.hasOwnProperty("country_name"))
                object.country_name = message.country_name;
            if (message.headline != null && message.hasOwnProperty("headline"))
                object.headline = message.headline;
            if (message.summary != null && message.hasOwnProperty("summary"))
                object.summary = message.summary;
            return object;
        };
    
        /**
         * Converts this CMsgClientFriendProfileInfoResponse to JSON.
         * @function toJSON
         * @memberof CMsgClientFriendProfileInfoResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientFriendProfileInfoResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientFriendProfileInfoResponse;
    })();
    
    $root.CMsgClientCreateFriendsGroup = (function() {
    
        /**
         * Properties of a CMsgClientCreateFriendsGroup.
         * @exports ICMsgClientCreateFriendsGroup
         * @interface ICMsgClientCreateFriendsGroup
         * @property {number|Long|null} [steamid] CMsgClientCreateFriendsGroup steamid
         * @property {string|null} [groupname] CMsgClientCreateFriendsGroup groupname
         * @property {Array.<number|Long>|null} [steamid_friends] CMsgClientCreateFriendsGroup steamid_friends
         */
    
        /**
         * Constructs a new CMsgClientCreateFriendsGroup.
         * @exports CMsgClientCreateFriendsGroup
         * @classdesc Represents a CMsgClientCreateFriendsGroup.
         * @implements ICMsgClientCreateFriendsGroup
         * @constructor
         * @param {ICMsgClientCreateFriendsGroup=} [properties] Properties to set
         */
        function CMsgClientCreateFriendsGroup(properties) {
            this.steamid_friends = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientCreateFriendsGroup steamid.
         * @member {number|Long} steamid
         * @memberof CMsgClientCreateFriendsGroup
         * @instance
         */
        CMsgClientCreateFriendsGroup.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgClientCreateFriendsGroup groupname.
         * @member {string} groupname
         * @memberof CMsgClientCreateFriendsGroup
         * @instance
         */
        CMsgClientCreateFriendsGroup.prototype.groupname = "";
    
        /**
         * CMsgClientCreateFriendsGroup steamid_friends.
         * @member {Array.<number|Long>} steamid_friends
         * @memberof CMsgClientCreateFriendsGroup
         * @instance
         */
        CMsgClientCreateFriendsGroup.prototype.steamid_friends = $util.emptyArray;
    
        /**
         * Creates a new CMsgClientCreateFriendsGroup instance using the specified properties.
         * @function create
         * @memberof CMsgClientCreateFriendsGroup
         * @static
         * @param {ICMsgClientCreateFriendsGroup=} [properties] Properties to set
         * @returns {CMsgClientCreateFriendsGroup} CMsgClientCreateFriendsGroup instance
         */
        CMsgClientCreateFriendsGroup.create = function create(properties) {
            return new CMsgClientCreateFriendsGroup(properties);
        };
    
        /**
         * Encodes the specified CMsgClientCreateFriendsGroup message. Does not implicitly {@link CMsgClientCreateFriendsGroup.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientCreateFriendsGroup
         * @static
         * @param {ICMsgClientCreateFriendsGroup} message CMsgClientCreateFriendsGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientCreateFriendsGroup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.groupname != null && message.hasOwnProperty("groupname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.groupname);
            if (message.steamid_friends != null && message.steamid_friends.length)
                for (var i = 0; i < message.steamid_friends.length; ++i)
                    writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.steamid_friends[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientCreateFriendsGroup message, length delimited. Does not implicitly {@link CMsgClientCreateFriendsGroup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientCreateFriendsGroup
         * @static
         * @param {ICMsgClientCreateFriendsGroup} message CMsgClientCreateFriendsGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientCreateFriendsGroup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientCreateFriendsGroup message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientCreateFriendsGroup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientCreateFriendsGroup} CMsgClientCreateFriendsGroup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientCreateFriendsGroup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientCreateFriendsGroup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.groupname = reader.string();
                    break;
                case 3:
                    if (!(message.steamid_friends && message.steamid_friends.length))
                        message.steamid_friends = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.steamid_friends.push(reader.fixed64());
                    } else
                        message.steamid_friends.push(reader.fixed64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientCreateFriendsGroup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientCreateFriendsGroup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientCreateFriendsGroup} CMsgClientCreateFriendsGroup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientCreateFriendsGroup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientCreateFriendsGroup message.
         * @function verify
         * @memberof CMsgClientCreateFriendsGroup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientCreateFriendsGroup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.groupname != null && message.hasOwnProperty("groupname"))
                if (!$util.isString(message.groupname))
                    return "groupname: string expected";
            if (message.steamid_friends != null && message.hasOwnProperty("steamid_friends")) {
                if (!Array.isArray(message.steamid_friends))
                    return "steamid_friends: array expected";
                for (var i = 0; i < message.steamid_friends.length; ++i)
                    if (!$util.isInteger(message.steamid_friends[i]) && !(message.steamid_friends[i] && $util.isInteger(message.steamid_friends[i].low) && $util.isInteger(message.steamid_friends[i].high)))
                        return "steamid_friends: integer|Long[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgClientCreateFriendsGroup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientCreateFriendsGroup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientCreateFriendsGroup} CMsgClientCreateFriendsGroup
         */
        CMsgClientCreateFriendsGroup.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientCreateFriendsGroup)
                return object;
            var message = new $root.CMsgClientCreateFriendsGroup();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.groupname != null)
                message.groupname = String(object.groupname);
            if (object.steamid_friends) {
                if (!Array.isArray(object.steamid_friends))
                    throw TypeError(".CMsgClientCreateFriendsGroup.steamid_friends: array expected");
                message.steamid_friends = [];
                for (var i = 0; i < object.steamid_friends.length; ++i)
                    if ($util.Long)
                        (message.steamid_friends[i] = $util.Long.fromValue(object.steamid_friends[i])).unsigned = false;
                    else if (typeof object.steamid_friends[i] === "string")
                        message.steamid_friends[i] = parseInt(object.steamid_friends[i], 10);
                    else if (typeof object.steamid_friends[i] === "number")
                        message.steamid_friends[i] = object.steamid_friends[i];
                    else if (typeof object.steamid_friends[i] === "object")
                        message.steamid_friends[i] = new $util.LongBits(object.steamid_friends[i].low >>> 0, object.steamid_friends[i].high >>> 0).toNumber();
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientCreateFriendsGroup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientCreateFriendsGroup
         * @static
         * @param {CMsgClientCreateFriendsGroup} message CMsgClientCreateFriendsGroup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientCreateFriendsGroup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.steamid_friends = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.groupname = "";
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.groupname != null && message.hasOwnProperty("groupname"))
                object.groupname = message.groupname;
            if (message.steamid_friends && message.steamid_friends.length) {
                object.steamid_friends = [];
                for (var j = 0; j < message.steamid_friends.length; ++j)
                    if (typeof message.steamid_friends[j] === "number")
                        object.steamid_friends[j] = options.longs === String ? String(message.steamid_friends[j]) : message.steamid_friends[j];
                    else
                        object.steamid_friends[j] = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_friends[j]) : options.longs === Number ? new $util.LongBits(message.steamid_friends[j].low >>> 0, message.steamid_friends[j].high >>> 0).toNumber() : message.steamid_friends[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgClientCreateFriendsGroup to JSON.
         * @function toJSON
         * @memberof CMsgClientCreateFriendsGroup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientCreateFriendsGroup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientCreateFriendsGroup;
    })();
    
    $root.CMsgClientCreateFriendsGroupResponse = (function() {
    
        /**
         * Properties of a CMsgClientCreateFriendsGroupResponse.
         * @exports ICMsgClientCreateFriendsGroupResponse
         * @interface ICMsgClientCreateFriendsGroupResponse
         * @property {number|null} [eresult] CMsgClientCreateFriendsGroupResponse eresult
         * @property {number|null} [groupid] CMsgClientCreateFriendsGroupResponse groupid
         */
    
        /**
         * Constructs a new CMsgClientCreateFriendsGroupResponse.
         * @exports CMsgClientCreateFriendsGroupResponse
         * @classdesc Represents a CMsgClientCreateFriendsGroupResponse.
         * @implements ICMsgClientCreateFriendsGroupResponse
         * @constructor
         * @param {ICMsgClientCreateFriendsGroupResponse=} [properties] Properties to set
         */
        function CMsgClientCreateFriendsGroupResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientCreateFriendsGroupResponse eresult.
         * @member {number} eresult
         * @memberof CMsgClientCreateFriendsGroupResponse
         * @instance
         */
        CMsgClientCreateFriendsGroupResponse.prototype.eresult = 0;
    
        /**
         * CMsgClientCreateFriendsGroupResponse groupid.
         * @member {number} groupid
         * @memberof CMsgClientCreateFriendsGroupResponse
         * @instance
         */
        CMsgClientCreateFriendsGroupResponse.prototype.groupid = 0;
    
        /**
         * Creates a new CMsgClientCreateFriendsGroupResponse instance using the specified properties.
         * @function create
         * @memberof CMsgClientCreateFriendsGroupResponse
         * @static
         * @param {ICMsgClientCreateFriendsGroupResponse=} [properties] Properties to set
         * @returns {CMsgClientCreateFriendsGroupResponse} CMsgClientCreateFriendsGroupResponse instance
         */
        CMsgClientCreateFriendsGroupResponse.create = function create(properties) {
            return new CMsgClientCreateFriendsGroupResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgClientCreateFriendsGroupResponse message. Does not implicitly {@link CMsgClientCreateFriendsGroupResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientCreateFriendsGroupResponse
         * @static
         * @param {ICMsgClientCreateFriendsGroupResponse} message CMsgClientCreateFriendsGroupResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientCreateFriendsGroupResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eresult);
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.groupid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientCreateFriendsGroupResponse message, length delimited. Does not implicitly {@link CMsgClientCreateFriendsGroupResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientCreateFriendsGroupResponse
         * @static
         * @param {ICMsgClientCreateFriendsGroupResponse} message CMsgClientCreateFriendsGroupResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientCreateFriendsGroupResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientCreateFriendsGroupResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientCreateFriendsGroupResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientCreateFriendsGroupResponse} CMsgClientCreateFriendsGroupResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientCreateFriendsGroupResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientCreateFriendsGroupResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.uint32();
                    break;
                case 2:
                    message.groupid = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientCreateFriendsGroupResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientCreateFriendsGroupResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientCreateFriendsGroupResponse} CMsgClientCreateFriendsGroupResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientCreateFriendsGroupResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientCreateFriendsGroupResponse message.
         * @function verify
         * @memberof CMsgClientCreateFriendsGroupResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientCreateFriendsGroupResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                if (!$util.isInteger(message.groupid))
                    return "groupid: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientCreateFriendsGroupResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientCreateFriendsGroupResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientCreateFriendsGroupResponse} CMsgClientCreateFriendsGroupResponse
         */
        CMsgClientCreateFriendsGroupResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientCreateFriendsGroupResponse)
                return object;
            var message = new $root.CMsgClientCreateFriendsGroupResponse();
            if (object.eresult != null)
                message.eresult = object.eresult >>> 0;
            if (object.groupid != null)
                message.groupid = object.groupid | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientCreateFriendsGroupResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientCreateFriendsGroupResponse
         * @static
         * @param {CMsgClientCreateFriendsGroupResponse} message CMsgClientCreateFriendsGroupResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientCreateFriendsGroupResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eresult = 0;
                object.groupid = 0;
            }
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                object.groupid = message.groupid;
            return object;
        };
    
        /**
         * Converts this CMsgClientCreateFriendsGroupResponse to JSON.
         * @function toJSON
         * @memberof CMsgClientCreateFriendsGroupResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientCreateFriendsGroupResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientCreateFriendsGroupResponse;
    })();
    
    $root.CMsgClientDeleteFriendsGroup = (function() {
    
        /**
         * Properties of a CMsgClientDeleteFriendsGroup.
         * @exports ICMsgClientDeleteFriendsGroup
         * @interface ICMsgClientDeleteFriendsGroup
         * @property {number|Long|null} [steamid] CMsgClientDeleteFriendsGroup steamid
         * @property {number|null} [groupid] CMsgClientDeleteFriendsGroup groupid
         */
    
        /**
         * Constructs a new CMsgClientDeleteFriendsGroup.
         * @exports CMsgClientDeleteFriendsGroup
         * @classdesc Represents a CMsgClientDeleteFriendsGroup.
         * @implements ICMsgClientDeleteFriendsGroup
         * @constructor
         * @param {ICMsgClientDeleteFriendsGroup=} [properties] Properties to set
         */
        function CMsgClientDeleteFriendsGroup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientDeleteFriendsGroup steamid.
         * @member {number|Long} steamid
         * @memberof CMsgClientDeleteFriendsGroup
         * @instance
         */
        CMsgClientDeleteFriendsGroup.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgClientDeleteFriendsGroup groupid.
         * @member {number} groupid
         * @memberof CMsgClientDeleteFriendsGroup
         * @instance
         */
        CMsgClientDeleteFriendsGroup.prototype.groupid = 0;
    
        /**
         * Creates a new CMsgClientDeleteFriendsGroup instance using the specified properties.
         * @function create
         * @memberof CMsgClientDeleteFriendsGroup
         * @static
         * @param {ICMsgClientDeleteFriendsGroup=} [properties] Properties to set
         * @returns {CMsgClientDeleteFriendsGroup} CMsgClientDeleteFriendsGroup instance
         */
        CMsgClientDeleteFriendsGroup.create = function create(properties) {
            return new CMsgClientDeleteFriendsGroup(properties);
        };
    
        /**
         * Encodes the specified CMsgClientDeleteFriendsGroup message. Does not implicitly {@link CMsgClientDeleteFriendsGroup.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientDeleteFriendsGroup
         * @static
         * @param {ICMsgClientDeleteFriendsGroup} message CMsgClientDeleteFriendsGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientDeleteFriendsGroup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.groupid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientDeleteFriendsGroup message, length delimited. Does not implicitly {@link CMsgClientDeleteFriendsGroup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientDeleteFriendsGroup
         * @static
         * @param {ICMsgClientDeleteFriendsGroup} message CMsgClientDeleteFriendsGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientDeleteFriendsGroup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientDeleteFriendsGroup message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientDeleteFriendsGroup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientDeleteFriendsGroup} CMsgClientDeleteFriendsGroup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientDeleteFriendsGroup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientDeleteFriendsGroup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.groupid = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientDeleteFriendsGroup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientDeleteFriendsGroup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientDeleteFriendsGroup} CMsgClientDeleteFriendsGroup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientDeleteFriendsGroup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientDeleteFriendsGroup message.
         * @function verify
         * @memberof CMsgClientDeleteFriendsGroup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientDeleteFriendsGroup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                if (!$util.isInteger(message.groupid))
                    return "groupid: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientDeleteFriendsGroup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientDeleteFriendsGroup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientDeleteFriendsGroup} CMsgClientDeleteFriendsGroup
         */
        CMsgClientDeleteFriendsGroup.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientDeleteFriendsGroup)
                return object;
            var message = new $root.CMsgClientDeleteFriendsGroup();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.groupid != null)
                message.groupid = object.groupid | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientDeleteFriendsGroup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientDeleteFriendsGroup
         * @static
         * @param {CMsgClientDeleteFriendsGroup} message CMsgClientDeleteFriendsGroup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientDeleteFriendsGroup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.groupid = 0;
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                object.groupid = message.groupid;
            return object;
        };
    
        /**
         * Converts this CMsgClientDeleteFriendsGroup to JSON.
         * @function toJSON
         * @memberof CMsgClientDeleteFriendsGroup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientDeleteFriendsGroup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientDeleteFriendsGroup;
    })();
    
    $root.CMsgClientDeleteFriendsGroupResponse = (function() {
    
        /**
         * Properties of a CMsgClientDeleteFriendsGroupResponse.
         * @exports ICMsgClientDeleteFriendsGroupResponse
         * @interface ICMsgClientDeleteFriendsGroupResponse
         * @property {number|null} [eresult] CMsgClientDeleteFriendsGroupResponse eresult
         */
    
        /**
         * Constructs a new CMsgClientDeleteFriendsGroupResponse.
         * @exports CMsgClientDeleteFriendsGroupResponse
         * @classdesc Represents a CMsgClientDeleteFriendsGroupResponse.
         * @implements ICMsgClientDeleteFriendsGroupResponse
         * @constructor
         * @param {ICMsgClientDeleteFriendsGroupResponse=} [properties] Properties to set
         */
        function CMsgClientDeleteFriendsGroupResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientDeleteFriendsGroupResponse eresult.
         * @member {number} eresult
         * @memberof CMsgClientDeleteFriendsGroupResponse
         * @instance
         */
        CMsgClientDeleteFriendsGroupResponse.prototype.eresult = 0;
    
        /**
         * Creates a new CMsgClientDeleteFriendsGroupResponse instance using the specified properties.
         * @function create
         * @memberof CMsgClientDeleteFriendsGroupResponse
         * @static
         * @param {ICMsgClientDeleteFriendsGroupResponse=} [properties] Properties to set
         * @returns {CMsgClientDeleteFriendsGroupResponse} CMsgClientDeleteFriendsGroupResponse instance
         */
        CMsgClientDeleteFriendsGroupResponse.create = function create(properties) {
            return new CMsgClientDeleteFriendsGroupResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgClientDeleteFriendsGroupResponse message. Does not implicitly {@link CMsgClientDeleteFriendsGroupResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientDeleteFriendsGroupResponse
         * @static
         * @param {ICMsgClientDeleteFriendsGroupResponse} message CMsgClientDeleteFriendsGroupResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientDeleteFriendsGroupResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eresult);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientDeleteFriendsGroupResponse message, length delimited. Does not implicitly {@link CMsgClientDeleteFriendsGroupResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientDeleteFriendsGroupResponse
         * @static
         * @param {ICMsgClientDeleteFriendsGroupResponse} message CMsgClientDeleteFriendsGroupResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientDeleteFriendsGroupResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientDeleteFriendsGroupResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientDeleteFriendsGroupResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientDeleteFriendsGroupResponse} CMsgClientDeleteFriendsGroupResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientDeleteFriendsGroupResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientDeleteFriendsGroupResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientDeleteFriendsGroupResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientDeleteFriendsGroupResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientDeleteFriendsGroupResponse} CMsgClientDeleteFriendsGroupResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientDeleteFriendsGroupResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientDeleteFriendsGroupResponse message.
         * @function verify
         * @memberof CMsgClientDeleteFriendsGroupResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientDeleteFriendsGroupResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientDeleteFriendsGroupResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientDeleteFriendsGroupResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientDeleteFriendsGroupResponse} CMsgClientDeleteFriendsGroupResponse
         */
        CMsgClientDeleteFriendsGroupResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientDeleteFriendsGroupResponse)
                return object;
            var message = new $root.CMsgClientDeleteFriendsGroupResponse();
            if (object.eresult != null)
                message.eresult = object.eresult >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientDeleteFriendsGroupResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientDeleteFriendsGroupResponse
         * @static
         * @param {CMsgClientDeleteFriendsGroupResponse} message CMsgClientDeleteFriendsGroupResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientDeleteFriendsGroupResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eresult = 0;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            return object;
        };
    
        /**
         * Converts this CMsgClientDeleteFriendsGroupResponse to JSON.
         * @function toJSON
         * @memberof CMsgClientDeleteFriendsGroupResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientDeleteFriendsGroupResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientDeleteFriendsGroupResponse;
    })();
    
    $root.CMsgClientManageFriendsGroup = (function() {
    
        /**
         * Properties of a CMsgClientManageFriendsGroup.
         * @exports ICMsgClientManageFriendsGroup
         * @interface ICMsgClientManageFriendsGroup
         * @property {number|null} [groupid] CMsgClientManageFriendsGroup groupid
         * @property {string|null} [groupname] CMsgClientManageFriendsGroup groupname
         * @property {Array.<number|Long>|null} [steamid_friends_added] CMsgClientManageFriendsGroup steamid_friends_added
         * @property {Array.<number|Long>|null} [steamid_friends_removed] CMsgClientManageFriendsGroup steamid_friends_removed
         */
    
        /**
         * Constructs a new CMsgClientManageFriendsGroup.
         * @exports CMsgClientManageFriendsGroup
         * @classdesc Represents a CMsgClientManageFriendsGroup.
         * @implements ICMsgClientManageFriendsGroup
         * @constructor
         * @param {ICMsgClientManageFriendsGroup=} [properties] Properties to set
         */
        function CMsgClientManageFriendsGroup(properties) {
            this.steamid_friends_added = [];
            this.steamid_friends_removed = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientManageFriendsGroup groupid.
         * @member {number} groupid
         * @memberof CMsgClientManageFriendsGroup
         * @instance
         */
        CMsgClientManageFriendsGroup.prototype.groupid = 0;
    
        /**
         * CMsgClientManageFriendsGroup groupname.
         * @member {string} groupname
         * @memberof CMsgClientManageFriendsGroup
         * @instance
         */
        CMsgClientManageFriendsGroup.prototype.groupname = "";
    
        /**
         * CMsgClientManageFriendsGroup steamid_friends_added.
         * @member {Array.<number|Long>} steamid_friends_added
         * @memberof CMsgClientManageFriendsGroup
         * @instance
         */
        CMsgClientManageFriendsGroup.prototype.steamid_friends_added = $util.emptyArray;
    
        /**
         * CMsgClientManageFriendsGroup steamid_friends_removed.
         * @member {Array.<number|Long>} steamid_friends_removed
         * @memberof CMsgClientManageFriendsGroup
         * @instance
         */
        CMsgClientManageFriendsGroup.prototype.steamid_friends_removed = $util.emptyArray;
    
        /**
         * Creates a new CMsgClientManageFriendsGroup instance using the specified properties.
         * @function create
         * @memberof CMsgClientManageFriendsGroup
         * @static
         * @param {ICMsgClientManageFriendsGroup=} [properties] Properties to set
         * @returns {CMsgClientManageFriendsGroup} CMsgClientManageFriendsGroup instance
         */
        CMsgClientManageFriendsGroup.create = function create(properties) {
            return new CMsgClientManageFriendsGroup(properties);
        };
    
        /**
         * Encodes the specified CMsgClientManageFriendsGroup message. Does not implicitly {@link CMsgClientManageFriendsGroup.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientManageFriendsGroup
         * @static
         * @param {ICMsgClientManageFriendsGroup} message CMsgClientManageFriendsGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientManageFriendsGroup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.groupid);
            if (message.groupname != null && message.hasOwnProperty("groupname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.groupname);
            if (message.steamid_friends_added != null && message.steamid_friends_added.length)
                for (var i = 0; i < message.steamid_friends_added.length; ++i)
                    writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.steamid_friends_added[i]);
            if (message.steamid_friends_removed != null && message.steamid_friends_removed.length)
                for (var i = 0; i < message.steamid_friends_removed.length; ++i)
                    writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.steamid_friends_removed[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientManageFriendsGroup message, length delimited. Does not implicitly {@link CMsgClientManageFriendsGroup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientManageFriendsGroup
         * @static
         * @param {ICMsgClientManageFriendsGroup} message CMsgClientManageFriendsGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientManageFriendsGroup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientManageFriendsGroup message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientManageFriendsGroup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientManageFriendsGroup} CMsgClientManageFriendsGroup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientManageFriendsGroup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientManageFriendsGroup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupid = reader.int32();
                    break;
                case 2:
                    message.groupname = reader.string();
                    break;
                case 3:
                    if (!(message.steamid_friends_added && message.steamid_friends_added.length))
                        message.steamid_friends_added = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.steamid_friends_added.push(reader.fixed64());
                    } else
                        message.steamid_friends_added.push(reader.fixed64());
                    break;
                case 4:
                    if (!(message.steamid_friends_removed && message.steamid_friends_removed.length))
                        message.steamid_friends_removed = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.steamid_friends_removed.push(reader.fixed64());
                    } else
                        message.steamid_friends_removed.push(reader.fixed64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientManageFriendsGroup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientManageFriendsGroup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientManageFriendsGroup} CMsgClientManageFriendsGroup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientManageFriendsGroup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientManageFriendsGroup message.
         * @function verify
         * @memberof CMsgClientManageFriendsGroup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientManageFriendsGroup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                if (!$util.isInteger(message.groupid))
                    return "groupid: integer expected";
            if (message.groupname != null && message.hasOwnProperty("groupname"))
                if (!$util.isString(message.groupname))
                    return "groupname: string expected";
            if (message.steamid_friends_added != null && message.hasOwnProperty("steamid_friends_added")) {
                if (!Array.isArray(message.steamid_friends_added))
                    return "steamid_friends_added: array expected";
                for (var i = 0; i < message.steamid_friends_added.length; ++i)
                    if (!$util.isInteger(message.steamid_friends_added[i]) && !(message.steamid_friends_added[i] && $util.isInteger(message.steamid_friends_added[i].low) && $util.isInteger(message.steamid_friends_added[i].high)))
                        return "steamid_friends_added: integer|Long[] expected";
            }
            if (message.steamid_friends_removed != null && message.hasOwnProperty("steamid_friends_removed")) {
                if (!Array.isArray(message.steamid_friends_removed))
                    return "steamid_friends_removed: array expected";
                for (var i = 0; i < message.steamid_friends_removed.length; ++i)
                    if (!$util.isInteger(message.steamid_friends_removed[i]) && !(message.steamid_friends_removed[i] && $util.isInteger(message.steamid_friends_removed[i].low) && $util.isInteger(message.steamid_friends_removed[i].high)))
                        return "steamid_friends_removed: integer|Long[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgClientManageFriendsGroup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientManageFriendsGroup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientManageFriendsGroup} CMsgClientManageFriendsGroup
         */
        CMsgClientManageFriendsGroup.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientManageFriendsGroup)
                return object;
            var message = new $root.CMsgClientManageFriendsGroup();
            if (object.groupid != null)
                message.groupid = object.groupid | 0;
            if (object.groupname != null)
                message.groupname = String(object.groupname);
            if (object.steamid_friends_added) {
                if (!Array.isArray(object.steamid_friends_added))
                    throw TypeError(".CMsgClientManageFriendsGroup.steamid_friends_added: array expected");
                message.steamid_friends_added = [];
                for (var i = 0; i < object.steamid_friends_added.length; ++i)
                    if ($util.Long)
                        (message.steamid_friends_added[i] = $util.Long.fromValue(object.steamid_friends_added[i])).unsigned = false;
                    else if (typeof object.steamid_friends_added[i] === "string")
                        message.steamid_friends_added[i] = parseInt(object.steamid_friends_added[i], 10);
                    else if (typeof object.steamid_friends_added[i] === "number")
                        message.steamid_friends_added[i] = object.steamid_friends_added[i];
                    else if (typeof object.steamid_friends_added[i] === "object")
                        message.steamid_friends_added[i] = new $util.LongBits(object.steamid_friends_added[i].low >>> 0, object.steamid_friends_added[i].high >>> 0).toNumber();
            }
            if (object.steamid_friends_removed) {
                if (!Array.isArray(object.steamid_friends_removed))
                    throw TypeError(".CMsgClientManageFriendsGroup.steamid_friends_removed: array expected");
                message.steamid_friends_removed = [];
                for (var i = 0; i < object.steamid_friends_removed.length; ++i)
                    if ($util.Long)
                        (message.steamid_friends_removed[i] = $util.Long.fromValue(object.steamid_friends_removed[i])).unsigned = false;
                    else if (typeof object.steamid_friends_removed[i] === "string")
                        message.steamid_friends_removed[i] = parseInt(object.steamid_friends_removed[i], 10);
                    else if (typeof object.steamid_friends_removed[i] === "number")
                        message.steamid_friends_removed[i] = object.steamid_friends_removed[i];
                    else if (typeof object.steamid_friends_removed[i] === "object")
                        message.steamid_friends_removed[i] = new $util.LongBits(object.steamid_friends_removed[i].low >>> 0, object.steamid_friends_removed[i].high >>> 0).toNumber();
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientManageFriendsGroup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientManageFriendsGroup
         * @static
         * @param {CMsgClientManageFriendsGroup} message CMsgClientManageFriendsGroup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientManageFriendsGroup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.steamid_friends_added = [];
                object.steamid_friends_removed = [];
            }
            if (options.defaults) {
                object.groupid = 0;
                object.groupname = "";
            }
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                object.groupid = message.groupid;
            if (message.groupname != null && message.hasOwnProperty("groupname"))
                object.groupname = message.groupname;
            if (message.steamid_friends_added && message.steamid_friends_added.length) {
                object.steamid_friends_added = [];
                for (var j = 0; j < message.steamid_friends_added.length; ++j)
                    if (typeof message.steamid_friends_added[j] === "number")
                        object.steamid_friends_added[j] = options.longs === String ? String(message.steamid_friends_added[j]) : message.steamid_friends_added[j];
                    else
                        object.steamid_friends_added[j] = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_friends_added[j]) : options.longs === Number ? new $util.LongBits(message.steamid_friends_added[j].low >>> 0, message.steamid_friends_added[j].high >>> 0).toNumber() : message.steamid_friends_added[j];
            }
            if (message.steamid_friends_removed && message.steamid_friends_removed.length) {
                object.steamid_friends_removed = [];
                for (var j = 0; j < message.steamid_friends_removed.length; ++j)
                    if (typeof message.steamid_friends_removed[j] === "number")
                        object.steamid_friends_removed[j] = options.longs === String ? String(message.steamid_friends_removed[j]) : message.steamid_friends_removed[j];
                    else
                        object.steamid_friends_removed[j] = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_friends_removed[j]) : options.longs === Number ? new $util.LongBits(message.steamid_friends_removed[j].low >>> 0, message.steamid_friends_removed[j].high >>> 0).toNumber() : message.steamid_friends_removed[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgClientManageFriendsGroup to JSON.
         * @function toJSON
         * @memberof CMsgClientManageFriendsGroup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientManageFriendsGroup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientManageFriendsGroup;
    })();
    
    $root.CMsgClientManageFriendsGroupResponse = (function() {
    
        /**
         * Properties of a CMsgClientManageFriendsGroupResponse.
         * @exports ICMsgClientManageFriendsGroupResponse
         * @interface ICMsgClientManageFriendsGroupResponse
         * @property {number|null} [eresult] CMsgClientManageFriendsGroupResponse eresult
         */
    
        /**
         * Constructs a new CMsgClientManageFriendsGroupResponse.
         * @exports CMsgClientManageFriendsGroupResponse
         * @classdesc Represents a CMsgClientManageFriendsGroupResponse.
         * @implements ICMsgClientManageFriendsGroupResponse
         * @constructor
         * @param {ICMsgClientManageFriendsGroupResponse=} [properties] Properties to set
         */
        function CMsgClientManageFriendsGroupResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientManageFriendsGroupResponse eresult.
         * @member {number} eresult
         * @memberof CMsgClientManageFriendsGroupResponse
         * @instance
         */
        CMsgClientManageFriendsGroupResponse.prototype.eresult = 0;
    
        /**
         * Creates a new CMsgClientManageFriendsGroupResponse instance using the specified properties.
         * @function create
         * @memberof CMsgClientManageFriendsGroupResponse
         * @static
         * @param {ICMsgClientManageFriendsGroupResponse=} [properties] Properties to set
         * @returns {CMsgClientManageFriendsGroupResponse} CMsgClientManageFriendsGroupResponse instance
         */
        CMsgClientManageFriendsGroupResponse.create = function create(properties) {
            return new CMsgClientManageFriendsGroupResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgClientManageFriendsGroupResponse message. Does not implicitly {@link CMsgClientManageFriendsGroupResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientManageFriendsGroupResponse
         * @static
         * @param {ICMsgClientManageFriendsGroupResponse} message CMsgClientManageFriendsGroupResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientManageFriendsGroupResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eresult);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientManageFriendsGroupResponse message, length delimited. Does not implicitly {@link CMsgClientManageFriendsGroupResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientManageFriendsGroupResponse
         * @static
         * @param {ICMsgClientManageFriendsGroupResponse} message CMsgClientManageFriendsGroupResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientManageFriendsGroupResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientManageFriendsGroupResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientManageFriendsGroupResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientManageFriendsGroupResponse} CMsgClientManageFriendsGroupResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientManageFriendsGroupResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientManageFriendsGroupResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientManageFriendsGroupResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientManageFriendsGroupResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientManageFriendsGroupResponse} CMsgClientManageFriendsGroupResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientManageFriendsGroupResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientManageFriendsGroupResponse message.
         * @function verify
         * @memberof CMsgClientManageFriendsGroupResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientManageFriendsGroupResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientManageFriendsGroupResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientManageFriendsGroupResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientManageFriendsGroupResponse} CMsgClientManageFriendsGroupResponse
         */
        CMsgClientManageFriendsGroupResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientManageFriendsGroupResponse)
                return object;
            var message = new $root.CMsgClientManageFriendsGroupResponse();
            if (object.eresult != null)
                message.eresult = object.eresult >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientManageFriendsGroupResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientManageFriendsGroupResponse
         * @static
         * @param {CMsgClientManageFriendsGroupResponse} message CMsgClientManageFriendsGroupResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientManageFriendsGroupResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eresult = 0;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            return object;
        };
    
        /**
         * Converts this CMsgClientManageFriendsGroupResponse to JSON.
         * @function toJSON
         * @memberof CMsgClientManageFriendsGroupResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientManageFriendsGroupResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientManageFriendsGroupResponse;
    })();
    
    $root.CMsgClientAddFriendToGroup = (function() {
    
        /**
         * Properties of a CMsgClientAddFriendToGroup.
         * @exports ICMsgClientAddFriendToGroup
         * @interface ICMsgClientAddFriendToGroup
         * @property {number|null} [groupid] CMsgClientAddFriendToGroup groupid
         * @property {number|Long|null} [steamiduser] CMsgClientAddFriendToGroup steamiduser
         */
    
        /**
         * Constructs a new CMsgClientAddFriendToGroup.
         * @exports CMsgClientAddFriendToGroup
         * @classdesc Represents a CMsgClientAddFriendToGroup.
         * @implements ICMsgClientAddFriendToGroup
         * @constructor
         * @param {ICMsgClientAddFriendToGroup=} [properties] Properties to set
         */
        function CMsgClientAddFriendToGroup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientAddFriendToGroup groupid.
         * @member {number} groupid
         * @memberof CMsgClientAddFriendToGroup
         * @instance
         */
        CMsgClientAddFriendToGroup.prototype.groupid = 0;
    
        /**
         * CMsgClientAddFriendToGroup steamiduser.
         * @member {number|Long} steamiduser
         * @memberof CMsgClientAddFriendToGroup
         * @instance
         */
        CMsgClientAddFriendToGroup.prototype.steamiduser = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgClientAddFriendToGroup instance using the specified properties.
         * @function create
         * @memberof CMsgClientAddFriendToGroup
         * @static
         * @param {ICMsgClientAddFriendToGroup=} [properties] Properties to set
         * @returns {CMsgClientAddFriendToGroup} CMsgClientAddFriendToGroup instance
         */
        CMsgClientAddFriendToGroup.create = function create(properties) {
            return new CMsgClientAddFriendToGroup(properties);
        };
    
        /**
         * Encodes the specified CMsgClientAddFriendToGroup message. Does not implicitly {@link CMsgClientAddFriendToGroup.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientAddFriendToGroup
         * @static
         * @param {ICMsgClientAddFriendToGroup} message CMsgClientAddFriendToGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientAddFriendToGroup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.groupid);
            if (message.steamiduser != null && message.hasOwnProperty("steamiduser"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.steamiduser);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientAddFriendToGroup message, length delimited. Does not implicitly {@link CMsgClientAddFriendToGroup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientAddFriendToGroup
         * @static
         * @param {ICMsgClientAddFriendToGroup} message CMsgClientAddFriendToGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientAddFriendToGroup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientAddFriendToGroup message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientAddFriendToGroup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientAddFriendToGroup} CMsgClientAddFriendToGroup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientAddFriendToGroup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientAddFriendToGroup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupid = reader.int32();
                    break;
                case 2:
                    message.steamiduser = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientAddFriendToGroup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientAddFriendToGroup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientAddFriendToGroup} CMsgClientAddFriendToGroup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientAddFriendToGroup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientAddFriendToGroup message.
         * @function verify
         * @memberof CMsgClientAddFriendToGroup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientAddFriendToGroup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                if (!$util.isInteger(message.groupid))
                    return "groupid: integer expected";
            if (message.steamiduser != null && message.hasOwnProperty("steamiduser"))
                if (!$util.isInteger(message.steamiduser) && !(message.steamiduser && $util.isInteger(message.steamiduser.low) && $util.isInteger(message.steamiduser.high)))
                    return "steamiduser: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientAddFriendToGroup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientAddFriendToGroup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientAddFriendToGroup} CMsgClientAddFriendToGroup
         */
        CMsgClientAddFriendToGroup.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientAddFriendToGroup)
                return object;
            var message = new $root.CMsgClientAddFriendToGroup();
            if (object.groupid != null)
                message.groupid = object.groupid | 0;
            if (object.steamiduser != null)
                if ($util.Long)
                    (message.steamiduser = $util.Long.fromValue(object.steamiduser)).unsigned = false;
                else if (typeof object.steamiduser === "string")
                    message.steamiduser = parseInt(object.steamiduser, 10);
                else if (typeof object.steamiduser === "number")
                    message.steamiduser = object.steamiduser;
                else if (typeof object.steamiduser === "object")
                    message.steamiduser = new $util.LongBits(object.steamiduser.low >>> 0, object.steamiduser.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientAddFriendToGroup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientAddFriendToGroup
         * @static
         * @param {CMsgClientAddFriendToGroup} message CMsgClientAddFriendToGroup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientAddFriendToGroup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.groupid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamiduser = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamiduser = options.longs === String ? "0" : 0;
            }
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                object.groupid = message.groupid;
            if (message.steamiduser != null && message.hasOwnProperty("steamiduser"))
                if (typeof message.steamiduser === "number")
                    object.steamiduser = options.longs === String ? String(message.steamiduser) : message.steamiduser;
                else
                    object.steamiduser = options.longs === String ? $util.Long.prototype.toString.call(message.steamiduser) : options.longs === Number ? new $util.LongBits(message.steamiduser.low >>> 0, message.steamiduser.high >>> 0).toNumber() : message.steamiduser;
            return object;
        };
    
        /**
         * Converts this CMsgClientAddFriendToGroup to JSON.
         * @function toJSON
         * @memberof CMsgClientAddFriendToGroup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientAddFriendToGroup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientAddFriendToGroup;
    })();
    
    $root.CMsgClientAddFriendToGroupResponse = (function() {
    
        /**
         * Properties of a CMsgClientAddFriendToGroupResponse.
         * @exports ICMsgClientAddFriendToGroupResponse
         * @interface ICMsgClientAddFriendToGroupResponse
         * @property {number|null} [eresult] CMsgClientAddFriendToGroupResponse eresult
         */
    
        /**
         * Constructs a new CMsgClientAddFriendToGroupResponse.
         * @exports CMsgClientAddFriendToGroupResponse
         * @classdesc Represents a CMsgClientAddFriendToGroupResponse.
         * @implements ICMsgClientAddFriendToGroupResponse
         * @constructor
         * @param {ICMsgClientAddFriendToGroupResponse=} [properties] Properties to set
         */
        function CMsgClientAddFriendToGroupResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientAddFriendToGroupResponse eresult.
         * @member {number} eresult
         * @memberof CMsgClientAddFriendToGroupResponse
         * @instance
         */
        CMsgClientAddFriendToGroupResponse.prototype.eresult = 0;
    
        /**
         * Creates a new CMsgClientAddFriendToGroupResponse instance using the specified properties.
         * @function create
         * @memberof CMsgClientAddFriendToGroupResponse
         * @static
         * @param {ICMsgClientAddFriendToGroupResponse=} [properties] Properties to set
         * @returns {CMsgClientAddFriendToGroupResponse} CMsgClientAddFriendToGroupResponse instance
         */
        CMsgClientAddFriendToGroupResponse.create = function create(properties) {
            return new CMsgClientAddFriendToGroupResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgClientAddFriendToGroupResponse message. Does not implicitly {@link CMsgClientAddFriendToGroupResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientAddFriendToGroupResponse
         * @static
         * @param {ICMsgClientAddFriendToGroupResponse} message CMsgClientAddFriendToGroupResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientAddFriendToGroupResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eresult);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientAddFriendToGroupResponse message, length delimited. Does not implicitly {@link CMsgClientAddFriendToGroupResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientAddFriendToGroupResponse
         * @static
         * @param {ICMsgClientAddFriendToGroupResponse} message CMsgClientAddFriendToGroupResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientAddFriendToGroupResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientAddFriendToGroupResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientAddFriendToGroupResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientAddFriendToGroupResponse} CMsgClientAddFriendToGroupResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientAddFriendToGroupResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientAddFriendToGroupResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientAddFriendToGroupResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientAddFriendToGroupResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientAddFriendToGroupResponse} CMsgClientAddFriendToGroupResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientAddFriendToGroupResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientAddFriendToGroupResponse message.
         * @function verify
         * @memberof CMsgClientAddFriendToGroupResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientAddFriendToGroupResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientAddFriendToGroupResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientAddFriendToGroupResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientAddFriendToGroupResponse} CMsgClientAddFriendToGroupResponse
         */
        CMsgClientAddFriendToGroupResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientAddFriendToGroupResponse)
                return object;
            var message = new $root.CMsgClientAddFriendToGroupResponse();
            if (object.eresult != null)
                message.eresult = object.eresult >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientAddFriendToGroupResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientAddFriendToGroupResponse
         * @static
         * @param {CMsgClientAddFriendToGroupResponse} message CMsgClientAddFriendToGroupResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientAddFriendToGroupResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eresult = 0;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            return object;
        };
    
        /**
         * Converts this CMsgClientAddFriendToGroupResponse to JSON.
         * @function toJSON
         * @memberof CMsgClientAddFriendToGroupResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientAddFriendToGroupResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientAddFriendToGroupResponse;
    })();
    
    $root.CMsgClientRemoveFriendFromGroup = (function() {
    
        /**
         * Properties of a CMsgClientRemoveFriendFromGroup.
         * @exports ICMsgClientRemoveFriendFromGroup
         * @interface ICMsgClientRemoveFriendFromGroup
         * @property {number|null} [groupid] CMsgClientRemoveFriendFromGroup groupid
         * @property {number|Long|null} [steamiduser] CMsgClientRemoveFriendFromGroup steamiduser
         */
    
        /**
         * Constructs a new CMsgClientRemoveFriendFromGroup.
         * @exports CMsgClientRemoveFriendFromGroup
         * @classdesc Represents a CMsgClientRemoveFriendFromGroup.
         * @implements ICMsgClientRemoveFriendFromGroup
         * @constructor
         * @param {ICMsgClientRemoveFriendFromGroup=} [properties] Properties to set
         */
        function CMsgClientRemoveFriendFromGroup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientRemoveFriendFromGroup groupid.
         * @member {number} groupid
         * @memberof CMsgClientRemoveFriendFromGroup
         * @instance
         */
        CMsgClientRemoveFriendFromGroup.prototype.groupid = 0;
    
        /**
         * CMsgClientRemoveFriendFromGroup steamiduser.
         * @member {number|Long} steamiduser
         * @memberof CMsgClientRemoveFriendFromGroup
         * @instance
         */
        CMsgClientRemoveFriendFromGroup.prototype.steamiduser = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgClientRemoveFriendFromGroup instance using the specified properties.
         * @function create
         * @memberof CMsgClientRemoveFriendFromGroup
         * @static
         * @param {ICMsgClientRemoveFriendFromGroup=} [properties] Properties to set
         * @returns {CMsgClientRemoveFriendFromGroup} CMsgClientRemoveFriendFromGroup instance
         */
        CMsgClientRemoveFriendFromGroup.create = function create(properties) {
            return new CMsgClientRemoveFriendFromGroup(properties);
        };
    
        /**
         * Encodes the specified CMsgClientRemoveFriendFromGroup message. Does not implicitly {@link CMsgClientRemoveFriendFromGroup.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientRemoveFriendFromGroup
         * @static
         * @param {ICMsgClientRemoveFriendFromGroup} message CMsgClientRemoveFriendFromGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientRemoveFriendFromGroup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.groupid);
            if (message.steamiduser != null && message.hasOwnProperty("steamiduser"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.steamiduser);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientRemoveFriendFromGroup message, length delimited. Does not implicitly {@link CMsgClientRemoveFriendFromGroup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientRemoveFriendFromGroup
         * @static
         * @param {ICMsgClientRemoveFriendFromGroup} message CMsgClientRemoveFriendFromGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientRemoveFriendFromGroup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientRemoveFriendFromGroup message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientRemoveFriendFromGroup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientRemoveFriendFromGroup} CMsgClientRemoveFriendFromGroup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientRemoveFriendFromGroup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientRemoveFriendFromGroup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupid = reader.int32();
                    break;
                case 2:
                    message.steamiduser = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientRemoveFriendFromGroup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientRemoveFriendFromGroup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientRemoveFriendFromGroup} CMsgClientRemoveFriendFromGroup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientRemoveFriendFromGroup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientRemoveFriendFromGroup message.
         * @function verify
         * @memberof CMsgClientRemoveFriendFromGroup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientRemoveFriendFromGroup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                if (!$util.isInteger(message.groupid))
                    return "groupid: integer expected";
            if (message.steamiduser != null && message.hasOwnProperty("steamiduser"))
                if (!$util.isInteger(message.steamiduser) && !(message.steamiduser && $util.isInteger(message.steamiduser.low) && $util.isInteger(message.steamiduser.high)))
                    return "steamiduser: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientRemoveFriendFromGroup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientRemoveFriendFromGroup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientRemoveFriendFromGroup} CMsgClientRemoveFriendFromGroup
         */
        CMsgClientRemoveFriendFromGroup.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientRemoveFriendFromGroup)
                return object;
            var message = new $root.CMsgClientRemoveFriendFromGroup();
            if (object.groupid != null)
                message.groupid = object.groupid | 0;
            if (object.steamiduser != null)
                if ($util.Long)
                    (message.steamiduser = $util.Long.fromValue(object.steamiduser)).unsigned = false;
                else if (typeof object.steamiduser === "string")
                    message.steamiduser = parseInt(object.steamiduser, 10);
                else if (typeof object.steamiduser === "number")
                    message.steamiduser = object.steamiduser;
                else if (typeof object.steamiduser === "object")
                    message.steamiduser = new $util.LongBits(object.steamiduser.low >>> 0, object.steamiduser.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientRemoveFriendFromGroup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientRemoveFriendFromGroup
         * @static
         * @param {CMsgClientRemoveFriendFromGroup} message CMsgClientRemoveFriendFromGroup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientRemoveFriendFromGroup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.groupid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamiduser = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamiduser = options.longs === String ? "0" : 0;
            }
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                object.groupid = message.groupid;
            if (message.steamiduser != null && message.hasOwnProperty("steamiduser"))
                if (typeof message.steamiduser === "number")
                    object.steamiduser = options.longs === String ? String(message.steamiduser) : message.steamiduser;
                else
                    object.steamiduser = options.longs === String ? $util.Long.prototype.toString.call(message.steamiduser) : options.longs === Number ? new $util.LongBits(message.steamiduser.low >>> 0, message.steamiduser.high >>> 0).toNumber() : message.steamiduser;
            return object;
        };
    
        /**
         * Converts this CMsgClientRemoveFriendFromGroup to JSON.
         * @function toJSON
         * @memberof CMsgClientRemoveFriendFromGroup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientRemoveFriendFromGroup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientRemoveFriendFromGroup;
    })();
    
    $root.CMsgClientRemoveFriendFromGroupResponse = (function() {
    
        /**
         * Properties of a CMsgClientRemoveFriendFromGroupResponse.
         * @exports ICMsgClientRemoveFriendFromGroupResponse
         * @interface ICMsgClientRemoveFriendFromGroupResponse
         * @property {number|null} [eresult] CMsgClientRemoveFriendFromGroupResponse eresult
         */
    
        /**
         * Constructs a new CMsgClientRemoveFriendFromGroupResponse.
         * @exports CMsgClientRemoveFriendFromGroupResponse
         * @classdesc Represents a CMsgClientRemoveFriendFromGroupResponse.
         * @implements ICMsgClientRemoveFriendFromGroupResponse
         * @constructor
         * @param {ICMsgClientRemoveFriendFromGroupResponse=} [properties] Properties to set
         */
        function CMsgClientRemoveFriendFromGroupResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientRemoveFriendFromGroupResponse eresult.
         * @member {number} eresult
         * @memberof CMsgClientRemoveFriendFromGroupResponse
         * @instance
         */
        CMsgClientRemoveFriendFromGroupResponse.prototype.eresult = 0;
    
        /**
         * Creates a new CMsgClientRemoveFriendFromGroupResponse instance using the specified properties.
         * @function create
         * @memberof CMsgClientRemoveFriendFromGroupResponse
         * @static
         * @param {ICMsgClientRemoveFriendFromGroupResponse=} [properties] Properties to set
         * @returns {CMsgClientRemoveFriendFromGroupResponse} CMsgClientRemoveFriendFromGroupResponse instance
         */
        CMsgClientRemoveFriendFromGroupResponse.create = function create(properties) {
            return new CMsgClientRemoveFriendFromGroupResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgClientRemoveFriendFromGroupResponse message. Does not implicitly {@link CMsgClientRemoveFriendFromGroupResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientRemoveFriendFromGroupResponse
         * @static
         * @param {ICMsgClientRemoveFriendFromGroupResponse} message CMsgClientRemoveFriendFromGroupResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientRemoveFriendFromGroupResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eresult);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientRemoveFriendFromGroupResponse message, length delimited. Does not implicitly {@link CMsgClientRemoveFriendFromGroupResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientRemoveFriendFromGroupResponse
         * @static
         * @param {ICMsgClientRemoveFriendFromGroupResponse} message CMsgClientRemoveFriendFromGroupResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientRemoveFriendFromGroupResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientRemoveFriendFromGroupResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientRemoveFriendFromGroupResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientRemoveFriendFromGroupResponse} CMsgClientRemoveFriendFromGroupResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientRemoveFriendFromGroupResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientRemoveFriendFromGroupResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientRemoveFriendFromGroupResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientRemoveFriendFromGroupResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientRemoveFriendFromGroupResponse} CMsgClientRemoveFriendFromGroupResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientRemoveFriendFromGroupResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientRemoveFriendFromGroupResponse message.
         * @function verify
         * @memberof CMsgClientRemoveFriendFromGroupResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientRemoveFriendFromGroupResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientRemoveFriendFromGroupResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientRemoveFriendFromGroupResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientRemoveFriendFromGroupResponse} CMsgClientRemoveFriendFromGroupResponse
         */
        CMsgClientRemoveFriendFromGroupResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientRemoveFriendFromGroupResponse)
                return object;
            var message = new $root.CMsgClientRemoveFriendFromGroupResponse();
            if (object.eresult != null)
                message.eresult = object.eresult >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientRemoveFriendFromGroupResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientRemoveFriendFromGroupResponse
         * @static
         * @param {CMsgClientRemoveFriendFromGroupResponse} message CMsgClientRemoveFriendFromGroupResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientRemoveFriendFromGroupResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eresult = 0;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            return object;
        };
    
        /**
         * Converts this CMsgClientRemoveFriendFromGroupResponse to JSON.
         * @function toJSON
         * @memberof CMsgClientRemoveFriendFromGroupResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientRemoveFriendFromGroupResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientRemoveFriendFromGroupResponse;
    })();
    
    $root.CMsgClientGetEmoticonList = (function() {
    
        /**
         * Properties of a CMsgClientGetEmoticonList.
         * @exports ICMsgClientGetEmoticonList
         * @interface ICMsgClientGetEmoticonList
         */
    
        /**
         * Constructs a new CMsgClientGetEmoticonList.
         * @exports CMsgClientGetEmoticonList
         * @classdesc Represents a CMsgClientGetEmoticonList.
         * @implements ICMsgClientGetEmoticonList
         * @constructor
         * @param {ICMsgClientGetEmoticonList=} [properties] Properties to set
         */
        function CMsgClientGetEmoticonList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CMsgClientGetEmoticonList instance using the specified properties.
         * @function create
         * @memberof CMsgClientGetEmoticonList
         * @static
         * @param {ICMsgClientGetEmoticonList=} [properties] Properties to set
         * @returns {CMsgClientGetEmoticonList} CMsgClientGetEmoticonList instance
         */
        CMsgClientGetEmoticonList.create = function create(properties) {
            return new CMsgClientGetEmoticonList(properties);
        };
    
        /**
         * Encodes the specified CMsgClientGetEmoticonList message. Does not implicitly {@link CMsgClientGetEmoticonList.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientGetEmoticonList
         * @static
         * @param {ICMsgClientGetEmoticonList} message CMsgClientGetEmoticonList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientGetEmoticonList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientGetEmoticonList message, length delimited. Does not implicitly {@link CMsgClientGetEmoticonList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientGetEmoticonList
         * @static
         * @param {ICMsgClientGetEmoticonList} message CMsgClientGetEmoticonList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientGetEmoticonList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientGetEmoticonList message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientGetEmoticonList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientGetEmoticonList} CMsgClientGetEmoticonList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientGetEmoticonList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientGetEmoticonList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientGetEmoticonList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientGetEmoticonList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientGetEmoticonList} CMsgClientGetEmoticonList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientGetEmoticonList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientGetEmoticonList message.
         * @function verify
         * @memberof CMsgClientGetEmoticonList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientGetEmoticonList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CMsgClientGetEmoticonList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientGetEmoticonList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientGetEmoticonList} CMsgClientGetEmoticonList
         */
        CMsgClientGetEmoticonList.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientGetEmoticonList)
                return object;
            return new $root.CMsgClientGetEmoticonList();
        };
    
        /**
         * Creates a plain object from a CMsgClientGetEmoticonList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientGetEmoticonList
         * @static
         * @param {CMsgClientGetEmoticonList} message CMsgClientGetEmoticonList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientGetEmoticonList.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CMsgClientGetEmoticonList to JSON.
         * @function toJSON
         * @memberof CMsgClientGetEmoticonList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientGetEmoticonList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClientGetEmoticonList;
    })();
    
    $root.CMsgClientEmoticonList = (function() {
    
        /**
         * Properties of a CMsgClientEmoticonList.
         * @exports ICMsgClientEmoticonList
         * @interface ICMsgClientEmoticonList
         * @property {Array.<CMsgClientEmoticonList.IEmoticon>|null} [emoticons] CMsgClientEmoticonList emoticons
         */
    
        /**
         * Constructs a new CMsgClientEmoticonList.
         * @exports CMsgClientEmoticonList
         * @classdesc Represents a CMsgClientEmoticonList.
         * @implements ICMsgClientEmoticonList
         * @constructor
         * @param {ICMsgClientEmoticonList=} [properties] Properties to set
         */
        function CMsgClientEmoticonList(properties) {
            this.emoticons = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClientEmoticonList emoticons.
         * @member {Array.<CMsgClientEmoticonList.IEmoticon>} emoticons
         * @memberof CMsgClientEmoticonList
         * @instance
         */
        CMsgClientEmoticonList.prototype.emoticons = $util.emptyArray;
    
        /**
         * Creates a new CMsgClientEmoticonList instance using the specified properties.
         * @function create
         * @memberof CMsgClientEmoticonList
         * @static
         * @param {ICMsgClientEmoticonList=} [properties] Properties to set
         * @returns {CMsgClientEmoticonList} CMsgClientEmoticonList instance
         */
        CMsgClientEmoticonList.create = function create(properties) {
            return new CMsgClientEmoticonList(properties);
        };
    
        /**
         * Encodes the specified CMsgClientEmoticonList message. Does not implicitly {@link CMsgClientEmoticonList.verify|verify} messages.
         * @function encode
         * @memberof CMsgClientEmoticonList
         * @static
         * @param {ICMsgClientEmoticonList} message CMsgClientEmoticonList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientEmoticonList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.emoticons != null && message.emoticons.length)
                for (var i = 0; i < message.emoticons.length; ++i)
                    $root.CMsgClientEmoticonList.Emoticon.encode(message.emoticons[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClientEmoticonList message, length delimited. Does not implicitly {@link CMsgClientEmoticonList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClientEmoticonList
         * @static
         * @param {ICMsgClientEmoticonList} message CMsgClientEmoticonList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClientEmoticonList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClientEmoticonList message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClientEmoticonList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClientEmoticonList} CMsgClientEmoticonList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientEmoticonList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientEmoticonList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.emoticons && message.emoticons.length))
                        message.emoticons = [];
                    message.emoticons.push($root.CMsgClientEmoticonList.Emoticon.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClientEmoticonList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClientEmoticonList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClientEmoticonList} CMsgClientEmoticonList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClientEmoticonList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClientEmoticonList message.
         * @function verify
         * @memberof CMsgClientEmoticonList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClientEmoticonList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.emoticons != null && message.hasOwnProperty("emoticons")) {
                if (!Array.isArray(message.emoticons))
                    return "emoticons: array expected";
                for (var i = 0; i < message.emoticons.length; ++i) {
                    var error = $root.CMsgClientEmoticonList.Emoticon.verify(message.emoticons[i]);
                    if (error)
                        return "emoticons." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgClientEmoticonList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClientEmoticonList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClientEmoticonList} CMsgClientEmoticonList
         */
        CMsgClientEmoticonList.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClientEmoticonList)
                return object;
            var message = new $root.CMsgClientEmoticonList();
            if (object.emoticons) {
                if (!Array.isArray(object.emoticons))
                    throw TypeError(".CMsgClientEmoticonList.emoticons: array expected");
                message.emoticons = [];
                for (var i = 0; i < object.emoticons.length; ++i) {
                    if (typeof object.emoticons[i] !== "object")
                        throw TypeError(".CMsgClientEmoticonList.emoticons: object expected");
                    message.emoticons[i] = $root.CMsgClientEmoticonList.Emoticon.fromObject(object.emoticons[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClientEmoticonList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClientEmoticonList
         * @static
         * @param {CMsgClientEmoticonList} message CMsgClientEmoticonList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClientEmoticonList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.emoticons = [];
            if (message.emoticons && message.emoticons.length) {
                object.emoticons = [];
                for (var j = 0; j < message.emoticons.length; ++j)
                    object.emoticons[j] = $root.CMsgClientEmoticonList.Emoticon.toObject(message.emoticons[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgClientEmoticonList to JSON.
         * @function toJSON
         * @memberof CMsgClientEmoticonList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClientEmoticonList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgClientEmoticonList.Emoticon = (function() {
    
            /**
             * Properties of an Emoticon.
             * @memberof CMsgClientEmoticonList
             * @interface IEmoticon
             * @property {string|null} [name] Emoticon name
             * @property {number|null} [count] Emoticon count
             * @property {number|null} [time_last_used] Emoticon time_last_used
             * @property {number|null} [use_count] Emoticon use_count
             * @property {number|null} [time_received] Emoticon time_received
             */
    
            /**
             * Constructs a new Emoticon.
             * @memberof CMsgClientEmoticonList
             * @classdesc Represents an Emoticon.
             * @implements IEmoticon
             * @constructor
             * @param {CMsgClientEmoticonList.IEmoticon=} [properties] Properties to set
             */
            function Emoticon(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Emoticon name.
             * @member {string} name
             * @memberof CMsgClientEmoticonList.Emoticon
             * @instance
             */
            Emoticon.prototype.name = "";
    
            /**
             * Emoticon count.
             * @member {number} count
             * @memberof CMsgClientEmoticonList.Emoticon
             * @instance
             */
            Emoticon.prototype.count = 0;
    
            /**
             * Emoticon time_last_used.
             * @member {number} time_last_used
             * @memberof CMsgClientEmoticonList.Emoticon
             * @instance
             */
            Emoticon.prototype.time_last_used = 0;
    
            /**
             * Emoticon use_count.
             * @member {number} use_count
             * @memberof CMsgClientEmoticonList.Emoticon
             * @instance
             */
            Emoticon.prototype.use_count = 0;
    
            /**
             * Emoticon time_received.
             * @member {number} time_received
             * @memberof CMsgClientEmoticonList.Emoticon
             * @instance
             */
            Emoticon.prototype.time_received = 0;
    
            /**
             * Creates a new Emoticon instance using the specified properties.
             * @function create
             * @memberof CMsgClientEmoticonList.Emoticon
             * @static
             * @param {CMsgClientEmoticonList.IEmoticon=} [properties] Properties to set
             * @returns {CMsgClientEmoticonList.Emoticon} Emoticon instance
             */
            Emoticon.create = function create(properties) {
                return new Emoticon(properties);
            };
    
            /**
             * Encodes the specified Emoticon message. Does not implicitly {@link CMsgClientEmoticonList.Emoticon.verify|verify} messages.
             * @function encode
             * @memberof CMsgClientEmoticonList.Emoticon
             * @static
             * @param {CMsgClientEmoticonList.IEmoticon} message Emoticon message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Emoticon.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.count != null && message.hasOwnProperty("count"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.count);
                if (message.time_last_used != null && message.hasOwnProperty("time_last_used"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.time_last_used);
                if (message.use_count != null && message.hasOwnProperty("use_count"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.use_count);
                if (message.time_received != null && message.hasOwnProperty("time_received"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.time_received);
                return writer;
            };
    
            /**
             * Encodes the specified Emoticon message, length delimited. Does not implicitly {@link CMsgClientEmoticonList.Emoticon.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgClientEmoticonList.Emoticon
             * @static
             * @param {CMsgClientEmoticonList.IEmoticon} message Emoticon message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Emoticon.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Emoticon message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgClientEmoticonList.Emoticon
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgClientEmoticonList.Emoticon} Emoticon
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Emoticon.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClientEmoticonList.Emoticon();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.count = reader.int32();
                        break;
                    case 3:
                        message.time_last_used = reader.uint32();
                        break;
                    case 4:
                        message.use_count = reader.uint32();
                        break;
                    case 5:
                        message.time_received = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Emoticon message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgClientEmoticonList.Emoticon
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgClientEmoticonList.Emoticon} Emoticon
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Emoticon.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Emoticon message.
             * @function verify
             * @memberof CMsgClientEmoticonList.Emoticon
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Emoticon.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count))
                        return "count: integer expected";
                if (message.time_last_used != null && message.hasOwnProperty("time_last_used"))
                    if (!$util.isInteger(message.time_last_used))
                        return "time_last_used: integer expected";
                if (message.use_count != null && message.hasOwnProperty("use_count"))
                    if (!$util.isInteger(message.use_count))
                        return "use_count: integer expected";
                if (message.time_received != null && message.hasOwnProperty("time_received"))
                    if (!$util.isInteger(message.time_received))
                        return "time_received: integer expected";
                return null;
            };
    
            /**
             * Creates an Emoticon message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgClientEmoticonList.Emoticon
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgClientEmoticonList.Emoticon} Emoticon
             */
            Emoticon.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgClientEmoticonList.Emoticon)
                    return object;
                var message = new $root.CMsgClientEmoticonList.Emoticon();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.count != null)
                    message.count = object.count | 0;
                if (object.time_last_used != null)
                    message.time_last_used = object.time_last_used >>> 0;
                if (object.use_count != null)
                    message.use_count = object.use_count >>> 0;
                if (object.time_received != null)
                    message.time_received = object.time_received >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an Emoticon message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgClientEmoticonList.Emoticon
             * @static
             * @param {CMsgClientEmoticonList.Emoticon} message Emoticon
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Emoticon.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.count = 0;
                    object.time_last_used = 0;
                    object.use_count = 0;
                    object.time_received = 0;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                if (message.time_last_used != null && message.hasOwnProperty("time_last_used"))
                    object.time_last_used = message.time_last_used;
                if (message.use_count != null && message.hasOwnProperty("use_count"))
                    object.use_count = message.use_count;
                if (message.time_received != null && message.hasOwnProperty("time_received"))
                    object.time_received = message.time_received;
                return object;
            };
    
            /**
             * Converts this Emoticon to JSON.
             * @function toJSON
             * @memberof CMsgClientEmoticonList.Emoticon
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Emoticon.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Emoticon;
        })();
    
        return CMsgClientEmoticonList;
    })();

    return $root;
});
